{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Home","title":"Home"},{"location":"#home","text":"","title":"Home"},{"location":"competitive_programming/combinatorics/","text":"Combinatorics polya\u5b9a\u7406 \u5728\u8fd9\u91cc\u53ea\u8c08\u4e00\u4e0bpolya\u5b9a\u7406\u662f\u5982\u4f55\u5e94\u7528\u7684\u3002\u5bf9\u4e8e\u6392\u6210\u4e00\u6392\u7684\u5e26\u7f16\u53f7\u7684\u5c0f\u7403\uff0c\u6309\u7167\u67d0\u4e00\u79cd\u65b9\u6848\u6539\u53d8\u5176\u4e2d\u4e00\u4e9b\u7403\u7684\u653e\u7f6e\u987a\u5e8f\uff0c\u53ef\u4ee5\u79f0\u4e4b\u4e3a\u7f6e\u6362\u3002\u6bcf \u4e00\u79cd\u7f6e\u6362\u65b9\u6cd5\u53ef\u4ee5\u7528\u4e24\u6392\u6570\u5b57\u4f86\u8868\u793a\uff0c\u7b2c\u4e00\u6392\u6570\u5b57\u548c\u7b2c\u4e8c\u6392\u6570\u5b57\u4e00\u4e00\u5bf9\u5e94\uff0c\u7b2c\u4e00\u6392\u6570\u5b57\u8868\u793a\u5c0f\u7403\u7684\u539f\u6765\u4f4d\u7f6e\uff081\uff5en\uff09\uff0c\u7b2c\u4e8c\u6392\u6570\u5b57\u8868\u793a\u5c0f\u7403\u4ea4\u6362\u540e\u7684\u4f4d\u7f6e\u3002\u73b0\u5728\u6211 \u4eec\u6709n\u4e2a\u5c0f\u7403\uff0cm\u79cd\u989c\u8272\u3002\u6709k\u79cd\u7f6e\u6362\u65b9\u6cd5\uff0c\u6211\u4eec\u8ba4\u4e3a\u80fd\u901a\u8fc7\u7f6e\u6362\u65b9\u6cd5\u4ea4\u6362\u4f4d\u7f6e\u540e\u53d8\u6210\u540c\u4e00\u79cd\u67d3\u8272\u60c5\u51b5\uff08\u989c\u8272\u7684\u6392\u5217\u72b6\u51b5\u76f8\u540c\uff0c\u5ffd\u7565\u5c0f\u7403\u7f16\u53f7\uff09\uff0c\u5219\u6211\u4eec\u8ba4\u4e3a\u8fd9\u4e9b\u4e92 \u76f8\u901a\u8fc7\u7f6e\u6362\u80fd\u8fbe\u5230\u7684\u72b6\u6001\u4e3a\u540c\u4e00\u79cd\u67d3\u8272\u65b9\u6cd5\u3002\u6211\u4eec\u73b0\u5728\u8981\u6c42\u603b\u5171\u6709\u591a\u5c11\u79cd\u67d3\u8272\u65b9\u6cd5\u3002\u8981\u8ba1\u7b97\u65b9\u6cd5\u6570\uff0c\u6211\u4eec\u5148\u8981\u8ba1\u7b97k\u79cd\u7f6e\u6362\u65b9\u6cd5\u4e2d\u6bcf\u79cd\u7f6e\u6362\u65b9\u6cd5\u4e2d\u542b\u6709\u7684\u73af\u6570\uff0c\u5373\u5efa \u7acb\u4e00\u4e2a\u56fe\uff0c\u6709n\u4e2a\u70b9\uff0c\u628a\u6bcf\u4e2a\u7f6e\u6362\u65b9\u6cd5\u4e24\u6392\u6570\u5b57\u4e2d\u7684\u4e0a\u4e0b\u4e00\u4e00\u5bf9\u5e94\u7684\u6570\u5b57\u5bf9\u770b\u6210\u8fb9\u7684\u8d77\u70b9\u548c\u7ec8\u70b9\uff0c\u8ba1\u7b97\u8fd9\u4e2a\u56fe\u4e2d\u6709\u51e0\u4e2a\u73af\u3002\u6211\u4eec\u8bbe\u73af\u6570\u5206\u522b\u4e3ac1~ck\u3002\u90a3\u4e48\u67d3\u8272 \u65b9\u6cd5\u6570\u4e3a(m^c1+m^c2+...+m^ck)/k\u3002\u4ee5\u4e0a\u5c31\u662fpolya\u5b9a\u7406\uff0c\u8fd9\u91cc\u8981\u6ce8\u610f\u7684\u662f\u7f6e\u6362\u65b9\u6cd5\u96c6\u5408\u5fc5\u987b\u662f\u7fa4\uff0c\u9700\u8981\u6ee1\u8db3\u5c01\u95ed\u6027\uff0c\u5373\u5982\u679c\u628a\u901a\u8fc7\u8be5 \u96c6\u5408\u4e2d\u7684\u82e5\u5e72\u4e2a\u65b9\u6cd5\u8fde\u7eed\u8fdb\u884c\u7f6e\u6362\u538b\u7f29\u6210\u4e00\u4e2a\u7f6e\u6362\u65b9\u6cd5\uff08\u7528\u4e24\u6392\u6570\u5b50\u8868\u793a\uff09\uff0c\u90a3\u4e48\u8fd9\u79cd\u65b0\u7684\u7f6e\u6362\u65b9\u6cd5\u4e5f\u5fc5\u987b\u5c5e\u4e8e\u8be5\u96c6\u5408\u3002 \u5bb9\u65a5\u539f\u7406 \u5047\u8bbe\u5e73\u9762\u4e0a\u6709\u4e00\u4e9b\u5706\uff0c\u4e92\u76f8\u4e4b\u95f4\u6709\u91cd\u53e0\u90e8\u5206\uff0c\u6211\u4eec\u8981\u6c42\u8fd9\u4e9b\u5706\u8986\u76d6\u7684\u603b\u9762\u79ef\uff08\u91cd\u53e0\u90e8\u5206\u53ea\u8bb0\u4e00\u6b21\uff09\u3002\u8ba1\u7b97\u65b9\u6cd5\u5c31\u662f\uff1a\u52a0\u4e0a\u6240\u6709\u88ab\u8986\u76d6\u4e86\u81f3\u5c111\u6b21\u7684\u9762\u79ef\u52a0\uff0c\u51cf\u53bb\u6240\u6709\u88ab\u8986\u76d6\u4e86\u81f3\u5c112\u6b21\u7684\u9762\u79ef\uff0c\u52a0\u4e0a\u6240\u6709\u88ab\u8986\u76d6\u4e86\u81f3\u5c113\u6b21\u7684\u9762\u79ef\u2026\u2026\u5bf9\u4e8e\u5947\u6570\u7684\u5c31\u52a0\uff0c\u5bf9\u4e8e\u5076\u6570\u7684\u5c31\u51cf\uff0c\u6700\u7ec8\u7ed3\u679c\u5373\u4e3a\u8986\u76d6\u7684\u603b\u9762\u79ef\u3002\u628a\u8fd9\u4e9b\u5706\u53d8\u6210\u662f\u96c6\u5408\u7684\u8bdd\uff0c\u90a3\u4e48\u8fd9\u4e2a\u8ba1\u7b97\u8fc7\u7a0b\u5c31\u662f\u5bb9\u65a5\u539f\u7406\u3002 \u6709\u91cd\u590d\u7ec4\u5408 \u4ecen\u4e2a\u5143\u7d20\u4e2d\u6709\u91cd\u590d\u5730\u53d6r\u4e2a\uff0c\u4e0d\u8ba1\u987a\u5e8f\uff0c\u5219\u4e0d\u540c\u7684\u53d6\u6cd5\u6709\u591a\u5c11\u79cd\uff1f \u8fd9\u4e2a\u95ee\u9898\u7684\u7b54\u6848\u88ab\u79f0\u4e3a\u6709\u91cd\u590d\u7ec4\u5408\u6570\u3002\u7ed3\u679c\u5f88\u7b80\u6d01\uff0c\u662fC(n+r-1,r)\u3002(\u6ce8\uff1a\u8fd9\u8868\u793a\u4ecen+r-1\u4e2a\u6570\u4e2d\u53d6\u51far\u4e2a\u6570\u7684\u7ec4\u5408\u6570) \u3010\u8bc1\u660e\u3011 \u5c06n\u4e2a\u5143\u7d20\u770b\u505an\u4e2a\u76d2\u5b50,r\u770b\u4f5cr\u4e2a\u65e0\u533a\u522b\u7684\u7403,\u5219\u76f8\u5f53\u4e8e: \u628ar\u4e2a\u540c\u6837\u7684\u7403\u653e\u5165n\u4e2a\u987a\u6b21\u6392\u5217\u7684\u76d2\u5b50,\u6c42\u4e0d\u8ba1\u653e\u7403\u987a\u5e8f\u7684\u653e\u6cd5\u79cd\u6570 \u75280\u8868\u793a\u76d2\u5b50,1\u8868\u793a\u7403 \u6211\u4eec\u628a\u8fd9n\u4e2a0\u548cr\u4e2a1\u5199\u5728\u4e00\u884c\u4e0a\u3002 \u7531\u4e8e\u7403\u5fc5\u987b\u653e\u5728\u76d2\u5b50\u4e2d,\u89c4\u5b9a\u67d0\u4e2a0\u4e4b\u524d,\u5230\u4e0a\u4e00\u4e2a0\u4e3a\u6b62\u76841\u7684\u4e2a\u6570,\u8868\u793a\u8be5\u76d2\u5b50\u4e2d\u88c5\u7684\u7403\u6570 \u6ce8\u610f\u5230\u6700\u540e\u4e00\u4e2a\u6570\u5fc5\u987b\u662f0 \u6240\u4ee5\u76f8\u5f53\u4e8e\u4ece\u524d\u9762n+r-1\u4e2a\u4f4d\u7f6e\u4e2d\u6311\u51far\u4e2a\u4f4d\u7f6e\u653e1\uff0c\u5176\u4f59n-1\u4e2a\u4f4d\u7f6e\u653e0 \u6c42\u6392\u5217Rank \u6c42\u4e00\u4e2a\u6392\u5217\u662f\u7b2c\u51e0\u79cd\u6392\u5217\u7684\u65b9\u6cd5\uff1a\u8bbef(x)\u8868\u793ax\u4f4d\u540e\u9762\u6bd4x\u5c0f\u7684\u5143\u7d20\u7684\u4e2a\u6570\uff0c\u90a3\u4e48\u8be5\u6392\u5217\u7684\u5728\u5168\u6392\u5217\u4e2d\u7684\u6392\u4f4d rank=\\sum_{i=1}^{n}{( f(i) * ( (n-i)! ) )} rank=\\sum_{i=1}^{n}{( f(i) * ( (n-i)! ) )} \u3002 rank \\in [0, n!-1] rank \\in [0, n!-1] \u3002 \u671f\u671b\u91cd\u7ec4 \u73b0\u6709\u968f\u673a\u53d8\u91cfX\uff0c\u4f20\u7edf\u6c42X\u671f\u671b\u7684\u65b9\u6cd5\u662f\u628aX\u7684\u6bcf\u4e2a\u53d6\u503c\u4e58\u4ee5\u5176\u6982\u7387\u518d\u52a0\u548c\u3002 \u800c\u73b0\u5728\u6211\u4eec\u8981\u5bf9X\u7684\u6bcf\u4e2a\u53d6\u503c\u8fdb\u884c\u91cd\u7ec4\u3002 \u4f8b\u5982\uff0c E(X)=\\sum{x_i p_i} E(X)=\\sum{x_i p_i} \u3002\u5f53 X=x_i X=x_i \u65f6\uff0c\u6211\u4eec\u628a X X \u770b\u4f5c\u662f n n \u4e2a\u968f\u673a\u53d8\u91cf\u7684\u548c\u3002 p_i p_i \u662f\u6070\u597d\u548c\u4e3a x_i x_i \u65f6\u7684\u6982\u7387\u3002 \u8fd9\u60f3\u5f53\u4e0e\u662f\u6309\u7167 X X \u7684\u6bcf\u79cd\u53d6\u503c\u8fdb\u884c\u5206\u7c7b\u8ba1\u7b97\u3002 \u73b0\u5728\u6211\u4eec\u7ed9\u51fa\u53e6\u5916\u4e00\u79cd\u6c42\u6cd5\u3002 \u8bbe\u8fd9n\u4e2a\u968f\u673a\u53d8\u91cf\u603b\u5171\u6709M\u79cd\u4e0d\u540c\u7684\u53d6\u503c\u65b9\u6cd5\u3002 \uff08\u5982\u679c\u8fd9\u4e9b\u968f\u673a\u53d8\u91cf\u76f8\u4e92\u72ec\u7acb\uff0c\u90a3\u4e48 M=m1*m2*...*mn \uff0cmi\u8868\u793a\u7b2ci\u4e2a\u968f\u673a\u53d8\u91cf\u6709\u591a\u5c11\u79cd\u53d6\u503c\u3002\uff09 \u6211\u4eec\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u968f\u673a\u53d8\u91cfai\u90fd\u628aM\u79cd\u60c5\u51b5\u679a\u4e3e\u4e00\u6b21\uff0c\u8ba1\u7b97\u6bcf\u79cd\u60c5\u51b5\u53d1\u751f\u7684\u6982\u7387\u4e58\u4ee5ai\u5728\u8be5\u79cd\u60c5\u51b5\u4e0b\u7684\u53d6\u503c\uff0c\u5e76\u52a0\u548c\u3002 \u6700\u540e\u628a\u6240\u6709\u968f\u673a\u53d8\u91cf\u7684\u52a0\u548c\u518d\u52a0\u548c\uff0c\u5c31\u662f\u6211\u4eec\u8981\u6c42\u7684E(X)\u3002","title":"Combinatorics"},{"location":"competitive_programming/combinatorics/#combinatorics","text":"","title":"Combinatorics"},{"location":"competitive_programming/combinatorics/#polya","text":"\u5728\u8fd9\u91cc\u53ea\u8c08\u4e00\u4e0bpolya\u5b9a\u7406\u662f\u5982\u4f55\u5e94\u7528\u7684\u3002\u5bf9\u4e8e\u6392\u6210\u4e00\u6392\u7684\u5e26\u7f16\u53f7\u7684\u5c0f\u7403\uff0c\u6309\u7167\u67d0\u4e00\u79cd\u65b9\u6848\u6539\u53d8\u5176\u4e2d\u4e00\u4e9b\u7403\u7684\u653e\u7f6e\u987a\u5e8f\uff0c\u53ef\u4ee5\u79f0\u4e4b\u4e3a\u7f6e\u6362\u3002\u6bcf \u4e00\u79cd\u7f6e\u6362\u65b9\u6cd5\u53ef\u4ee5\u7528\u4e24\u6392\u6570\u5b57\u4f86\u8868\u793a\uff0c\u7b2c\u4e00\u6392\u6570\u5b57\u548c\u7b2c\u4e8c\u6392\u6570\u5b57\u4e00\u4e00\u5bf9\u5e94\uff0c\u7b2c\u4e00\u6392\u6570\u5b57\u8868\u793a\u5c0f\u7403\u7684\u539f\u6765\u4f4d\u7f6e\uff081\uff5en\uff09\uff0c\u7b2c\u4e8c\u6392\u6570\u5b57\u8868\u793a\u5c0f\u7403\u4ea4\u6362\u540e\u7684\u4f4d\u7f6e\u3002\u73b0\u5728\u6211 \u4eec\u6709n\u4e2a\u5c0f\u7403\uff0cm\u79cd\u989c\u8272\u3002\u6709k\u79cd\u7f6e\u6362\u65b9\u6cd5\uff0c\u6211\u4eec\u8ba4\u4e3a\u80fd\u901a\u8fc7\u7f6e\u6362\u65b9\u6cd5\u4ea4\u6362\u4f4d\u7f6e\u540e\u53d8\u6210\u540c\u4e00\u79cd\u67d3\u8272\u60c5\u51b5\uff08\u989c\u8272\u7684\u6392\u5217\u72b6\u51b5\u76f8\u540c\uff0c\u5ffd\u7565\u5c0f\u7403\u7f16\u53f7\uff09\uff0c\u5219\u6211\u4eec\u8ba4\u4e3a\u8fd9\u4e9b\u4e92 \u76f8\u901a\u8fc7\u7f6e\u6362\u80fd\u8fbe\u5230\u7684\u72b6\u6001\u4e3a\u540c\u4e00\u79cd\u67d3\u8272\u65b9\u6cd5\u3002\u6211\u4eec\u73b0\u5728\u8981\u6c42\u603b\u5171\u6709\u591a\u5c11\u79cd\u67d3\u8272\u65b9\u6cd5\u3002\u8981\u8ba1\u7b97\u65b9\u6cd5\u6570\uff0c\u6211\u4eec\u5148\u8981\u8ba1\u7b97k\u79cd\u7f6e\u6362\u65b9\u6cd5\u4e2d\u6bcf\u79cd\u7f6e\u6362\u65b9\u6cd5\u4e2d\u542b\u6709\u7684\u73af\u6570\uff0c\u5373\u5efa \u7acb\u4e00\u4e2a\u56fe\uff0c\u6709n\u4e2a\u70b9\uff0c\u628a\u6bcf\u4e2a\u7f6e\u6362\u65b9\u6cd5\u4e24\u6392\u6570\u5b57\u4e2d\u7684\u4e0a\u4e0b\u4e00\u4e00\u5bf9\u5e94\u7684\u6570\u5b57\u5bf9\u770b\u6210\u8fb9\u7684\u8d77\u70b9\u548c\u7ec8\u70b9\uff0c\u8ba1\u7b97\u8fd9\u4e2a\u56fe\u4e2d\u6709\u51e0\u4e2a\u73af\u3002\u6211\u4eec\u8bbe\u73af\u6570\u5206\u522b\u4e3ac1~ck\u3002\u90a3\u4e48\u67d3\u8272 \u65b9\u6cd5\u6570\u4e3a(m^c1+m^c2+...+m^ck)/k\u3002\u4ee5\u4e0a\u5c31\u662fpolya\u5b9a\u7406\uff0c\u8fd9\u91cc\u8981\u6ce8\u610f\u7684\u662f\u7f6e\u6362\u65b9\u6cd5\u96c6\u5408\u5fc5\u987b\u662f\u7fa4\uff0c\u9700\u8981\u6ee1\u8db3\u5c01\u95ed\u6027\uff0c\u5373\u5982\u679c\u628a\u901a\u8fc7\u8be5 \u96c6\u5408\u4e2d\u7684\u82e5\u5e72\u4e2a\u65b9\u6cd5\u8fde\u7eed\u8fdb\u884c\u7f6e\u6362\u538b\u7f29\u6210\u4e00\u4e2a\u7f6e\u6362\u65b9\u6cd5\uff08\u7528\u4e24\u6392\u6570\u5b50\u8868\u793a\uff09\uff0c\u90a3\u4e48\u8fd9\u79cd\u65b0\u7684\u7f6e\u6362\u65b9\u6cd5\u4e5f\u5fc5\u987b\u5c5e\u4e8e\u8be5\u96c6\u5408\u3002","title":"polya\u5b9a\u7406"},{"location":"competitive_programming/combinatorics/#_1","text":"\u5047\u8bbe\u5e73\u9762\u4e0a\u6709\u4e00\u4e9b\u5706\uff0c\u4e92\u76f8\u4e4b\u95f4\u6709\u91cd\u53e0\u90e8\u5206\uff0c\u6211\u4eec\u8981\u6c42\u8fd9\u4e9b\u5706\u8986\u76d6\u7684\u603b\u9762\u79ef\uff08\u91cd\u53e0\u90e8\u5206\u53ea\u8bb0\u4e00\u6b21\uff09\u3002\u8ba1\u7b97\u65b9\u6cd5\u5c31\u662f\uff1a\u52a0\u4e0a\u6240\u6709\u88ab\u8986\u76d6\u4e86\u81f3\u5c111\u6b21\u7684\u9762\u79ef\u52a0\uff0c\u51cf\u53bb\u6240\u6709\u88ab\u8986\u76d6\u4e86\u81f3\u5c112\u6b21\u7684\u9762\u79ef\uff0c\u52a0\u4e0a\u6240\u6709\u88ab\u8986\u76d6\u4e86\u81f3\u5c113\u6b21\u7684\u9762\u79ef\u2026\u2026\u5bf9\u4e8e\u5947\u6570\u7684\u5c31\u52a0\uff0c\u5bf9\u4e8e\u5076\u6570\u7684\u5c31\u51cf\uff0c\u6700\u7ec8\u7ed3\u679c\u5373\u4e3a\u8986\u76d6\u7684\u603b\u9762\u79ef\u3002\u628a\u8fd9\u4e9b\u5706\u53d8\u6210\u662f\u96c6\u5408\u7684\u8bdd\uff0c\u90a3\u4e48\u8fd9\u4e2a\u8ba1\u7b97\u8fc7\u7a0b\u5c31\u662f\u5bb9\u65a5\u539f\u7406\u3002","title":"\u5bb9\u65a5\u539f\u7406"},{"location":"competitive_programming/combinatorics/#_2","text":"\u4ecen\u4e2a\u5143\u7d20\u4e2d\u6709\u91cd\u590d\u5730\u53d6r\u4e2a\uff0c\u4e0d\u8ba1\u987a\u5e8f\uff0c\u5219\u4e0d\u540c\u7684\u53d6\u6cd5\u6709\u591a\u5c11\u79cd\uff1f \u8fd9\u4e2a\u95ee\u9898\u7684\u7b54\u6848\u88ab\u79f0\u4e3a\u6709\u91cd\u590d\u7ec4\u5408\u6570\u3002\u7ed3\u679c\u5f88\u7b80\u6d01\uff0c\u662fC(n+r-1,r)\u3002(\u6ce8\uff1a\u8fd9\u8868\u793a\u4ecen+r-1\u4e2a\u6570\u4e2d\u53d6\u51far\u4e2a\u6570\u7684\u7ec4\u5408\u6570) \u3010\u8bc1\u660e\u3011 \u5c06n\u4e2a\u5143\u7d20\u770b\u505an\u4e2a\u76d2\u5b50,r\u770b\u4f5cr\u4e2a\u65e0\u533a\u522b\u7684\u7403,\u5219\u76f8\u5f53\u4e8e: \u628ar\u4e2a\u540c\u6837\u7684\u7403\u653e\u5165n\u4e2a\u987a\u6b21\u6392\u5217\u7684\u76d2\u5b50,\u6c42\u4e0d\u8ba1\u653e\u7403\u987a\u5e8f\u7684\u653e\u6cd5\u79cd\u6570 \u75280\u8868\u793a\u76d2\u5b50,1\u8868\u793a\u7403 \u6211\u4eec\u628a\u8fd9n\u4e2a0\u548cr\u4e2a1\u5199\u5728\u4e00\u884c\u4e0a\u3002 \u7531\u4e8e\u7403\u5fc5\u987b\u653e\u5728\u76d2\u5b50\u4e2d,\u89c4\u5b9a\u67d0\u4e2a0\u4e4b\u524d,\u5230\u4e0a\u4e00\u4e2a0\u4e3a\u6b62\u76841\u7684\u4e2a\u6570,\u8868\u793a\u8be5\u76d2\u5b50\u4e2d\u88c5\u7684\u7403\u6570 \u6ce8\u610f\u5230\u6700\u540e\u4e00\u4e2a\u6570\u5fc5\u987b\u662f0 \u6240\u4ee5\u76f8\u5f53\u4e8e\u4ece\u524d\u9762n+r-1\u4e2a\u4f4d\u7f6e\u4e2d\u6311\u51far\u4e2a\u4f4d\u7f6e\u653e1\uff0c\u5176\u4f59n-1\u4e2a\u4f4d\u7f6e\u653e0","title":"\u6709\u91cd\u590d\u7ec4\u5408"},{"location":"competitive_programming/combinatorics/#rank","text":"\u6c42\u4e00\u4e2a\u6392\u5217\u662f\u7b2c\u51e0\u79cd\u6392\u5217\u7684\u65b9\u6cd5\uff1a\u8bbef(x)\u8868\u793ax\u4f4d\u540e\u9762\u6bd4x\u5c0f\u7684\u5143\u7d20\u7684\u4e2a\u6570\uff0c\u90a3\u4e48\u8be5\u6392\u5217\u7684\u5728\u5168\u6392\u5217\u4e2d\u7684\u6392\u4f4d rank=\\sum_{i=1}^{n}{( f(i) * ( (n-i)! ) )} rank=\\sum_{i=1}^{n}{( f(i) * ( (n-i)! ) )} \u3002 rank \\in [0, n!-1] rank \\in [0, n!-1] \u3002","title":"\u6c42\u6392\u5217Rank"},{"location":"competitive_programming/combinatorics/#_3","text":"\u73b0\u6709\u968f\u673a\u53d8\u91cfX\uff0c\u4f20\u7edf\u6c42X\u671f\u671b\u7684\u65b9\u6cd5\u662f\u628aX\u7684\u6bcf\u4e2a\u53d6\u503c\u4e58\u4ee5\u5176\u6982\u7387\u518d\u52a0\u548c\u3002 \u800c\u73b0\u5728\u6211\u4eec\u8981\u5bf9X\u7684\u6bcf\u4e2a\u53d6\u503c\u8fdb\u884c\u91cd\u7ec4\u3002 \u4f8b\u5982\uff0c E(X)=\\sum{x_i p_i} E(X)=\\sum{x_i p_i} \u3002\u5f53 X=x_i X=x_i \u65f6\uff0c\u6211\u4eec\u628a X X \u770b\u4f5c\u662f n n \u4e2a\u968f\u673a\u53d8\u91cf\u7684\u548c\u3002 p_i p_i \u662f\u6070\u597d\u548c\u4e3a x_i x_i \u65f6\u7684\u6982\u7387\u3002 \u8fd9\u60f3\u5f53\u4e0e\u662f\u6309\u7167 X X \u7684\u6bcf\u79cd\u53d6\u503c\u8fdb\u884c\u5206\u7c7b\u8ba1\u7b97\u3002 \u73b0\u5728\u6211\u4eec\u7ed9\u51fa\u53e6\u5916\u4e00\u79cd\u6c42\u6cd5\u3002 \u8bbe\u8fd9n\u4e2a\u968f\u673a\u53d8\u91cf\u603b\u5171\u6709M\u79cd\u4e0d\u540c\u7684\u53d6\u503c\u65b9\u6cd5\u3002 \uff08\u5982\u679c\u8fd9\u4e9b\u968f\u673a\u53d8\u91cf\u76f8\u4e92\u72ec\u7acb\uff0c\u90a3\u4e48 M=m1*m2*...*mn \uff0cmi\u8868\u793a\u7b2ci\u4e2a\u968f\u673a\u53d8\u91cf\u6709\u591a\u5c11\u79cd\u53d6\u503c\u3002\uff09 \u6211\u4eec\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u968f\u673a\u53d8\u91cfai\u90fd\u628aM\u79cd\u60c5\u51b5\u679a\u4e3e\u4e00\u6b21\uff0c\u8ba1\u7b97\u6bcf\u79cd\u60c5\u51b5\u53d1\u751f\u7684\u6982\u7387\u4e58\u4ee5ai\u5728\u8be5\u79cd\u60c5\u51b5\u4e0b\u7684\u53d6\u503c\uff0c\u5e76\u52a0\u548c\u3002 \u6700\u540e\u628a\u6240\u6709\u968f\u673a\u53d8\u91cf\u7684\u52a0\u548c\u518d\u52a0\u548c\uff0c\u5c31\u662f\u6211\u4eec\u8981\u6c42\u7684E(X)\u3002","title":"\u671f\u671b\u91cd\u7ec4"},{"location":"competitive_programming/computational_geometry/","text":"Computational Geometry Pick\u516c\u5f0f\uff1a\u5e73\u9762\u4e0a\u4ee5\u683c\u5b50\u70b9\u4e3a\u9876\u70b9\u7684\u7b80\u5355\u591a\u8fb9\u5f62\uff0c\u5982\u679c\u8fb9\u4e0a\u7684\u70b9\u6570\u4e3aon\uff0c\u5185\u90e8\u7684\u70b9\u6570\u4e3ain\uff0c\u5219\u5b83\u7684\u9762\u79ef\u4e3aarea=on/2+in-1 \u4e8c\u5206\u6cd5\u5728\u51e0\u4f55\u8ba1\u7b97\u4e2d\u662f\u5e38\u7528\u7684\u3002 Similar Polygons \u770b\u4e24\u4e2a\u591a\u8fb9\u5f62\u662f\u5426\u76f8\u4f3c\uff0c\u53ea\u9700\u8981\u5224\u65ad\u6bcf\u5bf9\u5e94\u4e24\u70b9\u7684\u8ddd\u79bb\u662f\u5426\u6210\u6bd4\u4f8b\u3002\u6ce8\u610f\uff1a\u4e0d\u53ea\u662f\u76f8\u90bb\u70b9\uff0c\u4e0d\u76f8\u90bb\u7684\u4e5f\u8981\u5224\u65ad\u3002 \u591a\u7ef4\u5750\u6807\u6700\u8fdc\u66fc\u54c8\u987f\u8ddd\u79bb\u70b9\u5bf9 \u5bf9\u4e8e\u4e24\u7ef4\u7684\u60c5\u51b5\uff0c\u4e24\u4e2a\u70b9(x1,y1)(x2,y2)\u4e4b\u95f4\u7684\u8ddd\u79bb\u4e3a|x1-x2|+|y1-y2|\uff0c\u53ef\u80fd\u53d6\u00b1(x1-x2)\u00b1(y1-y2)\uff0c\u5047\u5982\u771f\u5b9e\u7684\u60c5\u51b5\u662f(x1-x2)+(y1-y2)\uff0c\u90a3\u4e2a\u5728\u5176\u4ed6\u60c5\u51b5\u4e0b\u7b97\u51fa\u6765\u7684\u5173\u4e8e\u8fd9\u4e24\u4e2a\u70b9\u7684\u6700\u5927\u8ddd\u79bb\u80af\u5b9a\u6bd4\u8fd9\u4e2a\u5c0f\uff08\u53bb\u6389\u7edd\u5bf9\u503c\u7b26\u53f7\u4e86\uff09\uff0c\u7136\u800c\u00b1(x1-x2)\u00b1(y1-y2)\u53ef\u4ee5\u5199\u6210(x1\u00b1y1)-(x2\u00b1y2)\u3002\u628a\u4e8e\u662f(x\u00b1y)\u770b\u6210\u4e00\u4e2a\u70b9\u7684\u6743\u503c\u3002\u53ea\u8981\u679a\u4e3e\u6bcf\u4e00\u7ef4\u7684\u5206\u91cf\u524d\u9762\u7684\u7b26\u53f7\u5373\u53ef\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u6b21\u679a\u4e3e\u7b97\u51fa\u6240\u6709\u7684n\u4e2a\u70b9\u4e2d\u6743\u503c\u6700\u5927\u7684\u548c\u6700\u5c0f\u7684\uff0c\u6c42\u5dee\uff0c\u66f4\u65b0\u7b54\u6848\u6c42\u6700\u5927\u5373\u53ef\u3002","title":"Computational Geometry"},{"location":"competitive_programming/computational_geometry/#computational-geometry","text":"Pick\u516c\u5f0f\uff1a\u5e73\u9762\u4e0a\u4ee5\u683c\u5b50\u70b9\u4e3a\u9876\u70b9\u7684\u7b80\u5355\u591a\u8fb9\u5f62\uff0c\u5982\u679c\u8fb9\u4e0a\u7684\u70b9\u6570\u4e3aon\uff0c\u5185\u90e8\u7684\u70b9\u6570\u4e3ain\uff0c\u5219\u5b83\u7684\u9762\u79ef\u4e3aarea=on/2+in-1 \u4e8c\u5206\u6cd5\u5728\u51e0\u4f55\u8ba1\u7b97\u4e2d\u662f\u5e38\u7528\u7684\u3002","title":"Computational Geometry"},{"location":"competitive_programming/computational_geometry/#similar-polygons","text":"\u770b\u4e24\u4e2a\u591a\u8fb9\u5f62\u662f\u5426\u76f8\u4f3c\uff0c\u53ea\u9700\u8981\u5224\u65ad\u6bcf\u5bf9\u5e94\u4e24\u70b9\u7684\u8ddd\u79bb\u662f\u5426\u6210\u6bd4\u4f8b\u3002\u6ce8\u610f\uff1a\u4e0d\u53ea\u662f\u76f8\u90bb\u70b9\uff0c\u4e0d\u76f8\u90bb\u7684\u4e5f\u8981\u5224\u65ad\u3002","title":"Similar Polygons"},{"location":"competitive_programming/computational_geometry/#_1","text":"\u5bf9\u4e8e\u4e24\u7ef4\u7684\u60c5\u51b5\uff0c\u4e24\u4e2a\u70b9(x1,y1)(x2,y2)\u4e4b\u95f4\u7684\u8ddd\u79bb\u4e3a|x1-x2|+|y1-y2|\uff0c\u53ef\u80fd\u53d6\u00b1(x1-x2)\u00b1(y1-y2)\uff0c\u5047\u5982\u771f\u5b9e\u7684\u60c5\u51b5\u662f(x1-x2)+(y1-y2)\uff0c\u90a3\u4e2a\u5728\u5176\u4ed6\u60c5\u51b5\u4e0b\u7b97\u51fa\u6765\u7684\u5173\u4e8e\u8fd9\u4e24\u4e2a\u70b9\u7684\u6700\u5927\u8ddd\u79bb\u80af\u5b9a\u6bd4\u8fd9\u4e2a\u5c0f\uff08\u53bb\u6389\u7edd\u5bf9\u503c\u7b26\u53f7\u4e86\uff09\uff0c\u7136\u800c\u00b1(x1-x2)\u00b1(y1-y2)\u53ef\u4ee5\u5199\u6210(x1\u00b1y1)-(x2\u00b1y2)\u3002\u628a\u4e8e\u662f(x\u00b1y)\u770b\u6210\u4e00\u4e2a\u70b9\u7684\u6743\u503c\u3002\u53ea\u8981\u679a\u4e3e\u6bcf\u4e00\u7ef4\u7684\u5206\u91cf\u524d\u9762\u7684\u7b26\u53f7\u5373\u53ef\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u6b21\u679a\u4e3e\u7b97\u51fa\u6240\u6709\u7684n\u4e2a\u70b9\u4e2d\u6743\u503c\u6700\u5927\u7684\u548c\u6700\u5c0f\u7684\uff0c\u6c42\u5dee\uff0c\u66f4\u65b0\u7b54\u6848\u6c42\u6700\u5927\u5373\u53ef\u3002","title":"\u591a\u7ef4\u5750\u6807\u6700\u8fdc\u66fc\u54c8\u987f\u8ddd\u79bb\u70b9\u5bf9"},{"location":"competitive_programming/cpp/","text":"C++ Grammar \u8c03\u8bd5\u7684\u65f6\u5019 #define D(x) x \u4e0d\u8c03\u8bd5\u7684\u65f6\u5019 #define D(x) \uff0c\u628a\u8c03\u8bd5\u7684\u8f93\u51fa\u5199\u6210 D(printf(\u201c%d\\n\u201d, a)); \u3002 long long = int * int \u7684\u65f6\u5019\u4e00\u4e2a int \u8981\u5f3a\u5236\u8f6c\u6362\u4e3a long long \u3002 c\u8bed\u8a00\u4e2d struct \u4e0d\u80fd\u6709\u6784\u9020\u51fd\u6570\uff0c\u5f00\u6570\u7ec4\u4e0d\u80fd\u4f7f\u7528 const \u7684\u503c\u4f5c\u4e3a\u5927\u5c0f\uff0c\u800c\u8981\u7528 define . \u4ee3\u66ff vector \u7684\u5efa\u56fe\u65b9\u6cd5\uff0c\u6570\u7ec4\u6a21\u62df\u94fe\u8868\u6cd5\uff0c map[i] \u5b58\u7b2c i \u4e2a\u70b9\u7684\u7b2c\u4e00\u6761\u8fb9\u5728 e \u4e2d\u7684\u4e0b\u6807\u3002 e \u7528\u6765\u5b58\u8fb9\uff0c next \u8bb0\u5f55\u8be5\u70b9\u7684\u4e0b\u4e00\u6761\u8fb9\u7684\u5750\u6807\u3002 \u4f7f\u7528 vector \u7684\u6548\u7387\u6781\u4f4e\u3002 \u7528c\u8bed\u8a00\u5199\u7684\uff0c memset \u4e0d\u7528\u5305\u542b\u5934\u6587\u4ef6 \u56db\u820d\u4e94\u5165\u7684\u65b9\u6cd5\u662f (int)(x + 0.5) cmath \u4e2d\u7684 exp(x) \u51fd\u6570\u662f\u7528\u6765\u6c42e\u7684 x \u6b21\u5e42\u3002 \u5bf9\u4e8e double \u7c7b\u578b scanf \u65f6\u8981\u7528 %lf \uff0c printf \u65f6\u8981\u7528 %f \u3002 next_permutation(f, f+n); \u662f\u5c06f\u770b\u505a\u4e00\u4e2a\u6392\u5217\uff0c\u5e76\u6c42\u5176\u4e0b\u4e00\u4e2a\u6392\u5217\uff0c\u6240\u6709\u6c42\u5f97\u7684\u6392\u5217\u662f\u4e0d\u91cd\u590d\u7684\uff0c\u9700\u8981a lgorithm \u5934\u6587\u4ef6\u3002\u5728\u9047\u5230\u6700\u540e\u4e00\u4e2a\u6392\u5217\u540e\u4f1a\u8fd4\u56de false \uff0c\u5e76\u8df3\u8f6c\u5230\u7b2c\u4e00\u79cd\u6392\u5217\uff0c\u5426\u5219\u4f1a\u8fd4\u56de true . putchar() , getchar() \u6bd4 scanf() , printf() \u5feb\u3002 strtok(char *st1, char *st2) \u7528 st2 \u5206\u5272 st1 \uff0c\u635f\u574f\u539f\u4e32\uff0c\u8fd4\u56de\u5206\u5272\u540e\u7684\u7b2c\u4e00\u4e2a\u4e32\u7684\u6307\u9488\uff0c\u60f3\u83b7\u5f97\u88ab\u5206\u5272\u7684\u7b2c\u4e8c\u4e2a\u4e32\u5219\u9700\u8981\u8c03\u7528\u7b2c\u4e8c\u6b21\uff0c\u5e76\u4e14\u7b2c\u4e00\u4e2a\u53c2\u6570\u7ed9 NULL unget(ch, stdin); \u53ef\u4ee5\u628a\u8bfb\u5230\u7684\u5b57\u7b26ch\u653e\u56de\u5230\u8f93\u5165\u6587\u4ef6\u4e2d\u53bb\u3002\u76f8\u5f53\u4e8e getchar() \u7684\u9006\u7a0b\u3002 reverse(f, f+n) \u53ef\u4ee5\u53cd\u8f6cf\u6570\u7ec4\u7684\u524dn\u4f4d\uff0c\u8fd9\u4e2a\u51fd\u6570\u8981\u5305\u542b algorithm \u3002 string::find(char *, pos); \u8fd8\u8981\u6ce8\u610freplace\u7684\u7528\u6cd5 string::replace(pos, length, char*); map \u5e38\u7528\u4e8e\u67e5\u627e\u67d0\u5143\u7d20\u5728\u6570\u7ec4\u4e2d\u7684\u4f4d\u7f6e\u3002 \u6c42\u548c\u51fd\u6570 accumulate \u9700\u8981\u5305\u542b\u5934\u6587\u4ef6 numeric \uff0c\u4f7f\u7528\u65b9\u6cd5\u4e3a sum = accumulate(f, f + n, 0); \u6c42\u6700\u5927\u503c\u51fd\u6570 max_element \u8fd4\u56de\u6700\u5927\u503c\u6307\u9488\uff0c\u9700\u8981\u5305\u542b\u5934\u6587\u4ef6 algorithm \uff0c\u4f7f\u7528\u65b9\u6cd5\u4e3a max_value=*max_element(f, f+n); \u7528 sort \u6392\u5e8f\u91cd\u8f7d < \u7684\u65f6\u5019\u8981\u6ce8\u610f\u7b49\u4e8e\u7684\u60c5\u51b5\u4e5f\u8981\u8fd4\u56de false \u3002 map\u5982\u679c\u8981\u4f7f\u7528 char* \u4f5c\u4e3a key \uff0c\u4e0d\u80fd\u7b80\u5355\u7684\u76f4\u63a5\u4f7f\u7528\uff0c\u53ef\u4ee5\u7528 string \u4f5c\u4e3a map \u7684 key \uff0c\u4f7f\u7528\u7684\u65f6\u5019\u5c06 char* \u8f6c\u6362\u4e3a string \u3002\u8f6c\u6362\u7684\u65b9\u6cd5\u662f\u4f7f\u7528 string \u7684 assign \u51fd\u6570\u3002 string.assign(char*); \u4e5f\u53ef\u4ee5\u76f4\u63a5\u7528 string \u7684\u6784\u9020\u51fd\u6570\u3002\u4e5f\u53ef\u4ee5\u6307\u5b9a\u4e00\u4e2a cmp \u51fd\u6570 map<char*,int,cmp> \u3002 <ctime> \u4e2d clock()/CLOCK_PER_SEC \u53ef\u4ee5\u67e5\u770b\u7a0b\u5e8f\u8fd0\u884c\u65f6\u95f4\u3002 strchr(char*, char) \u67e5\u627e char \u5728 char* \u4e2d\u7b2c\u4e00\u6b21\u51fa\u73b0\u7684\u4f4d\u7f6e\uff0c\u5982\u679c\u6ca1\u6709\uff0c\u8fd4\u56de NULL \u3002 strstr(char*,char*) \u540c strchr ,\u53ea\u662f\u67e5\u627e\u5bf9\u8c61\u662f\u5b57\u7b26\u4e32\u3002 isalpha() , isdigit() , isupper() , islower() \u53ef\u4ee5\u5224\u65adchar\u7684\u7c7b\u578b\u662f\u5b57\u6bcd\u3001\u6570\u5b57\u3001\u5927\u5199\u5b57\u6bcd\u3001\u5c0f\u5199\u5b57\u6bcd\u3002\u5728\u5934\u6587\u4ef6 cctype \u4e2d\u3002 toupper() , tolower() \u53ef\u7528\u4e8e char \u5927\u5c0f\u5199\u8f6c\u6362\uff0c\u5982\u679c\u53c2\u6570\u4e0d\u7b26\u5408\u8981\u6c42\u5219\u8fd4\u56de\u539f\u503c\u3002 fgets(s, sizeof(s), stdin) \u7b49\u4ef7\u4e8e gets(s) \u7b49\u4ef7\u4e8e cin.getline(s, s_size); \u8fd8\u53ef\u4ee5\u5bf9\u8f93\u5165\u8bbe\u7f6e\u622a\u6b62\u5b57\u7b26, cin.getline(s, s_size, \u2018\\n\u2019); \u5728\u4f7f\u7528 printf \u65f6\uff0c % \u540e\u9762\u8ddf - \u53f7\u8868\u793a\u5de6\u5bf9\u9f50\uff0c\u5426\u5219\u53f3\u5bf9\u9f50\u3002 % \u540e\u8ddf0\u8868\u793a\u75280\u8865\u9f50\uff0c\u5426\u5219\u8868\u793a\u7528\u7a7a\u683c\u8865\u9f50\uff0c % \u540e\u8ddf\u6570\u5b57\u8868\u793a\u5bf9\u9f50\u5bbd\u5ea6\u3002\u4f8b\u5982\uff1a %-05s \uff0c\u8868\u793a\u5bbd\u5ea6\u4e3a5\u53f3\u5bf9\u9f50\u8f93\u51fa s \uff0c\u5de6\u9762\u7a7a\u4f59\u533a\u57df\u75280\u8865\u9f50\u3002 \u96c6\u5750\u6807\u6392\u5e8f\u6700\u597d\u7528 atan2 \uff0c\u6ce8\u610f atan2(y,x) \u7684\u4f7f\u7528\u65b9\u6cd5\uff0c y \u5728\u524d\uff0c x \u5728\u540e\u3002\u8fd4\u56deX\u8f74\u6b63\u65b9\u5411\u5230\u539f\u70b9\u5230\uff08x\uff0cy\uff09\u70b9\u7684\u5c04\u7ebf\u7684\u5230\u89d2\u3002 \u6ce8\u610f vector \u7528\u6cd5\uff0c erase \u51fd\u6570\u8fd4\u56de\u7684\u662f\u5220\u9664\u540e\u7684\u4e0b\u4e00\u4e2a\u5143\u7d20\u7684\u6307\u9488\u3002\u8fed\u4ee3\u5668\u7684\u5199\u6cd5\u662f\uff1a vector< >::iterator i; \u3002\u6216\u8005 typeof(v.begin()) i \u3002 priority_queue \u5982\u679c\u60f3\u540c\u65f6\u5efa\u7acb\u5c0f\u6839\u5806\u548c\u5927\u6839\u5806\u9700\u8981\u8fd9\u6837\u5199 priority_queue<Elem, vector<Elem> , greater<Elem> > pq3; //\u5c0f\u6839 , priority_queue<Elem, vector<Elem> , less<Elem> > pq2;//\u5927\u6839 \u3002\u5e76\u91cd\u8f7d\u5927\u4e8e\u548c\u5c0f\u4e8e\u53f7\u3002\u3002 search(f, f+n, g, g+m); \u5728 f \u4e2d\u67e5\u627e g \uff0c\u8fd4\u56de\u7b2c\u4e00\u4e2a\u4e0e g \u5b8c\u5168\u5339\u914d\u7684\u8d77\u59cb\u4f4d\u7f6e\uff0c\u82e5\u65e0\u6cd5\u5339\u914d\u5219\u8fd4\u56de f+m \u3002 copy(f,f+n,g); \u5c06f\u4e2d\u7684 n \u4e2a\u5143\u7d20\u62f7\u8d1d\u5230 g \u4e2d\u3002 \u4f7f\u7528 map ,\u9996\u5148 #include <map> \uff0c\u7136\u540e\u58f0\u660e map<A\uff0cB> \uff0c map \u53ef\u4ee5\u5f53 B \u7c7b\u578b\u6570\u7ec4\u7528\uff0c\u4e0b\u6807\u4e3a A \u7c7b\u578b\u3002\u6210\u5458\u51fd\u6570 find() \u53ef\u4ee5\u67e5\u627e\u6570\u7ec4\u4e0b\u6807\u662f\u5426\u5b58\u5728\uff0c\u5982\u679c\u6ca1\u627e\u5230\u8fd4\u56de\u503c\u4e3a\u6210\u5458\u51fd\u6570 .end() \u7684\u503c\u3002\u627e\u5230\u4e86\u8fd4\u56de\u4e0b\u6807\u3002 scanf \u7684\u7528\u6cd5\uff0c %*[ ] ,\u8868\u793a\u8d8a\u8fc7 [ ] \u4e2d\u7684\u5b57\u7b26\uff0c %[a-z] \u8868\u793a\u8bfb\u5165\u5b57\u7b26\u4e32\uff0c\u76f4\u5230\u9047\u5230\u4e0d\u662f a-z \u4e2d\u7684\u5b57\u7b26\u4e3a\u6b62\uff0c\u4e5f\u53ef\u4ee5\u5728\u4e2d\u62ec\u53f7\u91cc\u8f93\u5165\u591a\u4e2a\u5b57\u7b26\u7528\u9017\u53f7\u9694\u5f00\u3002 %[^a] \u8868\u793a\u8bfb\u5165\u5b57\u7b26\u4e32\u76f4\u5230\u9047\u5230\u5b57\u7b26 a \u4e3a\u6b62\uff0c\u4f46 a \u5e76\u6ca1\u6709\u88ab\u8bfb\u5165\u3002 multiset \u662f\u4e00\u4e2a\u53ef\u5b58\u50a8\u91cd\u590d\u5143\u7d20\u7684 set \u3002\u67e5\u627e\u67d0\u5143\u7d20\u7684\u6307\u9488\u53ef\u4ee5\u7528 a.lower_bound(target) \u3002\u63d2\u5165\u7528 insert \uff0c\u5220\u9664\u7528 erase \uff0c\u4e24\u8005\u6548\u7387\u90fd\u662flogN\u3002\u53ef\u4ee5\u7528\u4e8e\u89e3\u51b3\u4e0d\u65ad\u4fee\u6539\u4e00\u4e2a\u96c6\u5408\u5185\u5143\u7d20\u7684\u5185\u5bb9\u8fd8\u4e0d\u65ad\u8be2\u95ee\u6700\u5927\u6700\u5c0f\u503c\u7684\u95ee\u9898\u3002 deque \u662f\u4e00\u4e2a\u53cc\u5411\u961f\u5217\u4e5f\u53ef\u4ee5\u6c42\u89e3\u79fb\u52a8\u7a97\u53e3\u95ee\u9898\u3002 stringstream \u53ef\u4ee5\u5c06\u5b57\u7b26\u4e32\u4f5c\u4e3a\u8f93\u5165\u6d41\uff0c\u4ece\u4e2d\u8bfb\u5165\u5185\u5bb9\u3002\u7528 stringstream sin(inputstring); \u4e4b\u540e\u8bfb\u5165\u65b9\u6cd5\u4e0e cin \u4e00\u6837\u3002\u9700\u8981\u5305\u542b sstream \u5934\u6587\u4ef6\u3002 char* \u8f6c\u5316\u6210string\u53ef\u4ee5\u76f4\u63a5\u7528\u7b49\u53f7\u8d4b\u503c\u3002 \u5927\u6570\u7ec4\u4e0d\u80fd\u5f00\u5728\u51fd\u6570\u4e2d\uff0c\u8981\u4f7f\u7528\u5168\u5c40\u53d8\u91cf \u5168\u5c40\u53d8\u91cf\u4e0e\u5c40\u90e8\u53d8\u91cf\u4ee5\u53ca\u7ed3\u6784\u4f53\u4e2d\u7684\u53d8\u91cf\u6700\u597d\u4e0d\u8981\u4f7f\u7528\u76f8\u540c\u7684\u540d\u5b57\uff0c\u5426\u5219\u5f53\u540d\u5b57\u6307\u4ee3\u9519\u8bef\u5f15\u8d77bug\u65f6\uff0c\u5f88\u96be\u53d1\u73b0\u9519\u8bef\u3002","title":"C++ Grammar"},{"location":"competitive_programming/cpp/#c-grammar","text":"\u8c03\u8bd5\u7684\u65f6\u5019 #define D(x) x \u4e0d\u8c03\u8bd5\u7684\u65f6\u5019 #define D(x) \uff0c\u628a\u8c03\u8bd5\u7684\u8f93\u51fa\u5199\u6210 D(printf(\u201c%d\\n\u201d, a)); \u3002 long long = int * int \u7684\u65f6\u5019\u4e00\u4e2a int \u8981\u5f3a\u5236\u8f6c\u6362\u4e3a long long \u3002 c\u8bed\u8a00\u4e2d struct \u4e0d\u80fd\u6709\u6784\u9020\u51fd\u6570\uff0c\u5f00\u6570\u7ec4\u4e0d\u80fd\u4f7f\u7528 const \u7684\u503c\u4f5c\u4e3a\u5927\u5c0f\uff0c\u800c\u8981\u7528 define . \u4ee3\u66ff vector \u7684\u5efa\u56fe\u65b9\u6cd5\uff0c\u6570\u7ec4\u6a21\u62df\u94fe\u8868\u6cd5\uff0c map[i] \u5b58\u7b2c i \u4e2a\u70b9\u7684\u7b2c\u4e00\u6761\u8fb9\u5728 e \u4e2d\u7684\u4e0b\u6807\u3002 e \u7528\u6765\u5b58\u8fb9\uff0c next \u8bb0\u5f55\u8be5\u70b9\u7684\u4e0b\u4e00\u6761\u8fb9\u7684\u5750\u6807\u3002 \u4f7f\u7528 vector \u7684\u6548\u7387\u6781\u4f4e\u3002 \u7528c\u8bed\u8a00\u5199\u7684\uff0c memset \u4e0d\u7528\u5305\u542b\u5934\u6587\u4ef6 \u56db\u820d\u4e94\u5165\u7684\u65b9\u6cd5\u662f (int)(x + 0.5) cmath \u4e2d\u7684 exp(x) \u51fd\u6570\u662f\u7528\u6765\u6c42e\u7684 x \u6b21\u5e42\u3002 \u5bf9\u4e8e double \u7c7b\u578b scanf \u65f6\u8981\u7528 %lf \uff0c printf \u65f6\u8981\u7528 %f \u3002 next_permutation(f, f+n); \u662f\u5c06f\u770b\u505a\u4e00\u4e2a\u6392\u5217\uff0c\u5e76\u6c42\u5176\u4e0b\u4e00\u4e2a\u6392\u5217\uff0c\u6240\u6709\u6c42\u5f97\u7684\u6392\u5217\u662f\u4e0d\u91cd\u590d\u7684\uff0c\u9700\u8981a lgorithm \u5934\u6587\u4ef6\u3002\u5728\u9047\u5230\u6700\u540e\u4e00\u4e2a\u6392\u5217\u540e\u4f1a\u8fd4\u56de false \uff0c\u5e76\u8df3\u8f6c\u5230\u7b2c\u4e00\u79cd\u6392\u5217\uff0c\u5426\u5219\u4f1a\u8fd4\u56de true . putchar() , getchar() \u6bd4 scanf() , printf() \u5feb\u3002 strtok(char *st1, char *st2) \u7528 st2 \u5206\u5272 st1 \uff0c\u635f\u574f\u539f\u4e32\uff0c\u8fd4\u56de\u5206\u5272\u540e\u7684\u7b2c\u4e00\u4e2a\u4e32\u7684\u6307\u9488\uff0c\u60f3\u83b7\u5f97\u88ab\u5206\u5272\u7684\u7b2c\u4e8c\u4e2a\u4e32\u5219\u9700\u8981\u8c03\u7528\u7b2c\u4e8c\u6b21\uff0c\u5e76\u4e14\u7b2c\u4e00\u4e2a\u53c2\u6570\u7ed9 NULL unget(ch, stdin); \u53ef\u4ee5\u628a\u8bfb\u5230\u7684\u5b57\u7b26ch\u653e\u56de\u5230\u8f93\u5165\u6587\u4ef6\u4e2d\u53bb\u3002\u76f8\u5f53\u4e8e getchar() \u7684\u9006\u7a0b\u3002 reverse(f, f+n) \u53ef\u4ee5\u53cd\u8f6cf\u6570\u7ec4\u7684\u524dn\u4f4d\uff0c\u8fd9\u4e2a\u51fd\u6570\u8981\u5305\u542b algorithm \u3002 string::find(char *, pos); \u8fd8\u8981\u6ce8\u610freplace\u7684\u7528\u6cd5 string::replace(pos, length, char*); map \u5e38\u7528\u4e8e\u67e5\u627e\u67d0\u5143\u7d20\u5728\u6570\u7ec4\u4e2d\u7684\u4f4d\u7f6e\u3002 \u6c42\u548c\u51fd\u6570 accumulate \u9700\u8981\u5305\u542b\u5934\u6587\u4ef6 numeric \uff0c\u4f7f\u7528\u65b9\u6cd5\u4e3a sum = accumulate(f, f + n, 0); \u6c42\u6700\u5927\u503c\u51fd\u6570 max_element \u8fd4\u56de\u6700\u5927\u503c\u6307\u9488\uff0c\u9700\u8981\u5305\u542b\u5934\u6587\u4ef6 algorithm \uff0c\u4f7f\u7528\u65b9\u6cd5\u4e3a max_value=*max_element(f, f+n); \u7528 sort \u6392\u5e8f\u91cd\u8f7d < \u7684\u65f6\u5019\u8981\u6ce8\u610f\u7b49\u4e8e\u7684\u60c5\u51b5\u4e5f\u8981\u8fd4\u56de false \u3002 map\u5982\u679c\u8981\u4f7f\u7528 char* \u4f5c\u4e3a key \uff0c\u4e0d\u80fd\u7b80\u5355\u7684\u76f4\u63a5\u4f7f\u7528\uff0c\u53ef\u4ee5\u7528 string \u4f5c\u4e3a map \u7684 key \uff0c\u4f7f\u7528\u7684\u65f6\u5019\u5c06 char* \u8f6c\u6362\u4e3a string \u3002\u8f6c\u6362\u7684\u65b9\u6cd5\u662f\u4f7f\u7528 string \u7684 assign \u51fd\u6570\u3002 string.assign(char*); \u4e5f\u53ef\u4ee5\u76f4\u63a5\u7528 string \u7684\u6784\u9020\u51fd\u6570\u3002\u4e5f\u53ef\u4ee5\u6307\u5b9a\u4e00\u4e2a cmp \u51fd\u6570 map<char*,int,cmp> \u3002 <ctime> \u4e2d clock()/CLOCK_PER_SEC \u53ef\u4ee5\u67e5\u770b\u7a0b\u5e8f\u8fd0\u884c\u65f6\u95f4\u3002 strchr(char*, char) \u67e5\u627e char \u5728 char* \u4e2d\u7b2c\u4e00\u6b21\u51fa\u73b0\u7684\u4f4d\u7f6e\uff0c\u5982\u679c\u6ca1\u6709\uff0c\u8fd4\u56de NULL \u3002 strstr(char*,char*) \u540c strchr ,\u53ea\u662f\u67e5\u627e\u5bf9\u8c61\u662f\u5b57\u7b26\u4e32\u3002 isalpha() , isdigit() , isupper() , islower() \u53ef\u4ee5\u5224\u65adchar\u7684\u7c7b\u578b\u662f\u5b57\u6bcd\u3001\u6570\u5b57\u3001\u5927\u5199\u5b57\u6bcd\u3001\u5c0f\u5199\u5b57\u6bcd\u3002\u5728\u5934\u6587\u4ef6 cctype \u4e2d\u3002 toupper() , tolower() \u53ef\u7528\u4e8e char \u5927\u5c0f\u5199\u8f6c\u6362\uff0c\u5982\u679c\u53c2\u6570\u4e0d\u7b26\u5408\u8981\u6c42\u5219\u8fd4\u56de\u539f\u503c\u3002 fgets(s, sizeof(s), stdin) \u7b49\u4ef7\u4e8e gets(s) \u7b49\u4ef7\u4e8e cin.getline(s, s_size); \u8fd8\u53ef\u4ee5\u5bf9\u8f93\u5165\u8bbe\u7f6e\u622a\u6b62\u5b57\u7b26, cin.getline(s, s_size, \u2018\\n\u2019); \u5728\u4f7f\u7528 printf \u65f6\uff0c % \u540e\u9762\u8ddf - \u53f7\u8868\u793a\u5de6\u5bf9\u9f50\uff0c\u5426\u5219\u53f3\u5bf9\u9f50\u3002 % \u540e\u8ddf0\u8868\u793a\u75280\u8865\u9f50\uff0c\u5426\u5219\u8868\u793a\u7528\u7a7a\u683c\u8865\u9f50\uff0c % \u540e\u8ddf\u6570\u5b57\u8868\u793a\u5bf9\u9f50\u5bbd\u5ea6\u3002\u4f8b\u5982\uff1a %-05s \uff0c\u8868\u793a\u5bbd\u5ea6\u4e3a5\u53f3\u5bf9\u9f50\u8f93\u51fa s \uff0c\u5de6\u9762\u7a7a\u4f59\u533a\u57df\u75280\u8865\u9f50\u3002 \u96c6\u5750\u6807\u6392\u5e8f\u6700\u597d\u7528 atan2 \uff0c\u6ce8\u610f atan2(y,x) \u7684\u4f7f\u7528\u65b9\u6cd5\uff0c y \u5728\u524d\uff0c x \u5728\u540e\u3002\u8fd4\u56deX\u8f74\u6b63\u65b9\u5411\u5230\u539f\u70b9\u5230\uff08x\uff0cy\uff09\u70b9\u7684\u5c04\u7ebf\u7684\u5230\u89d2\u3002 \u6ce8\u610f vector \u7528\u6cd5\uff0c erase \u51fd\u6570\u8fd4\u56de\u7684\u662f\u5220\u9664\u540e\u7684\u4e0b\u4e00\u4e2a\u5143\u7d20\u7684\u6307\u9488\u3002\u8fed\u4ee3\u5668\u7684\u5199\u6cd5\u662f\uff1a vector< >::iterator i; \u3002\u6216\u8005 typeof(v.begin()) i \u3002 priority_queue \u5982\u679c\u60f3\u540c\u65f6\u5efa\u7acb\u5c0f\u6839\u5806\u548c\u5927\u6839\u5806\u9700\u8981\u8fd9\u6837\u5199 priority_queue<Elem, vector<Elem> , greater<Elem> > pq3; //\u5c0f\u6839 , priority_queue<Elem, vector<Elem> , less<Elem> > pq2;//\u5927\u6839 \u3002\u5e76\u91cd\u8f7d\u5927\u4e8e\u548c\u5c0f\u4e8e\u53f7\u3002\u3002 search(f, f+n, g, g+m); \u5728 f \u4e2d\u67e5\u627e g \uff0c\u8fd4\u56de\u7b2c\u4e00\u4e2a\u4e0e g \u5b8c\u5168\u5339\u914d\u7684\u8d77\u59cb\u4f4d\u7f6e\uff0c\u82e5\u65e0\u6cd5\u5339\u914d\u5219\u8fd4\u56de f+m \u3002 copy(f,f+n,g); \u5c06f\u4e2d\u7684 n \u4e2a\u5143\u7d20\u62f7\u8d1d\u5230 g \u4e2d\u3002 \u4f7f\u7528 map ,\u9996\u5148 #include <map> \uff0c\u7136\u540e\u58f0\u660e map<A\uff0cB> \uff0c map \u53ef\u4ee5\u5f53 B \u7c7b\u578b\u6570\u7ec4\u7528\uff0c\u4e0b\u6807\u4e3a A \u7c7b\u578b\u3002\u6210\u5458\u51fd\u6570 find() \u53ef\u4ee5\u67e5\u627e\u6570\u7ec4\u4e0b\u6807\u662f\u5426\u5b58\u5728\uff0c\u5982\u679c\u6ca1\u627e\u5230\u8fd4\u56de\u503c\u4e3a\u6210\u5458\u51fd\u6570 .end() \u7684\u503c\u3002\u627e\u5230\u4e86\u8fd4\u56de\u4e0b\u6807\u3002 scanf \u7684\u7528\u6cd5\uff0c %*[ ] ,\u8868\u793a\u8d8a\u8fc7 [ ] \u4e2d\u7684\u5b57\u7b26\uff0c %[a-z] \u8868\u793a\u8bfb\u5165\u5b57\u7b26\u4e32\uff0c\u76f4\u5230\u9047\u5230\u4e0d\u662f a-z \u4e2d\u7684\u5b57\u7b26\u4e3a\u6b62\uff0c\u4e5f\u53ef\u4ee5\u5728\u4e2d\u62ec\u53f7\u91cc\u8f93\u5165\u591a\u4e2a\u5b57\u7b26\u7528\u9017\u53f7\u9694\u5f00\u3002 %[^a] \u8868\u793a\u8bfb\u5165\u5b57\u7b26\u4e32\u76f4\u5230\u9047\u5230\u5b57\u7b26 a \u4e3a\u6b62\uff0c\u4f46 a \u5e76\u6ca1\u6709\u88ab\u8bfb\u5165\u3002 multiset \u662f\u4e00\u4e2a\u53ef\u5b58\u50a8\u91cd\u590d\u5143\u7d20\u7684 set \u3002\u67e5\u627e\u67d0\u5143\u7d20\u7684\u6307\u9488\u53ef\u4ee5\u7528 a.lower_bound(target) \u3002\u63d2\u5165\u7528 insert \uff0c\u5220\u9664\u7528 erase \uff0c\u4e24\u8005\u6548\u7387\u90fd\u662flogN\u3002\u53ef\u4ee5\u7528\u4e8e\u89e3\u51b3\u4e0d\u65ad\u4fee\u6539\u4e00\u4e2a\u96c6\u5408\u5185\u5143\u7d20\u7684\u5185\u5bb9\u8fd8\u4e0d\u65ad\u8be2\u95ee\u6700\u5927\u6700\u5c0f\u503c\u7684\u95ee\u9898\u3002 deque \u662f\u4e00\u4e2a\u53cc\u5411\u961f\u5217\u4e5f\u53ef\u4ee5\u6c42\u89e3\u79fb\u52a8\u7a97\u53e3\u95ee\u9898\u3002 stringstream \u53ef\u4ee5\u5c06\u5b57\u7b26\u4e32\u4f5c\u4e3a\u8f93\u5165\u6d41\uff0c\u4ece\u4e2d\u8bfb\u5165\u5185\u5bb9\u3002\u7528 stringstream sin(inputstring); \u4e4b\u540e\u8bfb\u5165\u65b9\u6cd5\u4e0e cin \u4e00\u6837\u3002\u9700\u8981\u5305\u542b sstream \u5934\u6587\u4ef6\u3002 char* \u8f6c\u5316\u6210string\u53ef\u4ee5\u76f4\u63a5\u7528\u7b49\u53f7\u8d4b\u503c\u3002 \u5927\u6570\u7ec4\u4e0d\u80fd\u5f00\u5728\u51fd\u6570\u4e2d\uff0c\u8981\u4f7f\u7528\u5168\u5c40\u53d8\u91cf \u5168\u5c40\u53d8\u91cf\u4e0e\u5c40\u90e8\u53d8\u91cf\u4ee5\u53ca\u7ed3\u6784\u4f53\u4e2d\u7684\u53d8\u91cf\u6700\u597d\u4e0d\u8981\u4f7f\u7528\u76f8\u540c\u7684\u540d\u5b57\uff0c\u5426\u5219\u5f53\u540d\u5b57\u6307\u4ee3\u9519\u8bef\u5f15\u8d77bug\u65f6\uff0c\u5f88\u96be\u53d1\u73b0\u9519\u8bef\u3002","title":"C++ Grammar"},{"location":"competitive_programming/data_structures/","text":"Data Structures \u540e\u7f00\u6570\u7ec4 \u6784\u9020\u540e\u7f00\u6570\u7ec4\u6709\u4e24\u79cd\u7b97\u6cd5\uff0cdc3\u548c\u500d\u589e\uff0c\u6548\u7387\u5206\u522b\u4e3aO(n)\u548cO(nlogn)\uff0c\u4f46\u524d\u8005\u7684\u5b9e\u73b0\u8f83\u56f0\u96be\u3002\u540e\u7f00\u6570\u7ec4\u6784\u9020\u540e\u83b7\u5f97\u4e863\u4e2a\u6570\u7ec4\uff0csa[i]\u8868\u793a\u6240\u6709\u540e\u7f00\u6392\u5e8f\u540e\u7684\u6392\u5728\u7b2ci\u4f4d\u7684\u540e\u7f00\uff0crank[i]\u8868\u793a\u539f\u4e32\u4ece\u7b2ci\u4f4d\u5230\u7ed3\u5c3e\u7684\u90a3\u4e2a\u540e\u7f00\u5728sa\u4e2d\u7684\u6392\u540d\u662f\u591a\u5c11\u3002height[i]\u8868\u793asa[i]\u548csa[i + 1]\u6240\u8868\u793a\u7684\u5b57\u7b26\u4e32\u7684\u6700\u957f\u516c\u5171\u524d\u7f00\u7684\u957f\u5ea6\u3002 \u540e\u7f00\u6570\u7ec4\u7684\u6240\u6709\u540e\u7f00\u4e2d\u5305\u62ec\u7a7a\u4e32\uff0c\u56e0\u6b64\u6709strlen(s)+1\u4e2a\u540e\u7f00\u3002 \u6811\u72b6\u6570\u7ec4 \u6811\u72b6\u6570\u7ec4\u662f\u4e00\u79cd\u53ef\u4ee5\u4ee5logN\u7684\u6548\u7387\u8be2\u95ee\u6570\u7ec4\u524dx\u9879\u548c\u4fee\u6539\u6570\u7ec4\u5143\u7d20\u7684\u4e00\u79cd\u6570\u636e\u7ed3\u6784\u3002\u5176\u539f\u7406\u662f\u5728\u539f\u6570\u7ec4\u4e4b\u5916\u518d\u5efa\u7acb\u4e00\u4e2a\u6570\u7ec4\uff0c\u8fd9\u4e2a\u6570\u7ec4\u7684\u6bcf\u4e00\u4f4d\u5b58\u50a8\u7684\u662f\u524d\u9762\u67d0\u4e9b\u9879\u7684\u548c\uff0c\u5177\u4f53\u662f\u54ea\u4e9b\u9879\u5462\uff1f\u4f8b\u5982\uff1a\u73b0\u5728\u6211\u4eec\u6c42\u524dx\u9879\u7684\u548c\uff0c\u90a3\u4e48\u5c31\u8981\u627e\u5230\u6700\u5927\u7684a\u4f7f\u5f97x%\uff082^a\uff09=0\u3002\u90a3\u4e48\u6211\u4eec\u5c31\u5b58\u50a8\u539f\u6570\u7ec4\u4e2d\u4ecex-2^a+1 ~ x\u8fd9\u4e9b\u4f4d\u7684\u548c\u3002\u7136\u800c\u5728\u8fd9\u4e2a\u65b0\u5efa\u7684\u6570\u7ec4\u4e2d\u8fd9\u4e9b\u4f4d\u7684\u548c\u53ef\u4ee5\u66f4\u5bb9\u6613\u7684\u8868\u793a\uff0c\u56e0\u4e3a\u8be5\u5757\u53ef\u4ee5\u88ab\u8fdb\u4e00\u6b65\u7684\u62c6\u5206\u6210\u4e00\u4e9b\u5728\u65b0\u5efa\u6570\u7ec4\u4e2d\u5df2\u7ecf\u6c42\u8fc7\u548c\u7684\u5757\u3002\u5177\u4f53\u5b9e\u73b0\u7528lowbit\u7684\u65b9\u6cd5\u3002 \u5177\u4f53\u6c42a\u7684\u65b9\u6cd5\u5176\u5b9e\u5c31\u662flowbit\u561b\u3002 \u6811\u72b6\u6570\u7ec4\u5e38\u4e0e\u4e8c\u5206\u67e5\u627e\u5171\u540c\u4f7f\u7528\uff0c\u7528\u6765\u67e5\u627e\u5bf9\u4e8e\u4e00\u4e2a\u6570\u5b57k\uff0c\u6c42\u524d\u591a\u5c11\u4f4d\u6070\u597d\u548c\u4e3ak\u3002 \u6811\u72b6\u7ed3\u6784\u9891\u7e41\u5f00\u8f9f\u6307\u9488\u7a7a\u95f4\u6d6a\u8d39\u65f6\u95f4\uff0c\u53ef\u4ee5\u76f4\u63a5\u5f00\u8f9f\u8282\u70b9\u6570\u7ec4\uff0c\u5e76\u8ba9\u6307\u9488\u6307\u5411\u6570\u7ec4\u4e2d\u7684\u672a\u4f7f\u7528\u4f4d\u3002 \u7ebf\u6bb5\u6811 \u7ebf\u6bb5\u6811\u7684\u57fa\u672c\u601d\u60f3\uff0c\u65e0\u8bba\u662f\u66f4\u65b0\u8fd8\u662f\u67e5\u8be2\u90fd\u8981\u9075\u5faa\u4e00\u4e2a\u539f\u5219\uff0c\u5f53\u7ebf\u6bb5\u6070\u597d\u8986\u76d6\u4e00\u4e2a\u8282\u70b9\u7684\u533a\u95f4\u65f6\u5c31\u76f4\u63a5\u5bf9\u8be5\u8282\u64cd\u4f5c\u800c\u4e0d\u518d\u5411\u4e0b\u64cd\u4f5c\u3002\u7edd\u5bf9\u4e0d\u80fd\u628a\u533a\u95f4\u5185\u6240\u6709\u8282\u70b9\u5168\u90e8\u4e00\u4ee3\u5230\u5e95\uff0c\u5230\u53f6\u5b50\u8282\u70b9\u3002 \u73b0\u5728\u9047\u5230\u7684\u7ebf\u6bb5\u6811\u5171\u6709\u5982\u4e0b\u51e0\u79cd\uff1a 1.\u63d2\u5165\u70b9\u578b \u5bf9\u4e8e\u8fd9\u79cd\u7ebf\u6bb5\u6811\uff0c\u901a\u5e38\u662f\u5411\u7ebf\u6bb5\u6811\u4e2d\u63d2\u5165\u70b9\uff0c\u5373\u5bf9\u5e94\u4e00\u4e2a\u53f6\u5b50\u8282\u70b9\u7684\u4fe1\u606f\uff0c\u800c\u7ebf\u6bb5\u6811\u4e2d\u6240\u6709\u8282\u70b9\u4e5f\u90fd\u662f\u8bb0\u5f55\u7684\u5173\u4e8e\u4ee5\u8be5\u70b9\u4e3a\u6839\u7684\u5b50\u6811\u4e2d\u5df2\u63d2\u5165\u7684\u70b9\u7684\u7edf\u8ba1\u4fe1\u606f\uff0c\u8be2\u95ee\u901a\u5e38\u662f\u95ee\u7ebf\u6bb5\u6811\u4e2d\u67d0\u4e2a\u533a\u95f4\u5bf9\u53f6\u5b50\u8282\u70b9\u7684\u7edf\u8ba1\u4fe1\u606f\u3002 2.\u7ebf\u8986\u76d6\u578b \u5bf9\u4e8e\u8fd9\u79cd\u7ebf\u6bb5\u6811\uff0c\u4e0e\u7b2c\u4e09\u79cd\u6709\u4ee5\u4e0b\u5171\u540c\u7279\u70b9\uff1a\u6240\u6709\u8be2\u95ee\u548c\u63d2\u5165\u64cd\u4f5c\u90fd\u662f\u4ee5\u533a\u95f4\u4e3a\u5355\u4f4d\u7684\uff0c\u6bcf\u6b21\u90fd\u662f\u5bf9\u4e00\u4e2a\u533a\u95f4\u8fdb\u884c\u64cd\u4f5c\u3002\u6bcf\u4e2a\u8282\u70b9\u901a\u5e38\u4f1a\u7528\u4e00\u4e2a\u53d8\u91cf\u6765\u8bb0\u5f55\u4ee5\u5b83\u4e3a\u8ddf\u7684\u5b50\u6811\u7684\u76f8\u5173\u4fe1\u606f\uff0c\u5728\u56de\u6eaf\u8fc7\u7a0b\u4e2d\u66f4\u65b0\u6b64\u53d8\u91cf\u3002\u5f53\u64cd\u4f5c\u7684\u533a\u95f4\u80fd\u5b8c\u6574\u7684\u8986\u76d6\u4e00\u4e2a\u8282\u70b9\u5bf9\u5e94\u7684\u533a\u95f4\u65f6\u76f4\u63a5\u5bf9\u8be5\u8282\u70b9\u64cd\u4f5c\uff0c\u4e0d\u518d\u5411\u4e0b\u64cd\u4f5c\u3002 \u8fd9\u79cd\u7ebf\u6bb5\u6811\u8fd8\u6709\u5176\u72ec\u6709\u7684\u7279\u70b9\uff1a\u5f53\u64cd\u4f5c\u4e00\u4e2a\u77ed\u7ebf\u6bb5\u65f6\uff0c\u8fd9\u4e2a\u77ed\u7ebf\u6bb5\u5728\u7ebf\u6bb5\u6811\u4e2d\u7531\u4e0a\u81f3\u4e0b\u8fd0\u884c\u5230\u81ea\u5df1\u5bf9\u5e94\u7684\u4f4d\u7f6e\uff0c\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d\u4f1a\u7ecf\u8fc7\u82e5\u5e72\u4e2a\u5bf9\u5e94\u957f\u7ebf\u6bb5\u7684\u8282\u70b9\uff0c\u5728\u7ecf\u8fc7\u957f\u7ebf\u6bb5\u65f6\uff0c\u8981\u628a\u957f\u7ebf\u6bb5\u7684\u8282\u70b9\u4e2d\u7684\u4fe1\u606f\u79fb\u52a8\u5230\u5176\u4e24\u4e2a\u76f4\u63a5\u5b50\u8282\u70b9\u4e2d\uff0c\u7136\u540e\u518d\u7ee7\u7eed\u5411\u4e0b\u8d70\u3002\u8fd9\u6837\u53ef\u4ee5\u4fdd\u8bc1\u533a\u95f4\u4fe1\u606f\u5b58\u50a8\u4f4d\u7f6e\u7684\u5728\u6811\u4e2d\u7684\u7eb5\u5411\u4e13\u4e00\u6027\uff0c\u5373\u6811\u4e2d\u8282\u70b9\u7684\u76f4\u7cfb\u8840\u4eb2\u4e4b\u95f4\u53ea\u80fd\u6709\u4e00\u4e2a\u70b9\u8bb0\u5f55\u4fe1\u606f\u3002 \u539f\u56e0\u5982\u4e0b\uff1a\u5728\u8fd9\u79cd\u7ebf\u6bb5\u6811\u7684\u9898\u901a\u5e38\u5177\u6709\u4e00\u4e0b\u6027\u8d28\uff1a(1)\u65b0\u63d2\u5165\u7ebf\u6bb5\u4e0e\u65e7\u7684\u7ebf\u6bb5\u91cd\u53e0\u7684\u90e8\u5206\u7684\u4fe1\u606f\u5982\u679c\u7eb5\u5411\u5206\u5e03\uff0c\u4e0d\u5b58\u50a8\u5728\u540c\u4e00\u4e2a\u8282\u70b9\u4e2d\uff0c\u5219\u5728\u56de\u6eaf\u7edf\u8ba1\u5b50\u6811\u4fe1\u606f\u8fc7\u7a0b\u5f88\u96be\u8ba1\u7b97\u3002(2)\u65b0\u63d2\u5165\u7684\u7ebf\u6bb5\u4e0e\u65e7\u7ebf\u6bb5\u7684\u91cd\u53e0\u90e8\u5206\u53ef\u4ee5\u53ea\u4fdd\u5b58\u65b0\u7ebf\u6bb5\u4fe1\u606f\uff0c\u8fd9\u6837\u624d\u80fd\u63d2\u5165\u8fc7\u7a0b\u4e2d\u5b8c\u6574\u8986\u76d6\u4e00\u4e2a\u8282\u70b9\u65f6\u4e0d\u7528\u5411\u4e0b\u64cd\u4f5c\u3002 3.\u7ebf\u4fdd\u7559\u578b \u8fd9\u79cd\u7ebf\u6bb5\u6811\u9664\u4e86\u4e0e\u7b2c\u4e8c\u79cd\u7ebf\u6bb5\u6811\u7684\u5171\u540c\u7279\u70b9\u5916\uff0c\u8fd8\u6709\u4e00\u4e2a\u91cd\u8981\u7279\u6027\u5c31\u662f\u5373\u4f7f\u65e7\u7ebf\u6bb5\u4e0e\u65b0\u7ebf\u6bb5\u91cd\u53e0\u4e86\u65e7\u7ebf\u6bb5\u4e2d\u7684\u4fe1\u606f\u4e5f\u4ecd\u7136\u6709\u610f\u4e49\uff0c\u6216\u8005\u8981\u6c42\u63d2\u5165\u7684\u7ebf\u6bb5\u5fc5\u987b\u4fdd\u6301\u5728\u5176\u63d2\u5165\u7684\u4f4d\u7f6e\u4e0d\u5411\u4e0b\u8fed\u4ee3\u3002 \u5176\u4e2d\u4fdd\u6301\u4f4d\u7f6e\u7684\u4e00\u79cd\u5178\u578b\u60c5\u51b5\u5c31\u662f\u6709\u5220\u9664\u64cd\u4f5c\u3002\u5220\u9664\u5e76\u4e0d\u662f\u968f\u610f\u7684\u5220\u9664\uff0c\u6bcf\u6b21\u5220\u9664\u7684\u7ebf\u6bb5\u4e0e\u539f\u6765\u63d2\u5165\u7684\u7ebf\u6bb5\u76f8\u5bf9\u5e94\uff0c\u53ea\u5220\u9664\u90a3\u4e9b\u66fe\u7ecf\u63d2\u5165\u8fc7\u7684\u7ebf\u6bb5\u3002\u8fd9\u79cd\u901a\u5e38\u6211\u4eec\u4e3a\u4e86\u5220\u9664\u65f6\u5019\u65b9\u4fbf\uff0c\u5728\u77ed\u7ebf\u6bb5\u5411\u4e0b\u8fd0\u884c\u7ecf\u8fc7\u957f\u7ebf\u6bb5\u7684\u8fc7\u7a0b\u4e2d\u4e0d\u4f1a\u628a\u957f\u7ebf\u6bb5\u5411\u4e0b\u8fed\u4ee3\uff0c\u56e0\u4e3a\u957f\u7ebf\u6bb5\u662f\u8981\u88ab\u5220\u9664\u7684\uff0c\u5982\u679c\u5411\u4e0b\u8fed\u4ee3\u5220\u9664\u65f6\u5c31\u6ca1\u6709\u529e\u6cd5\u5bf9\u957f\u7ebf\u6bb5\u539f\u6765\u7684\u5b58\u50a8\u8282\u70b9\u8fdb\u884c\u64cd\u4f5c\uff0c\u53ea\u80fd\u5bf9\u5176\u8bb8\u8bb8\u591a\u591a\u7684\u540e\u4ee3\u8282\u70b9\u4e2d\u7684\u4e00\u4e9b\uff08\u90a3\u4e9b\u88ab\u8fed\u4ee3\u5230\u4e86\u7684\u8282\u70b9\uff09\u8fdb\u884c\u64cd\u4f5c\uff0c\u590d\u6742\u5ea6\u6781\u9ad8\u3002\u8fd9\u79cd\u7ebf\u6bb5\u6811\u7684\u9898\u901a\u5e38\u4fe1\u606f\u7eb5\u5411\u5206\u5e03\u4e5f\u662f\u53ef\u4ee5\u56de\u6eaf\u8ba1\u7b97\u7684\u3002 \u6709\u65f6\u5019\u53ef\u80fd\u8fd8\u8981\u7efc\u5408\u8fd0\u7528\u7b2c2\u30013\u79cd\u7ebf\u6bb5\u6811\u3002 \u5f53\u8981\u5bf9\u4e00\u68f5\u6811\u7684\u8bb8\u591a\u5b50\u6811\u8fdb\u884c\u64cd\u4f5c\u65f6\uff0c\u53ef\u4ee5\u4f7f\u7528\u65f6\u95f4\u6233\u5bf9\u6811\u8fdb\u884c\u6807\u8bb0\uff0c\u7136\u540e\u4f7f\u7528\u7ebf\u6bb5\u6811\u5bf9\u5b50\u6811\u8fdb\u884c\u64cd\u4f5c\u3002 \u6811\u7684\u6700\u5c0f\u8868\u793a \u6811\u7684\u6700\u5c0f\u8868\u793a\u5224\u65ad\u540c\u6784\uff0c \u5b9a\u4e49S[t]\u8868\u793a\u4ee5t\u4e3a\u6839\u7684\u5b50\u6811\u7684\u62ec\u53f7\u5e8f\u5217 S[t]={\u2018(\u2018,S[c1],S[c2],\u2026,S[ck],\u2019)\u2019 (c1,c2,\u2026,ck\u4e3at\u7684k\u4e2a\u5b50\u8282\u70b9\uff0cS[c1],S[c2],\u2026,S[ck]\u8981\u6309\u7167\u5b57\u5178\u5e8f\u6392\u5217)} \u4e3a\u4e86\u4fdd\u8bc1\u540c\u6784\u7684\u6811\u7684\u62ec\u53f7\u5e8f\u5217\u8868\u793a\u5177\u6709\u552f\u4e00\u6027\uff0c\u6211\u4eec\u5fc5\u987b\u89c4\u5b9a\u5b50\u6811\u70b9\u7684\u987a\u5e8f\u3002\u6309\u7167\u5b50\u6811\u7684\u62ec\u53f7\u5e8f\u5217\u7684\u5b57\u5178\u5e8f\u5c31\u662f\u4e00\u79cd\u4e0d\u9519\u7684\u65b9\u6cd5\u3002 \u82e5\u6700\u5c0f\u8868\u793a\u76f8\u540c\uff0c\u5219\u4e24\u6811\u540c\u6784\u3002","title":"Data Structures"},{"location":"competitive_programming/data_structures/#data-structures","text":"","title":"Data Structures"},{"location":"competitive_programming/data_structures/#_1","text":"\u6784\u9020\u540e\u7f00\u6570\u7ec4\u6709\u4e24\u79cd\u7b97\u6cd5\uff0cdc3\u548c\u500d\u589e\uff0c\u6548\u7387\u5206\u522b\u4e3aO(n)\u548cO(nlogn)\uff0c\u4f46\u524d\u8005\u7684\u5b9e\u73b0\u8f83\u56f0\u96be\u3002\u540e\u7f00\u6570\u7ec4\u6784\u9020\u540e\u83b7\u5f97\u4e863\u4e2a\u6570\u7ec4\uff0csa[i]\u8868\u793a\u6240\u6709\u540e\u7f00\u6392\u5e8f\u540e\u7684\u6392\u5728\u7b2ci\u4f4d\u7684\u540e\u7f00\uff0crank[i]\u8868\u793a\u539f\u4e32\u4ece\u7b2ci\u4f4d\u5230\u7ed3\u5c3e\u7684\u90a3\u4e2a\u540e\u7f00\u5728sa\u4e2d\u7684\u6392\u540d\u662f\u591a\u5c11\u3002height[i]\u8868\u793asa[i]\u548csa[i + 1]\u6240\u8868\u793a\u7684\u5b57\u7b26\u4e32\u7684\u6700\u957f\u516c\u5171\u524d\u7f00\u7684\u957f\u5ea6\u3002 \u540e\u7f00\u6570\u7ec4\u7684\u6240\u6709\u540e\u7f00\u4e2d\u5305\u62ec\u7a7a\u4e32\uff0c\u56e0\u6b64\u6709strlen(s)+1\u4e2a\u540e\u7f00\u3002","title":"\u540e\u7f00\u6570\u7ec4"},{"location":"competitive_programming/data_structures/#_2","text":"\u6811\u72b6\u6570\u7ec4\u662f\u4e00\u79cd\u53ef\u4ee5\u4ee5logN\u7684\u6548\u7387\u8be2\u95ee\u6570\u7ec4\u524dx\u9879\u548c\u4fee\u6539\u6570\u7ec4\u5143\u7d20\u7684\u4e00\u79cd\u6570\u636e\u7ed3\u6784\u3002\u5176\u539f\u7406\u662f\u5728\u539f\u6570\u7ec4\u4e4b\u5916\u518d\u5efa\u7acb\u4e00\u4e2a\u6570\u7ec4\uff0c\u8fd9\u4e2a\u6570\u7ec4\u7684\u6bcf\u4e00\u4f4d\u5b58\u50a8\u7684\u662f\u524d\u9762\u67d0\u4e9b\u9879\u7684\u548c\uff0c\u5177\u4f53\u662f\u54ea\u4e9b\u9879\u5462\uff1f\u4f8b\u5982\uff1a\u73b0\u5728\u6211\u4eec\u6c42\u524dx\u9879\u7684\u548c\uff0c\u90a3\u4e48\u5c31\u8981\u627e\u5230\u6700\u5927\u7684a\u4f7f\u5f97x%\uff082^a\uff09=0\u3002\u90a3\u4e48\u6211\u4eec\u5c31\u5b58\u50a8\u539f\u6570\u7ec4\u4e2d\u4ecex-2^a+1 ~ x\u8fd9\u4e9b\u4f4d\u7684\u548c\u3002\u7136\u800c\u5728\u8fd9\u4e2a\u65b0\u5efa\u7684\u6570\u7ec4\u4e2d\u8fd9\u4e9b\u4f4d\u7684\u548c\u53ef\u4ee5\u66f4\u5bb9\u6613\u7684\u8868\u793a\uff0c\u56e0\u4e3a\u8be5\u5757\u53ef\u4ee5\u88ab\u8fdb\u4e00\u6b65\u7684\u62c6\u5206\u6210\u4e00\u4e9b\u5728\u65b0\u5efa\u6570\u7ec4\u4e2d\u5df2\u7ecf\u6c42\u8fc7\u548c\u7684\u5757\u3002\u5177\u4f53\u5b9e\u73b0\u7528lowbit\u7684\u65b9\u6cd5\u3002 \u5177\u4f53\u6c42a\u7684\u65b9\u6cd5\u5176\u5b9e\u5c31\u662flowbit\u561b\u3002 \u6811\u72b6\u6570\u7ec4\u5e38\u4e0e\u4e8c\u5206\u67e5\u627e\u5171\u540c\u4f7f\u7528\uff0c\u7528\u6765\u67e5\u627e\u5bf9\u4e8e\u4e00\u4e2a\u6570\u5b57k\uff0c\u6c42\u524d\u591a\u5c11\u4f4d\u6070\u597d\u548c\u4e3ak\u3002 \u6811\u72b6\u7ed3\u6784\u9891\u7e41\u5f00\u8f9f\u6307\u9488\u7a7a\u95f4\u6d6a\u8d39\u65f6\u95f4\uff0c\u53ef\u4ee5\u76f4\u63a5\u5f00\u8f9f\u8282\u70b9\u6570\u7ec4\uff0c\u5e76\u8ba9\u6307\u9488\u6307\u5411\u6570\u7ec4\u4e2d\u7684\u672a\u4f7f\u7528\u4f4d\u3002","title":"\u6811\u72b6\u6570\u7ec4"},{"location":"competitive_programming/data_structures/#_3","text":"\u7ebf\u6bb5\u6811\u7684\u57fa\u672c\u601d\u60f3\uff0c\u65e0\u8bba\u662f\u66f4\u65b0\u8fd8\u662f\u67e5\u8be2\u90fd\u8981\u9075\u5faa\u4e00\u4e2a\u539f\u5219\uff0c\u5f53\u7ebf\u6bb5\u6070\u597d\u8986\u76d6\u4e00\u4e2a\u8282\u70b9\u7684\u533a\u95f4\u65f6\u5c31\u76f4\u63a5\u5bf9\u8be5\u8282\u64cd\u4f5c\u800c\u4e0d\u518d\u5411\u4e0b\u64cd\u4f5c\u3002\u7edd\u5bf9\u4e0d\u80fd\u628a\u533a\u95f4\u5185\u6240\u6709\u8282\u70b9\u5168\u90e8\u4e00\u4ee3\u5230\u5e95\uff0c\u5230\u53f6\u5b50\u8282\u70b9\u3002 \u73b0\u5728\u9047\u5230\u7684\u7ebf\u6bb5\u6811\u5171\u6709\u5982\u4e0b\u51e0\u79cd\uff1a","title":"\u7ebf\u6bb5\u6811"},{"location":"competitive_programming/data_structures/#1","text":"\u5bf9\u4e8e\u8fd9\u79cd\u7ebf\u6bb5\u6811\uff0c\u901a\u5e38\u662f\u5411\u7ebf\u6bb5\u6811\u4e2d\u63d2\u5165\u70b9\uff0c\u5373\u5bf9\u5e94\u4e00\u4e2a\u53f6\u5b50\u8282\u70b9\u7684\u4fe1\u606f\uff0c\u800c\u7ebf\u6bb5\u6811\u4e2d\u6240\u6709\u8282\u70b9\u4e5f\u90fd\u662f\u8bb0\u5f55\u7684\u5173\u4e8e\u4ee5\u8be5\u70b9\u4e3a\u6839\u7684\u5b50\u6811\u4e2d\u5df2\u63d2\u5165\u7684\u70b9\u7684\u7edf\u8ba1\u4fe1\u606f\uff0c\u8be2\u95ee\u901a\u5e38\u662f\u95ee\u7ebf\u6bb5\u6811\u4e2d\u67d0\u4e2a\u533a\u95f4\u5bf9\u53f6\u5b50\u8282\u70b9\u7684\u7edf\u8ba1\u4fe1\u606f\u3002","title":"1.\u63d2\u5165\u70b9\u578b"},{"location":"competitive_programming/data_structures/#2","text":"\u5bf9\u4e8e\u8fd9\u79cd\u7ebf\u6bb5\u6811\uff0c\u4e0e\u7b2c\u4e09\u79cd\u6709\u4ee5\u4e0b\u5171\u540c\u7279\u70b9\uff1a\u6240\u6709\u8be2\u95ee\u548c\u63d2\u5165\u64cd\u4f5c\u90fd\u662f\u4ee5\u533a\u95f4\u4e3a\u5355\u4f4d\u7684\uff0c\u6bcf\u6b21\u90fd\u662f\u5bf9\u4e00\u4e2a\u533a\u95f4\u8fdb\u884c\u64cd\u4f5c\u3002\u6bcf\u4e2a\u8282\u70b9\u901a\u5e38\u4f1a\u7528\u4e00\u4e2a\u53d8\u91cf\u6765\u8bb0\u5f55\u4ee5\u5b83\u4e3a\u8ddf\u7684\u5b50\u6811\u7684\u76f8\u5173\u4fe1\u606f\uff0c\u5728\u56de\u6eaf\u8fc7\u7a0b\u4e2d\u66f4\u65b0\u6b64\u53d8\u91cf\u3002\u5f53\u64cd\u4f5c\u7684\u533a\u95f4\u80fd\u5b8c\u6574\u7684\u8986\u76d6\u4e00\u4e2a\u8282\u70b9\u5bf9\u5e94\u7684\u533a\u95f4\u65f6\u76f4\u63a5\u5bf9\u8be5\u8282\u70b9\u64cd\u4f5c\uff0c\u4e0d\u518d\u5411\u4e0b\u64cd\u4f5c\u3002 \u8fd9\u79cd\u7ebf\u6bb5\u6811\u8fd8\u6709\u5176\u72ec\u6709\u7684\u7279\u70b9\uff1a\u5f53\u64cd\u4f5c\u4e00\u4e2a\u77ed\u7ebf\u6bb5\u65f6\uff0c\u8fd9\u4e2a\u77ed\u7ebf\u6bb5\u5728\u7ebf\u6bb5\u6811\u4e2d\u7531\u4e0a\u81f3\u4e0b\u8fd0\u884c\u5230\u81ea\u5df1\u5bf9\u5e94\u7684\u4f4d\u7f6e\uff0c\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d\u4f1a\u7ecf\u8fc7\u82e5\u5e72\u4e2a\u5bf9\u5e94\u957f\u7ebf\u6bb5\u7684\u8282\u70b9\uff0c\u5728\u7ecf\u8fc7\u957f\u7ebf\u6bb5\u65f6\uff0c\u8981\u628a\u957f\u7ebf\u6bb5\u7684\u8282\u70b9\u4e2d\u7684\u4fe1\u606f\u79fb\u52a8\u5230\u5176\u4e24\u4e2a\u76f4\u63a5\u5b50\u8282\u70b9\u4e2d\uff0c\u7136\u540e\u518d\u7ee7\u7eed\u5411\u4e0b\u8d70\u3002\u8fd9\u6837\u53ef\u4ee5\u4fdd\u8bc1\u533a\u95f4\u4fe1\u606f\u5b58\u50a8\u4f4d\u7f6e\u7684\u5728\u6811\u4e2d\u7684\u7eb5\u5411\u4e13\u4e00\u6027\uff0c\u5373\u6811\u4e2d\u8282\u70b9\u7684\u76f4\u7cfb\u8840\u4eb2\u4e4b\u95f4\u53ea\u80fd\u6709\u4e00\u4e2a\u70b9\u8bb0\u5f55\u4fe1\u606f\u3002 \u539f\u56e0\u5982\u4e0b\uff1a\u5728\u8fd9\u79cd\u7ebf\u6bb5\u6811\u7684\u9898\u901a\u5e38\u5177\u6709\u4e00\u4e0b\u6027\u8d28\uff1a(1)\u65b0\u63d2\u5165\u7ebf\u6bb5\u4e0e\u65e7\u7684\u7ebf\u6bb5\u91cd\u53e0\u7684\u90e8\u5206\u7684\u4fe1\u606f\u5982\u679c\u7eb5\u5411\u5206\u5e03\uff0c\u4e0d\u5b58\u50a8\u5728\u540c\u4e00\u4e2a\u8282\u70b9\u4e2d\uff0c\u5219\u5728\u56de\u6eaf\u7edf\u8ba1\u5b50\u6811\u4fe1\u606f\u8fc7\u7a0b\u5f88\u96be\u8ba1\u7b97\u3002(2)\u65b0\u63d2\u5165\u7684\u7ebf\u6bb5\u4e0e\u65e7\u7ebf\u6bb5\u7684\u91cd\u53e0\u90e8\u5206\u53ef\u4ee5\u53ea\u4fdd\u5b58\u65b0\u7ebf\u6bb5\u4fe1\u606f\uff0c\u8fd9\u6837\u624d\u80fd\u63d2\u5165\u8fc7\u7a0b\u4e2d\u5b8c\u6574\u8986\u76d6\u4e00\u4e2a\u8282\u70b9\u65f6\u4e0d\u7528\u5411\u4e0b\u64cd\u4f5c\u3002","title":"2.\u7ebf\u8986\u76d6\u578b"},{"location":"competitive_programming/data_structures/#3","text":"\u8fd9\u79cd\u7ebf\u6bb5\u6811\u9664\u4e86\u4e0e\u7b2c\u4e8c\u79cd\u7ebf\u6bb5\u6811\u7684\u5171\u540c\u7279\u70b9\u5916\uff0c\u8fd8\u6709\u4e00\u4e2a\u91cd\u8981\u7279\u6027\u5c31\u662f\u5373\u4f7f\u65e7\u7ebf\u6bb5\u4e0e\u65b0\u7ebf\u6bb5\u91cd\u53e0\u4e86\u65e7\u7ebf\u6bb5\u4e2d\u7684\u4fe1\u606f\u4e5f\u4ecd\u7136\u6709\u610f\u4e49\uff0c\u6216\u8005\u8981\u6c42\u63d2\u5165\u7684\u7ebf\u6bb5\u5fc5\u987b\u4fdd\u6301\u5728\u5176\u63d2\u5165\u7684\u4f4d\u7f6e\u4e0d\u5411\u4e0b\u8fed\u4ee3\u3002 \u5176\u4e2d\u4fdd\u6301\u4f4d\u7f6e\u7684\u4e00\u79cd\u5178\u578b\u60c5\u51b5\u5c31\u662f\u6709\u5220\u9664\u64cd\u4f5c\u3002\u5220\u9664\u5e76\u4e0d\u662f\u968f\u610f\u7684\u5220\u9664\uff0c\u6bcf\u6b21\u5220\u9664\u7684\u7ebf\u6bb5\u4e0e\u539f\u6765\u63d2\u5165\u7684\u7ebf\u6bb5\u76f8\u5bf9\u5e94\uff0c\u53ea\u5220\u9664\u90a3\u4e9b\u66fe\u7ecf\u63d2\u5165\u8fc7\u7684\u7ebf\u6bb5\u3002\u8fd9\u79cd\u901a\u5e38\u6211\u4eec\u4e3a\u4e86\u5220\u9664\u65f6\u5019\u65b9\u4fbf\uff0c\u5728\u77ed\u7ebf\u6bb5\u5411\u4e0b\u8fd0\u884c\u7ecf\u8fc7\u957f\u7ebf\u6bb5\u7684\u8fc7\u7a0b\u4e2d\u4e0d\u4f1a\u628a\u957f\u7ebf\u6bb5\u5411\u4e0b\u8fed\u4ee3\uff0c\u56e0\u4e3a\u957f\u7ebf\u6bb5\u662f\u8981\u88ab\u5220\u9664\u7684\uff0c\u5982\u679c\u5411\u4e0b\u8fed\u4ee3\u5220\u9664\u65f6\u5c31\u6ca1\u6709\u529e\u6cd5\u5bf9\u957f\u7ebf\u6bb5\u539f\u6765\u7684\u5b58\u50a8\u8282\u70b9\u8fdb\u884c\u64cd\u4f5c\uff0c\u53ea\u80fd\u5bf9\u5176\u8bb8\u8bb8\u591a\u591a\u7684\u540e\u4ee3\u8282\u70b9\u4e2d\u7684\u4e00\u4e9b\uff08\u90a3\u4e9b\u88ab\u8fed\u4ee3\u5230\u4e86\u7684\u8282\u70b9\uff09\u8fdb\u884c\u64cd\u4f5c\uff0c\u590d\u6742\u5ea6\u6781\u9ad8\u3002\u8fd9\u79cd\u7ebf\u6bb5\u6811\u7684\u9898\u901a\u5e38\u4fe1\u606f\u7eb5\u5411\u5206\u5e03\u4e5f\u662f\u53ef\u4ee5\u56de\u6eaf\u8ba1\u7b97\u7684\u3002 \u6709\u65f6\u5019\u53ef\u80fd\u8fd8\u8981\u7efc\u5408\u8fd0\u7528\u7b2c2\u30013\u79cd\u7ebf\u6bb5\u6811\u3002 \u5f53\u8981\u5bf9\u4e00\u68f5\u6811\u7684\u8bb8\u591a\u5b50\u6811\u8fdb\u884c\u64cd\u4f5c\u65f6\uff0c\u53ef\u4ee5\u4f7f\u7528\u65f6\u95f4\u6233\u5bf9\u6811\u8fdb\u884c\u6807\u8bb0\uff0c\u7136\u540e\u4f7f\u7528\u7ebf\u6bb5\u6811\u5bf9\u5b50\u6811\u8fdb\u884c\u64cd\u4f5c\u3002","title":"3.\u7ebf\u4fdd\u7559\u578b"},{"location":"competitive_programming/data_structures/#_4","text":"\u6811\u7684\u6700\u5c0f\u8868\u793a\u5224\u65ad\u540c\u6784\uff0c \u5b9a\u4e49S[t]\u8868\u793a\u4ee5t\u4e3a\u6839\u7684\u5b50\u6811\u7684\u62ec\u53f7\u5e8f\u5217 S[t]={\u2018(\u2018,S[c1],S[c2],\u2026,S[ck],\u2019)\u2019 (c1,c2,\u2026,ck\u4e3at\u7684k\u4e2a\u5b50\u8282\u70b9\uff0cS[c1],S[c2],\u2026,S[ck]\u8981\u6309\u7167\u5b57\u5178\u5e8f\u6392\u5217)} \u4e3a\u4e86\u4fdd\u8bc1\u540c\u6784\u7684\u6811\u7684\u62ec\u53f7\u5e8f\u5217\u8868\u793a\u5177\u6709\u552f\u4e00\u6027\uff0c\u6211\u4eec\u5fc5\u987b\u89c4\u5b9a\u5b50\u6811\u70b9\u7684\u987a\u5e8f\u3002\u6309\u7167\u5b50\u6811\u7684\u62ec\u53f7\u5e8f\u5217\u7684\u5b57\u5178\u5e8f\u5c31\u662f\u4e00\u79cd\u4e0d\u9519\u7684\u65b9\u6cd5\u3002 \u82e5\u6700\u5c0f\u8868\u793a\u76f8\u540c\uff0c\u5219\u4e24\u6811\u540c\u6784\u3002","title":"\u6811\u7684\u6700\u5c0f\u8868\u793a"},{"location":"competitive_programming/dynamic_programming/","text":"Dynamic Programming \u6709\u4e9b\u80fd\u7528\u52a8\u6001\u89c4\u5212\u6c42\u89e3\u4f46\u662f\u8d85\u65f6\u7684\u9898\u76ee\uff0c\u53ef\u4ee5\u8003\u8651\u4e8c\u5206\u6cd5\u3002 \u5f53\u770b\u5230\u6570\u636e\u8303\u56f4\u6781\u5c0f\u7684\u65f6\u5019\u8981\u8003\u8651\u7528\u4f4d\u4e8c\u8fdb\u5236\u5b58\u50a8\u72b6\u6001\uff0c\u6216\u8005\u8003\u8651\u66b4\u529b\u6c42\u89e3\u3002 \u80cc\u5305\u95ee\u9898 \u591a\u91cd\u80cc\u5305\uff0c\u591a\u91cd\u80cc\u5305\u53ef\u4ee5\u8f6c\u5316\u4e3a\u5b8c\u5168\u80cc\u5305\u548c01\u80cc\u5305\u3002\u5982\u679c\u67d0\u4e1c\u897f\u7684\u603b\u4f53\u79ef\u5927\u4e8e\u5305\u4f53\u79ef\uff0c\u5219\u53ef\u4ee5\u5f53\u6210\u662f\u5b8c\u5168\u80cc\u5305\u3002\u5426\u5219\u6309\u7269\u54c1\u4f53\u79ef\u76841\uff0c2\uff0c4...\u500d\u5206\u522b\u8fdb\u884c01\u80cc\u5305\u3002\u8fd9\u6837\u5c31\u76f8\u5f53\u4e8e\u6784\u6210\u4e86\u6240\u6709\u7684\u53ef\u80fd\u60c5\u51b5\uff0c\u4f8b\u59825 \uff1d 4 \uff0b 1\uff0c 7 \uff1d 1 \uff0b 2 \uff0b 4\u3002\u90fd\u53ef\u4ee5\u7531\u8fd9\u4e9b\u6570\u5b57\u6784\u6210\u3002 \uff08\u4e0b\u9762\u8fd9\u79cd\u65b9\u6cd5\u4ec5\u9002\u7528\u4e8eBOOL\u578b\u7684\u80cc\u5305\uff0c\u5373weight\u548cvalue\u76f8\u7b49\u7684\u60c5\u51b5\uff09\u591a\u91cd\u80cc\u5305\uff0c\u5b66\u4e86 \u5b66\u4e86\u79cd\u5f88\u5feb\u7684\u65b0\u65b9\u6cd5\uff0c\u5c31\u662f\u6bcf\u6b21\u586bf[j]\u65f6\u76f4\u63a5\u7531f[j-weight[i]]\u63a8\u51fa\uff0c\u524d\u63d0\u662fnum[j - weight[i]] < sum[i] num\u6bcf\u586b\u4e00\u884c\u90fd\u8981\u6e05\u96f6\uff0cnum[j]\u8868\u793a\u5f53\u524d\u7269\u54c1\u586b\u5145j\u5927\u5c0f\u7684\u5305\u9700\u8981\u81f3\u5c11\u4f7f\u7528\u591a\u5c11\u4e2a \u4f46\u662f\u4f7f\u7528\u8fd9\u79cd\u65b9\u6cd5\u6709\u4e00\u4e2a\u6761\u4ef6\uff0c\u5c31\u662f\u8981\u6c42f\u6570\u7ec4\u53ea\u80fd\u662fbool\u7c7b\u578b\u3002\u5426\u5219\u4f1a\u51fa\u9519\u3002 \u5bf9\u4e8ebool\u578b\u5219\u4e0d\u4f1a\u6709\u6027\u4ef7\u6bd4\u7684\u95ee\u9898\uff0c\u53ea\u6709\u4f53\u79ef\u53ef\u8fbe\u548c\u4e0d\u53ef\u8fbe\u7684\u95ee\u9898\uff0c\u5728\u53ef\u8fbe\u524d\u63d0\u4e0b\u53ea\u8981\u5c3d\u91cf\u5c11\u7684\u4f7f\u7528\u5f53\u524d\u7269\u54c1\u5373\u53ef\uff0cvalue\u578b\u5219\u4e0d\u884c\uff0c\u53ef\u8fbe\u4e0d\u4e00\u5b9a\u5c11\u7528\u5f53\u524d\u7269\u54c1\uff0c\u56e0\u4e3a\u591a\u7528\u5f53\u524d\u7269\u54c1\u53ef\u80fd\u4f1a\u83b7\u5f97\u9ad8\u4ef7\u503c\u3002 \u4f8b\u5982\uff0c\u5982\u679c\u5f53\u524d\u7269\u54c1\u6027\u4ef7\u6bd4\u6781\u9ad8\uff0c\u90a3\u4e48\u5bf9\u4e8e\u4efb\u610f\u5927\u5c0f\u7684\u5305\u90fd\u5e94\u8be5\u5c3d\u91cf\u591a\u7684\u5f53\u524d\u7269\u54c1\u4ee5\u8ffd\u6c42\u9ad8\u4ef7\u503c\uff0c\u7528\u4e0a\u8ff0\u65b9\u6cd5\u4f1a\u4f7f\u5f97\u540e\u9762\u5305\u5bb9\u91cf\u8db3\u591f\u5927\u65f6\uff0c\u4f1a\u6709\u4e9b\u4f4d\u7f6e\uff08j=(sum[i]+1) * weight[i]\uff09\u56e0\u65e0\u6cd5\u6ee1\u8db3\u6761\u4ef6num[j - weight[i]] < sum[i]\uff08\u5373\u4e4b\u524d\u5df2\u7ecf\u628a\u5f53\u524d\u7269\u54c1\u4e70\u5b8c\uff09\uff0c\u800c\u65e0\u6cd5\u8d2d\u4e70\u5f53\u524d\u7269\u54c1\u3002 \u6811\u5f62DP \u6811\u72b6dp\uff0c\u4e00\u822c\u91c7\u7528\u5de6\u513f\u5b50\u53f3\u5144\u5f1f\u7684\u5b58\u50a8\u65b9\u5f0f\uff0c\u5229\u7528\u8bb0\u5fc6\u5316\u641c\u7d22\uff0c\u5bf9\u6811\u8fdb\u884c\u4ece\u4e0b\u5230\u4e0a\uff0c\u5bf9\u5b50\u6811\u94fe\u8fdb\u884c\u4ece\u53f3\u5230\u5de6\u7684\u586b\u5199\u3002\u4e5f\u53ef\u4ee5\u4f7f\u7528\u5b58\u50a8\u56fe\u7684\u65b9\u5f0f\u5b58\u50a8\uff0c\u7136\u540e\u4fbf\u5229\u4e00\u4e2a\u8282\u70b9\u7684\u6240\u6709\u5b50\u8282\u70b9\uff0c\u5728\u4fbf\u5229\u8fc7\u7a0b\u4e2d\u4e0d\u65ad\u79ef\u7d2f\u66f4\u65b0\u7236\u8282\u70b9\u7684\u503c\u3002 \u6982\u7387DP \u6982\u7387DP\u6c42\u671f\u671b\uff1a \u6211\u4eec\u4ee5\u524d\u5b66\u8fc7\u7684\u6c42\u671f\u671b\u7684\u65b9\u6cd5\u662f\u6bcf\u79cd\u7ed3\u679c\u51fa\u73b0\u7684\u6982\u7387\u4e58\u4ee5\u6bcf\u79cd\u7ed3\u679c\u7684\u503c\uff0c\u7136\u540e\u76f8\u52a0\u3002\u4f46\u662f\u901a\u5e38\u89e3\u51b3\u8fd9\u7c7b\u95ee\u9898\u6211\u4eec\u90fd\u8981\u5bf9\u6bcf\u4e2a\u4e2d\u95f4\u72b6\u6001\u6c42\u671f\u671b\u503c\uff0c\u6700\u7ec8\u7b97\u51fa\u603b\u7684\u671f\u671b\u3002\u8fd9\u65f6\u6211\u4eec\u5c31\u53ef\u4ee5\u628a\u6bcf\u4e2a\u72b6\u6001\u7684\u540e\u7ee7\u72b6\u6001\uff08\u5b50\u95ee\u9898\uff09\u770b\u6210\u662f\u4e00\u4e2a\u7ed3\u679c\u503c\uff0c\u800c\u4e0d\u662f\u671f\u671b\u503c\u3002 \u5982\u679c\u662f\u7b97\u671f\u671b\u901a\u5e38\u9700\u8981\u9006\u5411\u601d\u7ef4E(u)=sigma(pv * E(v)+C)\uff0c\u5176\u4e2dC\u662f\u72b6\u6001u\u548c\u72b6\u6001v\u4e4b\u95f4\u7684\u671f\u671b\u5dee\u503c\uff0cpv\u662fu\u72b6\u6001\u8f6c\u79fb\u5230v\u72b6\u6001\u7684\u6982\u7387\u3002v\u662fu\u62c6\u5206\u540e\u7684\u5b50\u95ee\u9898\u3002 \u6ce8\u610f\uff1asigma(pv)=1 \u5728\u6982\u7387dp\u4e2d\u6709\u65f6\u5019\u6211\u4eec\u8981\u6c42\u89e3\u7684f[i][j]\u53ef\u80fd\u4f1a\u540c\u65f6\u51fa\u73b0\u5728\u6211\u4eec\u5217\u51fa\u7684\u8f6c\u79fb\u65b9\u7a0b\u7684\u4e24\u4fa7\uff0c\u8fd9\u65f6\u5019\u9700\u8981\u89e3\u65b9\u7a0b\uff0c\u5c06\u5176\u7edf\u4e00\u5230\u65b9\u7a0b\u7b49\u53f7\u7684\u4e00\u8fb9\u6765\u3002 \u6982\u7387DP\u4e2d\u6c42\u6982\u7387\u901a\u5e38\u9700\u8981\u6b63\u5411\u601d\u7ef4\uff0c\u7531\u60c5\u51b5i\u51fa\u53d1\u5230\u8fbe\u60c5\u51b5v\u3002\u90a3\u4e48\u7528\u5982\u4e0b\u516c\u5f0f\u66f4\u65b0\u6240\u6709\u7684\u60c5\u51b5v\uff0cP(v)+=P(i) * P(v|i)\u3002\u6ce8\u610f\uff1a\u5bf9\u4e8e\u4e00\u4e2a\u56fa\u5b9a\u7684i\uff0c\u6240\u6709\u5230\u4e0d\u540c\u7684v\u7684\u6982\u7387\u603b\u548csigma(P(v|i))=1\u3002 \u52a8\u6001\u89c4\u5212\u4e2d\u72b6\u6001\u7ef4\u548c\u503c\u662f\u53ef\u4ee5\u76f8\u4e92\u8f6c\u5316\u7684\u3002\u72b6\u6001\u7ef4\u8fc7\u591a\uff0c\u6548\u7387\u4f4e\u7684\u65f6\u5019\uff0c\u53ef\u4ee5\u628a\u5c06\u5176\u8f6c\u5316\u4e3a\u6570\u7ec4\u503c\uff1b\u540c\u7406\uff0c\u6570\u7ec4\u503c\u4e0d\u552f\u4e00\u65e0\u6cd5\u89c4\u5212\u65f6\uff0c\u53ef\u4ee5\u589e\u52a0\u72b6\u6001\u7ef4\u4f7f\u72b6\u6001\u66f4\u8be6\u7ec6\u3002","title":"Dynamic Programming"},{"location":"competitive_programming/dynamic_programming/#dynamic-programming","text":"\u6709\u4e9b\u80fd\u7528\u52a8\u6001\u89c4\u5212\u6c42\u89e3\u4f46\u662f\u8d85\u65f6\u7684\u9898\u76ee\uff0c\u53ef\u4ee5\u8003\u8651\u4e8c\u5206\u6cd5\u3002 \u5f53\u770b\u5230\u6570\u636e\u8303\u56f4\u6781\u5c0f\u7684\u65f6\u5019\u8981\u8003\u8651\u7528\u4f4d\u4e8c\u8fdb\u5236\u5b58\u50a8\u72b6\u6001\uff0c\u6216\u8005\u8003\u8651\u66b4\u529b\u6c42\u89e3\u3002","title":"Dynamic Programming"},{"location":"competitive_programming/dynamic_programming/#_1","text":"\u591a\u91cd\u80cc\u5305\uff0c\u591a\u91cd\u80cc\u5305\u53ef\u4ee5\u8f6c\u5316\u4e3a\u5b8c\u5168\u80cc\u5305\u548c01\u80cc\u5305\u3002\u5982\u679c\u67d0\u4e1c\u897f\u7684\u603b\u4f53\u79ef\u5927\u4e8e\u5305\u4f53\u79ef\uff0c\u5219\u53ef\u4ee5\u5f53\u6210\u662f\u5b8c\u5168\u80cc\u5305\u3002\u5426\u5219\u6309\u7269\u54c1\u4f53\u79ef\u76841\uff0c2\uff0c4...\u500d\u5206\u522b\u8fdb\u884c01\u80cc\u5305\u3002\u8fd9\u6837\u5c31\u76f8\u5f53\u4e8e\u6784\u6210\u4e86\u6240\u6709\u7684\u53ef\u80fd\u60c5\u51b5\uff0c\u4f8b\u59825 \uff1d 4 \uff0b 1\uff0c 7 \uff1d 1 \uff0b 2 \uff0b 4\u3002\u90fd\u53ef\u4ee5\u7531\u8fd9\u4e9b\u6570\u5b57\u6784\u6210\u3002 \uff08\u4e0b\u9762\u8fd9\u79cd\u65b9\u6cd5\u4ec5\u9002\u7528\u4e8eBOOL\u578b\u7684\u80cc\u5305\uff0c\u5373weight\u548cvalue\u76f8\u7b49\u7684\u60c5\u51b5\uff09\u591a\u91cd\u80cc\u5305\uff0c\u5b66\u4e86 \u5b66\u4e86\u79cd\u5f88\u5feb\u7684\u65b0\u65b9\u6cd5\uff0c\u5c31\u662f\u6bcf\u6b21\u586bf[j]\u65f6\u76f4\u63a5\u7531f[j-weight[i]]\u63a8\u51fa\uff0c\u524d\u63d0\u662fnum[j - weight[i]] < sum[i] num\u6bcf\u586b\u4e00\u884c\u90fd\u8981\u6e05\u96f6\uff0cnum[j]\u8868\u793a\u5f53\u524d\u7269\u54c1\u586b\u5145j\u5927\u5c0f\u7684\u5305\u9700\u8981\u81f3\u5c11\u4f7f\u7528\u591a\u5c11\u4e2a \u4f46\u662f\u4f7f\u7528\u8fd9\u79cd\u65b9\u6cd5\u6709\u4e00\u4e2a\u6761\u4ef6\uff0c\u5c31\u662f\u8981\u6c42f\u6570\u7ec4\u53ea\u80fd\u662fbool\u7c7b\u578b\u3002\u5426\u5219\u4f1a\u51fa\u9519\u3002 \u5bf9\u4e8ebool\u578b\u5219\u4e0d\u4f1a\u6709\u6027\u4ef7\u6bd4\u7684\u95ee\u9898\uff0c\u53ea\u6709\u4f53\u79ef\u53ef\u8fbe\u548c\u4e0d\u53ef\u8fbe\u7684\u95ee\u9898\uff0c\u5728\u53ef\u8fbe\u524d\u63d0\u4e0b\u53ea\u8981\u5c3d\u91cf\u5c11\u7684\u4f7f\u7528\u5f53\u524d\u7269\u54c1\u5373\u53ef\uff0cvalue\u578b\u5219\u4e0d\u884c\uff0c\u53ef\u8fbe\u4e0d\u4e00\u5b9a\u5c11\u7528\u5f53\u524d\u7269\u54c1\uff0c\u56e0\u4e3a\u591a\u7528\u5f53\u524d\u7269\u54c1\u53ef\u80fd\u4f1a\u83b7\u5f97\u9ad8\u4ef7\u503c\u3002 \u4f8b\u5982\uff0c\u5982\u679c\u5f53\u524d\u7269\u54c1\u6027\u4ef7\u6bd4\u6781\u9ad8\uff0c\u90a3\u4e48\u5bf9\u4e8e\u4efb\u610f\u5927\u5c0f\u7684\u5305\u90fd\u5e94\u8be5\u5c3d\u91cf\u591a\u7684\u5f53\u524d\u7269\u54c1\u4ee5\u8ffd\u6c42\u9ad8\u4ef7\u503c\uff0c\u7528\u4e0a\u8ff0\u65b9\u6cd5\u4f1a\u4f7f\u5f97\u540e\u9762\u5305\u5bb9\u91cf\u8db3\u591f\u5927\u65f6\uff0c\u4f1a\u6709\u4e9b\u4f4d\u7f6e\uff08j=(sum[i]+1) * weight[i]\uff09\u56e0\u65e0\u6cd5\u6ee1\u8db3\u6761\u4ef6num[j - weight[i]] < sum[i]\uff08\u5373\u4e4b\u524d\u5df2\u7ecf\u628a\u5f53\u524d\u7269\u54c1\u4e70\u5b8c\uff09\uff0c\u800c\u65e0\u6cd5\u8d2d\u4e70\u5f53\u524d\u7269\u54c1\u3002","title":"\u80cc\u5305\u95ee\u9898"},{"location":"competitive_programming/dynamic_programming/#dp","text":"\u6811\u72b6dp\uff0c\u4e00\u822c\u91c7\u7528\u5de6\u513f\u5b50\u53f3\u5144\u5f1f\u7684\u5b58\u50a8\u65b9\u5f0f\uff0c\u5229\u7528\u8bb0\u5fc6\u5316\u641c\u7d22\uff0c\u5bf9\u6811\u8fdb\u884c\u4ece\u4e0b\u5230\u4e0a\uff0c\u5bf9\u5b50\u6811\u94fe\u8fdb\u884c\u4ece\u53f3\u5230\u5de6\u7684\u586b\u5199\u3002\u4e5f\u53ef\u4ee5\u4f7f\u7528\u5b58\u50a8\u56fe\u7684\u65b9\u5f0f\u5b58\u50a8\uff0c\u7136\u540e\u4fbf\u5229\u4e00\u4e2a\u8282\u70b9\u7684\u6240\u6709\u5b50\u8282\u70b9\uff0c\u5728\u4fbf\u5229\u8fc7\u7a0b\u4e2d\u4e0d\u65ad\u79ef\u7d2f\u66f4\u65b0\u7236\u8282\u70b9\u7684\u503c\u3002","title":"\u6811\u5f62DP"},{"location":"competitive_programming/dynamic_programming/#dp_1","text":"\u6982\u7387DP\u6c42\u671f\u671b\uff1a \u6211\u4eec\u4ee5\u524d\u5b66\u8fc7\u7684\u6c42\u671f\u671b\u7684\u65b9\u6cd5\u662f\u6bcf\u79cd\u7ed3\u679c\u51fa\u73b0\u7684\u6982\u7387\u4e58\u4ee5\u6bcf\u79cd\u7ed3\u679c\u7684\u503c\uff0c\u7136\u540e\u76f8\u52a0\u3002\u4f46\u662f\u901a\u5e38\u89e3\u51b3\u8fd9\u7c7b\u95ee\u9898\u6211\u4eec\u90fd\u8981\u5bf9\u6bcf\u4e2a\u4e2d\u95f4\u72b6\u6001\u6c42\u671f\u671b\u503c\uff0c\u6700\u7ec8\u7b97\u51fa\u603b\u7684\u671f\u671b\u3002\u8fd9\u65f6\u6211\u4eec\u5c31\u53ef\u4ee5\u628a\u6bcf\u4e2a\u72b6\u6001\u7684\u540e\u7ee7\u72b6\u6001\uff08\u5b50\u95ee\u9898\uff09\u770b\u6210\u662f\u4e00\u4e2a\u7ed3\u679c\u503c\uff0c\u800c\u4e0d\u662f\u671f\u671b\u503c\u3002 \u5982\u679c\u662f\u7b97\u671f\u671b\u901a\u5e38\u9700\u8981\u9006\u5411\u601d\u7ef4E(u)=sigma(pv * E(v)+C)\uff0c\u5176\u4e2dC\u662f\u72b6\u6001u\u548c\u72b6\u6001v\u4e4b\u95f4\u7684\u671f\u671b\u5dee\u503c\uff0cpv\u662fu\u72b6\u6001\u8f6c\u79fb\u5230v\u72b6\u6001\u7684\u6982\u7387\u3002v\u662fu\u62c6\u5206\u540e\u7684\u5b50\u95ee\u9898\u3002 \u6ce8\u610f\uff1asigma(pv)=1 \u5728\u6982\u7387dp\u4e2d\u6709\u65f6\u5019\u6211\u4eec\u8981\u6c42\u89e3\u7684f[i][j]\u53ef\u80fd\u4f1a\u540c\u65f6\u51fa\u73b0\u5728\u6211\u4eec\u5217\u51fa\u7684\u8f6c\u79fb\u65b9\u7a0b\u7684\u4e24\u4fa7\uff0c\u8fd9\u65f6\u5019\u9700\u8981\u89e3\u65b9\u7a0b\uff0c\u5c06\u5176\u7edf\u4e00\u5230\u65b9\u7a0b\u7b49\u53f7\u7684\u4e00\u8fb9\u6765\u3002 \u6982\u7387DP\u4e2d\u6c42\u6982\u7387\u901a\u5e38\u9700\u8981\u6b63\u5411\u601d\u7ef4\uff0c\u7531\u60c5\u51b5i\u51fa\u53d1\u5230\u8fbe\u60c5\u51b5v\u3002\u90a3\u4e48\u7528\u5982\u4e0b\u516c\u5f0f\u66f4\u65b0\u6240\u6709\u7684\u60c5\u51b5v\uff0cP(v)+=P(i) * P(v|i)\u3002\u6ce8\u610f\uff1a\u5bf9\u4e8e\u4e00\u4e2a\u56fa\u5b9a\u7684i\uff0c\u6240\u6709\u5230\u4e0d\u540c\u7684v\u7684\u6982\u7387\u603b\u548csigma(P(v|i))=1\u3002 \u52a8\u6001\u89c4\u5212\u4e2d\u72b6\u6001\u7ef4\u548c\u503c\u662f\u53ef\u4ee5\u76f8\u4e92\u8f6c\u5316\u7684\u3002\u72b6\u6001\u7ef4\u8fc7\u591a\uff0c\u6548\u7387\u4f4e\u7684\u65f6\u5019\uff0c\u53ef\u4ee5\u628a\u5c06\u5176\u8f6c\u5316\u4e3a\u6570\u7ec4\u503c\uff1b\u540c\u7406\uff0c\u6570\u7ec4\u503c\u4e0d\u552f\u4e00\u65e0\u6cd5\u89c4\u5212\u65f6\uff0c\u53ef\u4ee5\u589e\u52a0\u72b6\u6001\u7ef4\u4f7f\u72b6\u6001\u66f4\u8be6\u7ec6\u3002","title":"\u6982\u7387DP"},{"location":"competitive_programming/game_theory/","text":"Game Theory NP\u95ee\u9898 NP\u95ee\u9898\uff0c\u5fc5\u80dc\u6001N\uff08next player wins\uff09,\u5fc5\u8d25\u6001P(previous player wins) \u5982\u679c\u67d0\u72b6\u6001\u7684\u76f4\u63a5\u540e\u7ee7\u4e2d\u6709\u5fc5\u8d25\u6001\u90a3\u4e48\u5b83\u4e00\u5b9a\u662f\u5fc5\u80dc\u6001\uff0c\u5426\u5219\u4e3a\u5fc5\u8d25\u6001\u3002 SG\u51fd\u6570 \u8bbe\u51fd\u6570g(x)\u3002\u6211\u4eec\u5148\u628a\u6240\u6709\u7684\u6700\u7ec8\u5c40\u9762\uff08\u6700\u7ec8\u5c40\u9762\u5747\u4e3a\u5fc5\u8d25P\u5c40\u9762\uff09g(x)\u8d4b\u503c\u4e3a0\u3002\u7136\u540e\u6240\u6709\u5176\u4ed6\u5c40\u9762g(x)\u7b49\u4e8e\u5176\u76f4\u63a5\u540e\u7ee7\u72b6\u6001\u4e2d\u6ca1\u6709\u51fa\u73b0\u8fc7\u7684\u6700\u5c0f\u81ea\u7136\u6570\u3002\u8fd9\u6837\u4e00\u6765\u6240\u6709\u662fg(x)\uff1d0\u7684\u72b6\u6001\u5c31\u662f\u5fc5\u8d25\u6001\uff0c\u5176\u4ed6\u4e3a\u5fc5\u80dc\u6001\u3002 \u6839\u636e\u5b9a\u7406\uff1a\u6709\u8fd9\u6837\u4e00\u4e2a\u6e38\u620f\uff0c\u662f\u591a\u4e2a\u6e38\u620f\u5171\u540c\u8fdb\u884c\uff0c\u6bcf\u4e2a\u6e38\u620f\u90fd\u6267\u884c\u5230\u5e95\u65f6\u624d\u7b97\u6574\u4e2a\u6e38\u620f\u7ed3\u675f\uff0c\u6bcf\u6b21\u4e00\u4e2a\u9009\u624b\u53ef\u4ee5\u628a\u4e00\u4e2a\u6e38\u620f\u8fdb\u884c\u4e00\u6b65\u3002\u5bf9\u4e8e\u8fd9\u6837\u7684\u6e38\u620f\u5b83\u7684\u67d0\u72b6\u6001\u7684g(x)\u503c\uff0c\u4e3a\u6bcf\u4e2a\u5b50\u6e38\u620f\u7684\u73b0\u5728\u6240\u5904\u7684\u72b6\u6001\u7684g(x)\u503c\u6291\u6216\u8d77\u6765\u7684\u7ed3\u679c\u3002","title":"Game Theory"},{"location":"competitive_programming/game_theory/#game-theory","text":"","title":"Game Theory"},{"location":"competitive_programming/game_theory/#np","text":"NP\u95ee\u9898\uff0c\u5fc5\u80dc\u6001N\uff08next player wins\uff09,\u5fc5\u8d25\u6001P(previous player wins) \u5982\u679c\u67d0\u72b6\u6001\u7684\u76f4\u63a5\u540e\u7ee7\u4e2d\u6709\u5fc5\u8d25\u6001\u90a3\u4e48\u5b83\u4e00\u5b9a\u662f\u5fc5\u80dc\u6001\uff0c\u5426\u5219\u4e3a\u5fc5\u8d25\u6001\u3002","title":"NP\u95ee\u9898"},{"location":"competitive_programming/game_theory/#sg","text":"\u8bbe\u51fd\u6570g(x)\u3002\u6211\u4eec\u5148\u628a\u6240\u6709\u7684\u6700\u7ec8\u5c40\u9762\uff08\u6700\u7ec8\u5c40\u9762\u5747\u4e3a\u5fc5\u8d25P\u5c40\u9762\uff09g(x)\u8d4b\u503c\u4e3a0\u3002\u7136\u540e\u6240\u6709\u5176\u4ed6\u5c40\u9762g(x)\u7b49\u4e8e\u5176\u76f4\u63a5\u540e\u7ee7\u72b6\u6001\u4e2d\u6ca1\u6709\u51fa\u73b0\u8fc7\u7684\u6700\u5c0f\u81ea\u7136\u6570\u3002\u8fd9\u6837\u4e00\u6765\u6240\u6709\u662fg(x)\uff1d0\u7684\u72b6\u6001\u5c31\u662f\u5fc5\u8d25\u6001\uff0c\u5176\u4ed6\u4e3a\u5fc5\u80dc\u6001\u3002 \u6839\u636e\u5b9a\u7406\uff1a\u6709\u8fd9\u6837\u4e00\u4e2a\u6e38\u620f\uff0c\u662f\u591a\u4e2a\u6e38\u620f\u5171\u540c\u8fdb\u884c\uff0c\u6bcf\u4e2a\u6e38\u620f\u90fd\u6267\u884c\u5230\u5e95\u65f6\u624d\u7b97\u6574\u4e2a\u6e38\u620f\u7ed3\u675f\uff0c\u6bcf\u6b21\u4e00\u4e2a\u9009\u624b\u53ef\u4ee5\u628a\u4e00\u4e2a\u6e38\u620f\u8fdb\u884c\u4e00\u6b65\u3002\u5bf9\u4e8e\u8fd9\u6837\u7684\u6e38\u620f\u5b83\u7684\u67d0\u72b6\u6001\u7684g(x)\u503c\uff0c\u4e3a\u6bcf\u4e2a\u5b50\u6e38\u620f\u7684\u73b0\u5728\u6240\u5904\u7684\u72b6\u6001\u7684g(x)\u503c\u6291\u6216\u8d77\u6765\u7684\u7ed3\u679c\u3002","title":"SG\u51fd\u6570"},{"location":"competitive_programming/graph_theory/","text":"Graph Theory priority_queue\u7684bfs\u76f8\u5f53\u4e8e\u4f7f\u7528\u4e86dijkstra\u7684\u601d\u60f3\u3002 \u62d3\u6251\u5e8f\u53ef\u4ee5\u7528\u6765\u5224\u65ad\u56fe\u4e2d\u662f\u5426\u6709\u73af\uff0c\u65b9\u6cd5\u662f\u5728BFS\u4e4b\u540e\u770b\u662f\u5426\u6709\u5165\u5ea6\u4e0d\u4e3a0\u7684\u70b9\u3002 \u5f3a\u8fde\u901a\u5206\u652f \u6c42\u5f3a\u8fde\u901a\u5206\u652f\u6709\u4e24\u79cd\u65b9\u6cd5\uff0ckorasaju\u548ctarjan\u3002 korasaju\u662f\u8fdb\u884c\u4e24\u6b21dfs\u8986\u76d6\u5168\u56fe\uff08\u5b9e\u9645\u4e0a\u662f\u4e24\u79cddfs\uff0c\u8986\u76d6\u5168\u56fe\u9700\u8981\u591a\u6b21dfs\uff09\uff0c\u7b2c\u4e00\u6b21\u7ed9\u7ed3\u70b9\u6807\u8d77\u59cb\u548c\u7ed3\u675f\u65f6\u95f4\uff0c\u7b2c\u4e8c\u6b21\u628a\u56fe\u53cd\u5411\u5e76\u4ece\u7ed3\u675f\u65f6\u95f4\u6700\u5927\u7684\u7ed3\u70b9\u5f00\u59cbdfs\uff0c\u6bcf\u6b21dfs\u6240\u80fd\u5230\u8fbe\u7684\u7ed3\u70b9\u4e3a\u4e00\u4e2a\u5f3a\u8fde\u901a\u5206\u652f\u3002\u4e0b\u9762\u6765\u7b80\u5355\u8bb2\u4e00\u4e0b\u4e3a\u4ec0\u4e48\u8fd9\u6837\u505a\u3002\u7b2c\u4e8c\u6b21dfs\u8fc7\u7a0b\u4e2d\u6bcf\u6b21dfs\u7684\u8d77\u70b9\u4e3a\u7ed3\u675f\u65f6\u95f4\u6700\u5927\u7684\u70b9\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u4fdd\u8bc1\u662f\u7b2c\u4e00\u6b21dfs\u4e2d\u7684\u67d0\u4e00\u68f5\u641c\u7d22\u6811\u7684\u6839\u8282\u70b9\u3002\u90a3\u4e48\u4ece\u4efb\u610f\u4e00\u4e2a\u7b2c\u4e00\u6b21dfs\u7684\u6839\u8282\u70b9\u5f00\u59cb\u7684\u5bf9\u53cd\u56fe\u7684dfs\u90fd\u4e0d\u53ef\u80fd\u8de8\u8d8a\u5230\u5728\u7b2c\u4e00\u6b21dfs\u4e2d\u6bd4\u8be5\u6839\u8282\u70b9\u66f4\u65e9\u7684\u641c\u7d22\u6811\u4e2d\u3002\u56e0\u4e3a\u5047\u8bbe\u80fd\u8de8\u8d8a\uff0c\u8bf4\u660e\u53cd\u56fe\u4e2d\u665a\u7684\u641c\u7d22\u6811\u6709\u6307\u5411\u66f4\u65e9\u641c\u7d22\u6811\u7684\u8fb9\uff0c\u5373\u539f\u56fe\u4e2d\u6709\u4ece\u66f4\u65e9\u641c\u7d22\u6811\u6307\u5411\u665a\u641c\u7d22\u6811\u7684\u8fb9\u3002\u90a3\u4e48\u665a\u641c\u7d22\u6811\u6839\u672c\u5c31\u4e0d\u4f1a\u5355\u72ec\u6210\u6811\uff0c\u4e0e\u4e4b\u524d\u5047\u8bbe\u77db\u76fe\u3002\u8fd9\u6837\u5c31\u4fdd\u8bc1\u4e86\u7b2c\u4e8c\u6b21dfs\u8fc7\u7a0b\u4e2d\u6bcf\u6b21dfs\u53ea\u53ef\u80fd\u5728\u7b2c\u4e00\u6b21\u7684\u67d0\u4e00\u68f5\u5b50\u6811\u4e2d\u8fdb\u884c\uff0c\u4e0d\u53ef\u80fd\u8de8\u6811\u641c\u7d22\u3002\u7b2c\u4e8c\u6b21\u80fd\u6839u\u641c\u5230\u7684\u70b9v\uff0c\u8bf4\u660e\u539f\u56fe\u4e2dv\u53ef\u4ee5\u5230\u8fbeu\uff0c\u800c\u7b2c\u4e00\u6b21v\u4e00\u5b9a\u662fu\u6811\u4e2d\u7684\u7ed3\u70b9\uff0c\u4e5f\u5c31\u662f\u8bf4u\u53ef\u5230\u8fbev,\u4ece\u800c\u4e00\u5b9a\u80fd\u5f62\u6210\u5f3a\u8fde\u901a\u5206\u652f\u3002 tarjan\u7b97\u6cd5\u5219\u662f\u5229\u7528\u4e00\u6b21dfs\uff0c\u6574\u4e2a\u8fc7\u7a0b\u4e2d\u5bf9\u6bcf\u4e2a\u7ed3\u70b9\u8bb0\u5f55\u4e24\u4e2a\u503c\uff0cdfn[u]\u7ed3\u70b9\u7684\u8bbf\u95ee\u65f6\u95f4\uff0clow[u]\u7ed3\u70b9\u53ca\u5176\u5b50\u8282\u70b9\u6240\u80fd\u76f4\u63a5\u8bbf\u95ee\u5230\u7684\u7ed3\u70b9v\u4e2ddfn[v]\u7684\u6700\u5c0f\u503c\u3002\uff08\u8fd9\u91cc\u5355\u6b21\u8fd4\u7956\u548c\u591a\u6b21\u8fd4\u7956\u662f\u65e0\u6240\u8c13\u7684\uff09\u6bcf\u6b21\u628a\u8bbf\u95ee\u5230\u7684\u7ed3\u70b9\u5165\u6808\uff0c\u4e00\u65e6\u641c\u7d22\u5b8c\u67d0\u4e00\u7ed3\u70b9u\u7684\u6240\u6709\u5b50\u8282\u70b9\u540e\u53d1\u73b0low[u]==dfn[u]\u5219\u5f39\u6808\u76f4\u5230u\u88ab\u5f39\u51fa\uff0c\u6b64\u8fc7\u7a0b\u5f39\u51fa\u7684\u70b9\u4e3a\u4e00\u4e2a\u5f3a\u8fde\u901a\u5206\u652f\u3002\u8fd9\u6837\u4e5f\u5c31\u4fdd\u8bc1\u4e86\uff0c\u6808\u4e2d\u6240\u6709\u7ed3\u70b9\u90fd\u662f\u53ef\u4ee5\u5230\u8fbe\u67d0\u4e00\u7236\u8282\u70b9\u7684\uff0c\u4e5f\u5c31\u662f\u8bf4\u4e00\u65e6\u67d0\u4e2a\u70b9\u53ef\u4ee5\u5230\u8fbe\u6808\u4e2d\u67d0\u4e2a\u70b9\uff0c\u5b83\u4e00\u5b9a\u53ef\u4ee5\u5230\u8fbe\u67d0\u7236\u8282\u70b9\u3002 2-sat\u95ee\u9898 \u6709n\u7ec4\u5143\u7d20\uff0c\u6bcf\u7ec4\u4e24\u4e2a\uff0c\u4ece\u4e2d\u9009\u51fan\u4e2a\uff0c\u6bcf\u7ec4\u9009\u4e14\u53ea\u9009\u4e00\u4e2a\u3002\u8fd92n\u4e2a\u5143\u7d20\u4e2d\u6709\u4e9b\u5143\u7d20\u4e4b\u95f4\u6709\u77db\u76fe\u5173\u7cfb\uff0c\u8981\u6c42\u9009\u51fa\u7684n\u4e2a\u5143\u7d20\u4e2d\uff0c\u4efb\u610f\u4e24\u4e2a\u4e4b\u95f4\u90fd\u4e0d\u5b58\u5728\u77db\u76fe\u3002\u95ee\u662f\u5426\u5b58\u5728\u6ee1\u8db3\u6761\u4ef6\u7684\u9009\u53d6\u65b9\u6848\u3002\u8fd9\u5c31\u662f2-sat\u95ee\u9898\u3002\u89e3\u51b3\u65b9\u6cd5\u5982\u4e0b\uff0c\u4f8b\u5982a,b\u4e00\u7ec4\uff0cc,d\u4e00\u7ec4\uff0ca,c\u6709\u77db\u76fe\uff0c\u90a3\u4e48\u9009a\u5219\u4e0d\u80fd\u9009c\uff0c\u4e0d\u9009c\u5219\u5fc5\u987b\u9009d\u3002\u6240\u4ee5\u9009a\u5c31\u5fc5\u987b\u9009d\u3002\u540c\u7406\u9009c\u5c31\u5fc5\u987b\u9009b\u3002\u6211\u4eec\u5f15\u4e24\u6761\u8fb9\uff0ca->d, c->b\u3002\u5bf9\u4e8e\u6240\u6709\u7684\u77db\u76fe\u90fd\u7528\u7c7b\u4f3c\u7684\u65b9\u5f0f\u52a0\u8fb9\u3002\u8fd9\u6837\u53ea\u8981\u4ecex\u70b9\u53ef\u4ee5\u8d70\u5230y\u70b9\uff0c\u90a3\u4e48\u9009x\u70b9\u5c31\u5fc5\u987b\u9009y\u70b9\u3002\u7136\u540e\u5bf9\u5168\u56fe\u6c42\u5f3a\u8fde\u901a\u5206\u652f\u3002\u5728\u4e00\u4e2a\u5f3a\u8fde\u901a\u5206\u652f\u4e2d\uff0c\u9009\u4e86\u4e00\u4e2a\u70b9\uff0c\u5219\u5fc5\u987b\u9009\u5f3a\u8fde\u901a\u5206\u652f\u4e2d\u7684\u6240\u6709\u70b9\u3002\u5982\u679c\u6709\u67d0\u4e24\u4e2a\u70b9\u5c5e\u4e8e\u540c\u4e00\u7ec4\uff0c\u4e14\u5c5e\u4e8e\u540c\u4e00\u4e2a\u5f3a\u8fde\u901a\u5206\u652f\uff0c\u5219\u5fc5\u7136\u65e0\u89e3\uff0c\u5426\u5219\u6709\u89e3\u3002\u4e3a\u4ec0\u4e48\u5426\u5219\u5fc5\u7136\u6709\u89e3\u5462\uff1f\u5047\u8bbe\u65e0\u73af\u4ecd\u65e0\u89e3\u3002\u90a3\u4e48\u4e0d\u59a8\u8bbe\u7531a\u7ecf\u8fc7\u5f88\u591a\u70b9\u6700\u7ec8\u8d70\u5411b\uff08ab\u5728\u540c\u4e00\u7ec4\uff09\u5bfc\u81f4\u4e86\u65e0\u89e3\u3002\u56e0\u4e3a\u539f\u56fe\u5177\u6709\u5bf9\u79f0\u6027\u548c\u4f20\u9012\u6027\uff0c\u90a3\u4e48b\u5fc5\u7136\u4e5f\u80fd\u8d70\u5230a\uff0c\u6240\u4ee5\u5c31\u6210\u4e86\u73af\uff0c\u4e0e\u5047\u8bbe\u77db\u76fe\u3002\u6240\u4ee5\u5047\u8bbe\u4e0d\u6210\u7acb\u3002 \u6b27\u62c9\u8def\u5f84 1.\u5b9a\u7406\uff1a\u65e0\u5411\u56feG\u6709\u6b27\u62c9\u901a\u8def\u7684\u5145\u5206\u5fc5\u8981\u6761\u4ef6\u662fG\u4e3a\u8fde\u901a\u56fe\uff0c\u5e76\u4e14G\u4ec5\u6709\u4e24\u4e2a\u5947\u5ea6\u7ed3\u70b9\u6216\u8005\u65e0\u5947\u5ea6\u7ed3\u70b9\u3002 \uff081\uff09\u5f53G\u662f\u4ec5\u6709\u4e24\u4e2a\u5947\u5ea6\u7ed3\u70b9\u7684\u8fde\u901a\u56fe\u65f6\uff0cG\u7684\u6b27\u62c9\u901a\u8def\u5fc5\u4ee5\u6b64\u4e24\u4e2a\u7ed3\u70b9\u4e3a\u7aef\u70b9\u3002 \uff082\uff09\u5f53G\u662f\u65e0\u5947\u5ea6\u7ed3\u70b9\u7684\u8fde\u901a\u56fe\u65f6\uff0cG\u5fc5\u6709\u6b27\u62c9\u56de\u8def\u3002 2.\u4e00\u4e2a\u6709\u5411\u56feD\u5177\u6709\u6b27\u62c9\u901a\u8def\uff0c\u5f53\u4e14\u4ec5\u5f53D\u662f\u8fde\u901a\u7684\uff0c\u4e14\u9664\u4e86\u4e24\u4e2a\u9876\u70b9\u5916\uff0c\u5176\u4f59\u9876\u70b9\u7684\u5165\u5ea6\u5747\u7b49\u4e8e\u51fa\u5ea6\uff0c\u8fd9\u4e24\u4e2a\u7279\u6b8a\u7684\u9876\u70b9\u4e2d\uff0c\u4e00\u4e2a\u9876\u70b9\u7684\u5165\u5ea6\u6bd4\u51fa\u5ea6\u5927\uff11\uff0c\u53e6\u4e00\u4e2a\u9876\u70b9\u7684\u5165\u5ea6\u6bd4\u51fa\u5ea6\u5c0f\uff11\uff0e\u63a8\u8bba\uff1a\u4e00\u4e2a\u6709\u5411\u56feD\u662f\u6b27\u62c9\u56fe\uff08\u5177\u6709\u6b27\u62c9\u56de\u8def\uff09\uff0c\u5f53\u4e14\u4ec5\u5f53D\u662f\u8fde\u901a\u7684\uff0c\u4e14\u6240\u6709\u9876\u70b9\u7684\u51fa\u5ea6\u7b49\u4e8e\u5165\u5ea6\u3002 \u6c42\u6b27\u62c9\u56de\u8def \u5bf9\u5168\u56fe\u8fdb\u884cdfs\uff0c\u4ece\u89c4\u5b9a\u8d77\u70b9\u5f00\u59cb\u3002\u8fc7\u7a0b\u4e2d\u8bb0\u5f55\u7ecf\u8fc7\u4e86\u54ea\u4e9b\u8fb9\uff0c\u4ee5\u4fdd\u8bc1\u6bcf\u6761\u8fb9\u53ea\u7ecf\u8fc7\u4e00\u6b21\u3002\u5f53\u4e00\u4e2a\u70b9\u7684\u6240\u6709\u8fb9\u90fd\u904d\u5386\u5b8c\u6210\u540e\uff0c\u628a\u8be5\u70b9\u5165\u6808\u3002\u6700\u540e\u4f9d\u6b21\u5f39\u6808\u5f97\u5230\u7684\u5c31\u662f\u6b27\u62c9\u8def\u5f84\u3002\u88ab\u5165\u6808\u7684\u70b9\u90fd\u662f\u8d70\u6295\u65e0\u8def\u7684\u70b9\uff0c\u5982\u679c\u5b58\u5728\u6b27\u62c9\u8def\u5f84\uff0c\u7b2c\u4e00\u6b21\u51fa\u73b0\u7684\u8d70\u6295\u65e0\u8def\u4e00\u5b9a\u662f\u5728\u8d70\u56de\u5230\u8d77\u70b9\u65f6\uff0c\u56e0\u4e3a\u5176\u4ed6\u60c5\u51b5\u65e0\u8bba\u600e\u4e48\u8d70\u53ea\u53ef\u80fd\u7565\u8fc7\u4e00\u4e9b\u8fb9\uff0c\u800c\u4e0d\u53ef\u80fd\u8d70\u8fdb\u6b7b\u8def\u3002 \u5dee\u5206\u7ea6\u675f\u7cfb\u7edf \u5bf9\u4e8e\u4e00\u7ec4\u7c7b\u4f3c\u4e8exa-xb>=c\u7684\u4e0d\u7b49\u5f0f\u6c42\u662f\u5426\u6709\u6ee1\u8db3\u7684\u89e3\uff0c\u7528bellman\u6765\u89e3\uff0cbellman\u662f\u4f7f\u5f97dist[v] <= dist[u] + c\u3002 \u5dee\u5206\u7ea6\u675f\u662f\u4f7f\u5f97A-B>=C\u5373 B<=A+(-C)\u3002\u6240\u4ee5\u5bf9\u4e8e\u6bcf\u4e2a\u8fd9\u6837\u7684\u4e0d\u7b49\u5f0f\u6211\u4eec\u5c31\u4eceA\u5411B\u8fde\u4e00\u6761\u8fb9\u8fb9\u7684\u6743\u503c\u4e3a-C\u3002 \u89c2\u5bdf\u662f\u5426\u6709\u8d1f\u6743\u56de\u8def\uff0c\u6ca1\u6709\u5219\u6709\u89e3\uff0c\u6709\u5219\u65e0\u89e3\u3002\u6c42\u5f97\u7684\u6700\u77ed\u8def\u5373\u4e3a\u6700\u5927\u89e3\u3002\u5982\u679c\u9898\u76ee\u6ca1\u6709\u89c4\u5b9a\u6e90\u70b9\u7684\u503c\u53ef\u4ee5\u968f\u610f\uff0c\u5176\u4f59\u70b9\u521d\u59cb\u5316\u4e3a\u6b63\u65e0\u7a77\uff0c\u56e0\u4e3a\u5dee\u5206\u7ea6\u675f\u7684\u6761\u4ef6\u5c31\u662f\u5404\u4e2a\u6570\u5b57\u4e4b\u95f4\u7684\u5dee\u8981\u6ee1\u8db3\u67d0\u4e9b\u6761\u4ef6\u3002\u5e76\u6ca1\u6709\u89c4\u5b9a\u67d0\u4e2a\u6570\u5b57\u7684\u786e\u5b9a\u503c\uff0c\u6240\u4ee5\u7ecf\u8fc7\u6700\u77ed\u8def\u8fd0\u7b97\u540e\u4e5f\u53ea\u80fd\u5f97\u5230\u76f8\u5bf9\u503c\u3002 \u7528spfa\u505a\u5dee\u5206\u7ea6\u675f\u3002\u4e0d\u80fd\u5411bellman\u4e00\u6837\u3002\u8fd8\u662f\u628a\u5dee\u5206\u7ea6\u675f\u7406\u89e3\u4e3a\u6c42\u6700\u957f\u8def\u6bd4\u8f83\u76f4\u89c2\u3002 \u5bf9\u4e8edist[a]-dist[b]>=c\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u4f5cdist[a]>=dist[b]+c\uff0c\u6240\u4ee5\u6211\u4eec\u5982\u679c\u521d\u59cb\u5316\u4e3a\u8d1f\u65e0\u7a77\uff0c\u8d77\u70b9\u521d\u59cb\u5316\u4e3a0\uff0c\u5e76\u8ba9\u6240\u6709\u7684\u4e0d\u7b49\u5f0f\u90fd\u6ee1\u8db3\uff0c\u90a3\u4e48\u5c31\u662f\u5728\u6c42\u4e00\u4e2a\u6700\u957f\u8def\u3002 spfa\u4e0d\u80fd\u5904\u7406\u975e\u8fde\u901a\u56fe\uff0c\u9700\u8981\u52a0\u5165\u8d85\u7ea7\u6e90\uff08\u4e00\u4e2a\u5230\u6240\u6709\u70b9\u90fd\u6709\u4e00\u6761\u957f\u5ea6\u4e3a0\u7684\u8fb9\u7684\u70b9\uff09\uff0c\u5e76\u628a\u8d85\u7ea7\u6e90\u4f5c\u4e3a\u8d77\u70b9\uff0c\u624d\u80fd\u4fdd\u8bc1\u5728\u6269\u5c55\u8fc7\u7a0b\u4e2d\u5230\u8fbe\u6bcf\u4e2a\u70b9\u3002\u5426\u5219\u5dee\u5206\u7ea6\u675f\u7cfb\u7edf\u7684\u90e8\u5206\u5185\u5bb9\u5c31\u4e0d\u4f1a\u88ab\u68c0\u6d4b\u5230\u3002 \u5dee\u5206\u7ea6\u675f\u7cfb\u7edf\u6709\u4e24\u79cd\u65b9\u5f0f\u53ef\u4ee5\u6c42\u89e3\uff0c\u6700\u77ed\u8def\u548c\u6700\u957f\u8def\u3002\u5f53\u6211\u4eec\u628a\u4e0d\u7b49\u5f0f\u6574\u7406\u6210d[a]+w<=d[b]\u65f6\uff0c\u6211\u4eec\u6c42\u6700\u957f\u8def\u3002\u6574\u7406\u6210d[a]+w>=d[b]\u65f6\uff0c\u6211\u4eec\u6c42\u6700\u77ed\u8def\u3002\u5f53\u6c42\u6700\u77ed\u8def\u65f6\uff0c\u6211\u4eec\u901a\u5e38\u8981\u628a\u5404\u70b9\u8ddd\u79bb\u521d\u59cb\u5316\u4e3a\u6b63\u65e0\u7a77\uff0c\u6c42\u6700\u77ed\u8def\uff0c\u628a\u5404\u70b9\u8ddd\u79bb\u9010\u6e10\u51cf\u5c0f\uff0c\u76f4\u5230\u7b26\u5408\u6240\u6709\u4e0d\u7b49\u5f0f\u3002\u4e5f\u5c31\u662f\u5f00\u59cb\u5404\u70b9\u4e0d\u7b26\u5408\u6761\u4ef6\uff0c\u540e\u6765\u901a\u8fc7\u51cf\u5c0f\u53d8\u5f97\u7b26\u5408\u4e86\uff0c\u6240\u4ee5\u4e00\u5b9a\u662f\u7b26\u5408\u6761\u4ef6\u7684\u6700\u5927\u503c\u3002\u65e2\u7136\u662f\u6c42\u6700\u5927\u503c\uff0c\u5e76\u4e14\u662f\u51cf\u5c0f\u5404\u70b9\u8ddd\u79bb\uff0c\u4e5f\u5c31\u662f\u628a\u5404\u70b9\u7531\u6570\u8f74\u7684\u53f3\u4fa7\u5411\u5de6\u4fa7\u62c9\uff0c\u6240\u4ee5\u6211\u4eec\u4e00\u5b9a\u8981\u9009\u62e9\u4e00\u4e2a\u6700\u7ec8\u5728\u6570\u8f74\u6700\u5de6\u4fa7\u7684\u70b9\uff0c\u5e76\u521d\u59cb\u5316\u4e3a0\uff0c\u628a\u6240\u6709\u6b63\u65e0\u7a77\u7684\u70b9\u62c9\u8fd1\u5230\u7b26\u5408\u4e0d\u7b49\u5f0f\u3002\u6700\u957f\u8def\u540c\u7406\u3002 \u53cc\u8fde\u901a\u5206\u652f \u53cc\u8fde\u901a\u5206\u652f\u5206\u5c31\u662f\u4e00\u4e2a\u6781\u5927\u5316\uff08\u4e00\u4e2a\u70b9\u53ea\u8981\u52a0\u8fdb\u6765\u4e4b\u540e\u8be5\u5206\u652f\u4ecd\u7136\u662f\u53cc\u8fde\u901a\u5206\u652f\u5c31\u52a0\u8fdb\u6765\uff09\u7684\u5206\u652f\uff0c\u53bb\u6389\u4efb\u610f\u4e00\u6761\u8fb9\u8fd9\u4e2a\u5206\u652f\u5185\u90e8\u4ecd\u7136\u8fde\u901a\u3002\u4e5f\u53ef\u4ee5\u7406\u89e3\u4e3a\u53bb\u6389\u6865\u4e4b\u540e\uff0c\u6bcf\u4e2a\u8fde\u901a\u5206\u652f\u5c31\u662f\u539f\u56fe\u7684\u53cc\u8fde\u901a\u5206\u652f\u3002 \u6ce8\u610f\uff1a\u5317\u5927\u57f9\u8bad\u4e2d\u8bf4\u6709\u4e24\u79cd\u53cc\u8fde\u901a\uff08\u8fb9\u7684\u548c\u70b9\u7684\uff09\uff0c\u5176\u5b9e\u53ea\u6709\u8fb9\u7684\u53cc\u8fde\u901a\u624d\u662f\u53cc\u8fde\u901a\u7684\u6b63\u89c4\u5b9a\u4e49\u3002\u6240\u4ee5\u6211\u4eec\u4e0d\u5bf9\u70b9\u7684\u53cc\u8fde\u901a\u8fdb\u884c\u8ba8\u8bba\u3002 \u6c42\u5272\u70b9\u548c\u6865\u53ef\u4ee5\u7528tarjan\u7b97\u6cd5\uff0c\u5bf9\u56fe\u8fdb\u884cdfs\uff0c\u8bb0\u5f55\u6bcf\u4e2a\u70b9\u7684\u7b2c\u4e00\u6b21\u5230\u8fbe\u65f6\u95f4dfn[i]\u3002\u5e76\u8bb0\u5f55\u4e00\u4e2alow[i]\u8868\u793a\u8be5\u70b9\u53ca\u5176\u5b50\u5b59\u7ed3\u70b9\u6240\u80fd\u5230\u8fbe\u7684dfn\u6700\u5c0f\u7684\u70b9\u3002\u8fd9\u4e2a\u5230\u8fbe\u5e76\u4e0d\u662f\u666e\u901a\u610f\u4e49\u7684\u5230\u8fbe\uff0c\u800c\u662f\u5728\u904d\u5386\u8fc7\u7a0b\u4e2d\uff0c\u901a\u8fc7\u975e\u6811\u679d\u8fb9\uff08\u4e00\u5b9a\u662f\u8fd4\u7956\u8fb9\uff0c\u56e0\u4e3a\u662f\u65e0\u5411\u56fe\uff0c\u6ca1\u6709\u6a2a\u53c9\u8fb9\uff09\u80fd\u591f\u76f4\u63a5\u5230\u8fbe\u7684\u70b9\uff08\u800c\u4e0d\u662f\u8fde\u7eed\u4f7f\u7528\u8fd4\u7956\u8fb9\u80fd\u5230\u8fbe\u7684\uff09\u3002\u8fd9\u6837\u5c31\u53ef\u4ee5\u628alow\u603b\u7ed3\u4e3alow[u] = min(low[v]\uff08v\u4e3au\u7684\u513f\u5b50\u7ed3\u70b9\uff09,dfn[v]\uff08v\u662fu\u901a\u8fc7\u8fd4\u7956\u8fb9\u80fd\u5230\u8fbe\u7684\u70b9\uff09,dfn(u)); \u7136\u540e\u6211\u4eec\u53ef\u4ee5\u7c97\u7565\u5730\u8ba4\u4e3a\u8fd4\u7956\u8fb9\u53ef\u4ee5\u8fde\u540c\u6811\u679d\u8fb9\u5171\u540c\u6784\u6210\u4e00\u4e2a\u73af\u3002\u73af\u4e00\u5b9a\u662f\u53cc\u8fde\u901a\u7684\uff08\u4e00\u5b9a\u4e0d\u662f\u6865\uff09\uff0c\u4e0d\u5728\u73af\u5185\u7684\u8fb9\u4e00\u5b9a\u662f\u6865\u3002 \u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u603b\u7ed3\u4e3a\uff1a\u82e5\u8fb9(u,v)\uff0cdfn[u] < low[v]\uff08\u5373\u4e0d\u5728\u73af\u5185\uff09\uff0c\u5219\u4e3a\u6865\u3002 \u53e6\u5916\u6709\u5b9a\u7406\uff0c\u5f53\u628a\u8fb9\u7684\u53cc\u8fde\u901a\u5206\u652f\u7f29\u70b9\u540e\u5f62\u6210\u4e86\u4e00\u4e2a\u6709\u5411\u65e0\u73af\u56fe\uff0c\u53f6\u5b50\uff08\u5ea6\u4e3a1\u7684\u70b9\uff09\u7684\u4e2a\u6570\u4e3an\uff0c\u5219\u9700\u8981\u5728\u539f\u56fe\u4e2d\u6dfb\u52a0(n + 1)/2\u6761\u8fb9\uff0c\u53ef\u4ee5\u4f7f\u539f\u56fe\u53d8\u4e3a\u6ca1\u6709\u6865\u7684\u53cc\u8fde\u901a\u56fe\u3002 \u6c42\u5272\u70b9\u9664\u4e86tarjan\u7b97\u6cd5\uff0c\u8fd8\u6709\u4e00\u79cdO(n^2)\u7684\u7b97\u6cd5\uff0c\u5c31\u662f\u5206\u522b\u628a\u6bcf\u4e2a\u70b9\u4f5c\u4e3a\u6839\uff0c\u8fdb\u884cdfs\uff0c\u770b\u6839\u6709\u51e0\u4e2a\u5b50\u7ed3\u70b9\uff0c\u5982\u679c\u5927\u4e8e\u4e00\u4e2a\u5219\u4e3a\u5272\u70b9\u5426\u5219\u4e0d\u662f\u5272\u70b9\u3002 \u6211\u4eec\u6b63\u5e38\u7684\u505a\u6cd5\u662f\u6c42\u6865\uff0c\u5220\u6865\uff0c\u6c42\u8fde\u901a\u5206\u652f\uff0c\u7f29\u70b9\uff0c\u6784\u5efa\u65b0\u56fe\uff0c\u6c42\u53f6\u5b50\u6570\u3002 \u6c42\u8fb9\u5f97\u53cc\u8fde\u901a\u5206\u652f\u7684\u65b9\u6cd5 \u6211\u4eec\u6b63\u5e38\u7684\u505a\u6cd5\u662f\u6c42\u6865\uff0c\u5220\u6865\uff0c\u6c42\u8fde\u901a\u5206\u652f\u3002 \u6211\u4eec\u6709\u4e00\u79cd\u7b80\u4fbf\u65b9\u6cd5\u3002\u9700\u8981\u5bf9tarjan\u7b97\u6cd5\u505a\u4e00\u4e9b\u53d8\u5316\u3002\u6211\u4eec\u4e4b\u524d\u89c4\u5b9alow[u]\u662f\u5176\u5b50\u5b59\u901a\u8fc7\u4e00\u6761\u8fd4\u7956\u8fb9\u76f4\u63a5\u5230\u8fbe\u7684\u70b9\uff0c\u628a\u8fd9\u4e2a\u6539\u6210\u662f\u5176\u5b50\u5b59\u53ef\u4ee5\u8fde\u7eed\u901a\u8fc7\u591a\u6761\u8fd4\u7956\u8fb9\u6240\u80fd\u5230\u8fbe\u7684\u70b9\u3002\u90a3\u4e48low[u]=min(low[v],dfn[u]); \u8fd9\u6837\u505a\u7684\u7f3a\u9677\u662f\uff0c\u4e0d\u80fd\u6c42\u5272\u70b9\u4e86\uff0c\u591a\u6b21\u8fd4\u7956\u4f1a\u5bfc\u81f4\u6c42\u5272\u70b9\u7684\u9519\u8bef\uff0c\u5728\u591a\u73af\u4e24\u4e24\u4ee5\u5355\u4e2a\u70b9\u76f8\u8fde\u6392\u6210\u4e00\u6761\u7ebf\uff0c\u4e14\u6bcf\u4e24\u4e2a\u8fde\u63a5\u70b9\u95f4\u53ea\u6709\u4e00\u6761\u8fb9\u7684\u60c5\u51b5\u4e2d\uff0c\u90a3\u4e9b\u8fde\u63a5\u70b9\u672c\u5e94\u662f\u5272\u70b9\uff0c\u4f46\u662f\u5728dfs\u8fc7\u7a0b\u4e2d\uff0c\u8fd9\u4e9b\u8fde\u63a5\u70b9\u4e4b\u95f4\u7684\u8fb9\u53c8\u6070\u597d\u4e0d\u662f\u6811\u679d\u8fb9\u7684\u8bdd\uff0clow[u]\u53ef\u80fd\u4f1a\u901a\u8fc7\u591a\u6b21\u8fd4\u7956,\u4ece\u4e00\u4e2a\u5272\u70b9\u4e0d\u65ad\u7684\u7ecf\u8fc7\u8fd9\u4e9b\u5272\u70b9\u5230\u8fbe\u6700\u4e0a\u8fb9\u7684\u5272\u70b9\u624d\u8bb0\u5f55\u4e0blow[u]\u3002 \u8fd9\u6837\u4e2d\u95f4\u7684\u5272\u70b9\u5c31\u90fd\u4e0d\u7b26\u5408dfn(u)<=low[v]\u4e86\u3002 \u4f46\u662f\u8fd9\u6837\u505a\u6709\u4e00\u4e2a\u597d\u5904\uff0c\u5c31\u662f\u6240\u6709\u7684\u5bf9\u4e8e\u8fb9\u7684\u53cc\u8fde\u901a\u5206\u652f\u90fd\u4ee5low\u6807\u8bb0\u51fa\u6765\u4e86\uff0c\u5373\u5c5e\u4e8e\u540c\u4e00\u53cc\u8fde\u901a\u5206\u652f\u7684\u6240\u6709\u70b9\u7684low\u90fd\u7b49\u4e8e\u540c\u4e00\u4e2a\u503c\u3002\u56e0\u4e3a\u5728\u4e0d\u9047\u5230\u6865\u7684\u60c5\u51b5\u4e0b\uff0clow\u53ef\u4ee5\u8fd4\u7956\u5230\u8be5\u8fde\u540c\u5206\u652f\u5728\u904d\u5386\u6811\u4e2d\u7684\u6700\u9ad8\u70b9\uff08dfn\u6700\u5c0f\u7684\u70b9\uff09\u3002 \u8fd9\u6837\u5c31\u76f8\u5f53\u4e8e\u6574\u7406\u51fa\u4e86\u6240\u6709\u7684\u5bf9\u4e8e\u8fb9\u7684\u53cc\u8fde\u901a\u5206\u652f\u3002\u63a5\u4e0b\u6765\u8ba1\u7b97\u65b0\u56fe\u4e2d\u6bcf\u4e2a\u70b9\u7684\u5ea6\uff0c\u6211\u4eec\u76f4\u63a5\u904d\u5386\u6240\u6709\u7684\u8fb9\uff0c\u89c2\u5bdf\u8fb9\u7684\u4e24\u7aef\u70b9\u662f\u5426\u5c5e\u4e8e\u540c\u4e00\u5206\u652f\uff0c\u82e5\u4e0d\u5c5e\u4e8e\u5219\u628a\u4e24\u70b9\u5728\u65b0\u56fe\u4e2d\u7684\u5ea6\u6570+1\u3002\u7136\u540e\u770b\u6709\u591a\u5c11\u4e2a\u5ea6\u6570\u4e3a1\u7684\u70b9\uff08\u5373\u53f6\u5b50\u6570\uff09\uff0c\u518d\u901a\u8fc7\u516c\u5f0f\u8ba1\u7b97\u5373\u53ef\u3002 \u6c42\u70b9\u53cc\u8fde\u901a\u5206\u652f\u7684\u65b9\u6cd5 \u9996\u5148\uff0c\u7528tarjan\u7b97\u6cd5\uff0cdfs\u904d\u5386\u5168\u56fe\uff0c\u7528dfs_dep\u6570\u7ec4\u8bb0\u5f55\u6bcf\u4e2a\u70b9\u5728\u904d\u5386\u8fc7\u7a0b\u4e2d\u7684\u6df1\u5ea6\uff0c\u7528low_point\u6570\u7ec4\u8bb0\u5f55\u6bcf\u4e2a\u70b9\u7684\u90bb\u5c45\u4e2d\uff08\u4e0d\u5305\u62ec\u7236\u4eb2\uff09\u6df1\u5ea6\u6700\u6d45\u7684\u8282\u70b9\uff0c\u628a\u904d\u5386\u8fc7\u7a0b\u4e2d\u6240\u6709\u6811\u679d\u8fb9\u5165\u6808\u3002\u6211\u4eec\u5728\u904d\u5386\u8fc7\u7a0b\u4e2d\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u8282\u70b9u\uff0c\u5982\u679c\u5728\u904d\u5386\u5b8c\u6210\u5b83\u7684\u67d0\u5b50\u8282\u70b9v\u4e4b\u540e\uff0c\u53d1\u73b0low_point[v]==dfs_dep[u]\u5219\u8bf4\u660eu\u4e0ev\u53ca\u5176\u5b50\u5b59\u6784\u6210\u4e00\u4e2a\u70b9\u53cc\u8fde\u901a\u5206\u91cf\uff0c\u6211\u4eec\u4e0d\u505c\u5f39\u6808\u76f4\u5230\u8fb9(u,v)\u88ab\u5f39\u51fa\uff0c\u548c\u8fd9\u4e9b\u8fb9\u76f8\u5173\u7684\u70b9\u6784\u6210\u4e00\u4e2a\u70b9\u53cc\u8fde\u901a\u5206\u91cf\u3002\u5f53\u6211\u4eec\u904d\u5386\u5b8c\u70b9u\u7684\u6240\u6709\u5b50\u5b59\u4e4b\u540e\uff0c\u82e5\u53d1\u73b0low_point[u]==dfs_dep[u]\uff0c\u5219\u8bf4\u660eu\u4e0d\u4f1a\u518d\u4e0e\u5176\u7956\u5b97\u8282\u70b9\u6784\u6210\u70b9\u53cc\u8fde\u901a\u5206\u91cf\uff0c\u4f46\u6b64\u65f6\u8fd8\u6709\u4e00\u6761u\u7684\u7236\u4eb2\u548cu\u7684\u8fde\u8fb9\u5b58\u5728\u4e8e\u6808\u9876\uff0c\u6211\u4eec\u8981\u628a\u5b83\u5f39\u51fa\u5e76\u4e22\u5f03\u3002 \u65e0\u5411\u56fe\u7684\u6700\u5c0f\u5272 stoer_wagner\u7b97\u6cd5 \u6bcf\u6b21\u4ece0\u70b9\u5f00\u59cb\uff0c\u8fdb\u884c\u4e00\u79cd\u7c7b\u4f3c\u4e8e\u6700\u5927\u751f\u6210\u6811\u7684\u64cd\u4f5c\uff0c\u552f\u4e00\u4e0e\u6700\u5927\u751f\u6210\u6811\u7684\u533a\u522b\u5c31\u662f\u5728\u9009\u62e9\u628a\u54ea\u4e2a\u70b9\u52a0\u8fdb\u6765\u7684\u65f6\u5019\uff0c\u4e0d\u662f\u6839\u636e\u8fde\u5230\u5b83\u7684\u8fb9\u7684\u957f\u5ea6\uff0c\u800c\u662f\u6839\u636e\u5b83\u5230\u6811\u7684\u6240\u6709\u8fb9\u7684\u957f\u5ea6\u548c\u3002\u7136\u540e\u8bb0\u5f55\u6700\u540e\u4e24\u4e2a\u8fdb\u6811\u7684\u70b9\u5408\u5e76\uff08\u7f29\u70b9\uff09\uff0c\u5e76\u7528\u8fd9\u4e24\u70b9\u95f4\u7684\u5272\u6765\u66f4\u65b0\u6700\u5c0f\u503c\u3002\u7136\u540e\u4e0d\u65ad\u91cd\u590d\u6b64\u64cd\u4f5c\uff08\u751f\u6210\u6811\u3001\u7f29\u70b9\u3001\u6700\u5c0f\u503c\uff09\uff0c\u76f4\u5230\u6240\u6709\u70b9\u90fd\u7f29\u4e3a1\u70b9\u3002 \u6811\u5f62\u56fe\u4e2d\u7684\u6700\u957f\u8def \u6c42\u6811\u5f62\u56fe\u4e2d\u6700\u957f\u8def\u7684\u65b9\u6cd5\uff1a\u4efb\u9009\u4e00\u7ed3\u70b9\u4e3a\u6839\uff0c\u627e\u6700\u6df1\u7ed3\u70b9\u3002\u5e76\u4ee5\u6700\u6df1\u7ed3\u70b9\u4e3a\u6839\uff0c\u627e\u6700\u6df1\u7ed3\u70b9\uff0c\u5176\u6df1\u5ea6\u5373\u4e3a\u6240\u6c42\u3002","title":"Graph Theory"},{"location":"competitive_programming/graph_theory/#graph-theory","text":"priority_queue\u7684bfs\u76f8\u5f53\u4e8e\u4f7f\u7528\u4e86dijkstra\u7684\u601d\u60f3\u3002 \u62d3\u6251\u5e8f\u53ef\u4ee5\u7528\u6765\u5224\u65ad\u56fe\u4e2d\u662f\u5426\u6709\u73af\uff0c\u65b9\u6cd5\u662f\u5728BFS\u4e4b\u540e\u770b\u662f\u5426\u6709\u5165\u5ea6\u4e0d\u4e3a0\u7684\u70b9\u3002","title":"Graph Theory"},{"location":"competitive_programming/graph_theory/#_1","text":"\u6c42\u5f3a\u8fde\u901a\u5206\u652f\u6709\u4e24\u79cd\u65b9\u6cd5\uff0ckorasaju\u548ctarjan\u3002 korasaju\u662f\u8fdb\u884c\u4e24\u6b21dfs\u8986\u76d6\u5168\u56fe\uff08\u5b9e\u9645\u4e0a\u662f\u4e24\u79cddfs\uff0c\u8986\u76d6\u5168\u56fe\u9700\u8981\u591a\u6b21dfs\uff09\uff0c\u7b2c\u4e00\u6b21\u7ed9\u7ed3\u70b9\u6807\u8d77\u59cb\u548c\u7ed3\u675f\u65f6\u95f4\uff0c\u7b2c\u4e8c\u6b21\u628a\u56fe\u53cd\u5411\u5e76\u4ece\u7ed3\u675f\u65f6\u95f4\u6700\u5927\u7684\u7ed3\u70b9\u5f00\u59cbdfs\uff0c\u6bcf\u6b21dfs\u6240\u80fd\u5230\u8fbe\u7684\u7ed3\u70b9\u4e3a\u4e00\u4e2a\u5f3a\u8fde\u901a\u5206\u652f\u3002\u4e0b\u9762\u6765\u7b80\u5355\u8bb2\u4e00\u4e0b\u4e3a\u4ec0\u4e48\u8fd9\u6837\u505a\u3002\u7b2c\u4e8c\u6b21dfs\u8fc7\u7a0b\u4e2d\u6bcf\u6b21dfs\u7684\u8d77\u70b9\u4e3a\u7ed3\u675f\u65f6\u95f4\u6700\u5927\u7684\u70b9\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u4fdd\u8bc1\u662f\u7b2c\u4e00\u6b21dfs\u4e2d\u7684\u67d0\u4e00\u68f5\u641c\u7d22\u6811\u7684\u6839\u8282\u70b9\u3002\u90a3\u4e48\u4ece\u4efb\u610f\u4e00\u4e2a\u7b2c\u4e00\u6b21dfs\u7684\u6839\u8282\u70b9\u5f00\u59cb\u7684\u5bf9\u53cd\u56fe\u7684dfs\u90fd\u4e0d\u53ef\u80fd\u8de8\u8d8a\u5230\u5728\u7b2c\u4e00\u6b21dfs\u4e2d\u6bd4\u8be5\u6839\u8282\u70b9\u66f4\u65e9\u7684\u641c\u7d22\u6811\u4e2d\u3002\u56e0\u4e3a\u5047\u8bbe\u80fd\u8de8\u8d8a\uff0c\u8bf4\u660e\u53cd\u56fe\u4e2d\u665a\u7684\u641c\u7d22\u6811\u6709\u6307\u5411\u66f4\u65e9\u641c\u7d22\u6811\u7684\u8fb9\uff0c\u5373\u539f\u56fe\u4e2d\u6709\u4ece\u66f4\u65e9\u641c\u7d22\u6811\u6307\u5411\u665a\u641c\u7d22\u6811\u7684\u8fb9\u3002\u90a3\u4e48\u665a\u641c\u7d22\u6811\u6839\u672c\u5c31\u4e0d\u4f1a\u5355\u72ec\u6210\u6811\uff0c\u4e0e\u4e4b\u524d\u5047\u8bbe\u77db\u76fe\u3002\u8fd9\u6837\u5c31\u4fdd\u8bc1\u4e86\u7b2c\u4e8c\u6b21dfs\u8fc7\u7a0b\u4e2d\u6bcf\u6b21dfs\u53ea\u53ef\u80fd\u5728\u7b2c\u4e00\u6b21\u7684\u67d0\u4e00\u68f5\u5b50\u6811\u4e2d\u8fdb\u884c\uff0c\u4e0d\u53ef\u80fd\u8de8\u6811\u641c\u7d22\u3002\u7b2c\u4e8c\u6b21\u80fd\u6839u\u641c\u5230\u7684\u70b9v\uff0c\u8bf4\u660e\u539f\u56fe\u4e2dv\u53ef\u4ee5\u5230\u8fbeu\uff0c\u800c\u7b2c\u4e00\u6b21v\u4e00\u5b9a\u662fu\u6811\u4e2d\u7684\u7ed3\u70b9\uff0c\u4e5f\u5c31\u662f\u8bf4u\u53ef\u5230\u8fbev,\u4ece\u800c\u4e00\u5b9a\u80fd\u5f62\u6210\u5f3a\u8fde\u901a\u5206\u652f\u3002 tarjan\u7b97\u6cd5\u5219\u662f\u5229\u7528\u4e00\u6b21dfs\uff0c\u6574\u4e2a\u8fc7\u7a0b\u4e2d\u5bf9\u6bcf\u4e2a\u7ed3\u70b9\u8bb0\u5f55\u4e24\u4e2a\u503c\uff0cdfn[u]\u7ed3\u70b9\u7684\u8bbf\u95ee\u65f6\u95f4\uff0clow[u]\u7ed3\u70b9\u53ca\u5176\u5b50\u8282\u70b9\u6240\u80fd\u76f4\u63a5\u8bbf\u95ee\u5230\u7684\u7ed3\u70b9v\u4e2ddfn[v]\u7684\u6700\u5c0f\u503c\u3002\uff08\u8fd9\u91cc\u5355\u6b21\u8fd4\u7956\u548c\u591a\u6b21\u8fd4\u7956\u662f\u65e0\u6240\u8c13\u7684\uff09\u6bcf\u6b21\u628a\u8bbf\u95ee\u5230\u7684\u7ed3\u70b9\u5165\u6808\uff0c\u4e00\u65e6\u641c\u7d22\u5b8c\u67d0\u4e00\u7ed3\u70b9u\u7684\u6240\u6709\u5b50\u8282\u70b9\u540e\u53d1\u73b0low[u]==dfn[u]\u5219\u5f39\u6808\u76f4\u5230u\u88ab\u5f39\u51fa\uff0c\u6b64\u8fc7\u7a0b\u5f39\u51fa\u7684\u70b9\u4e3a\u4e00\u4e2a\u5f3a\u8fde\u901a\u5206\u652f\u3002\u8fd9\u6837\u4e5f\u5c31\u4fdd\u8bc1\u4e86\uff0c\u6808\u4e2d\u6240\u6709\u7ed3\u70b9\u90fd\u662f\u53ef\u4ee5\u5230\u8fbe\u67d0\u4e00\u7236\u8282\u70b9\u7684\uff0c\u4e5f\u5c31\u662f\u8bf4\u4e00\u65e6\u67d0\u4e2a\u70b9\u53ef\u4ee5\u5230\u8fbe\u6808\u4e2d\u67d0\u4e2a\u70b9\uff0c\u5b83\u4e00\u5b9a\u53ef\u4ee5\u5230\u8fbe\u67d0\u7236\u8282\u70b9\u3002","title":"\u5f3a\u8fde\u901a\u5206\u652f"},{"location":"competitive_programming/graph_theory/#2-sat","text":"\u6709n\u7ec4\u5143\u7d20\uff0c\u6bcf\u7ec4\u4e24\u4e2a\uff0c\u4ece\u4e2d\u9009\u51fan\u4e2a\uff0c\u6bcf\u7ec4\u9009\u4e14\u53ea\u9009\u4e00\u4e2a\u3002\u8fd92n\u4e2a\u5143\u7d20\u4e2d\u6709\u4e9b\u5143\u7d20\u4e4b\u95f4\u6709\u77db\u76fe\u5173\u7cfb\uff0c\u8981\u6c42\u9009\u51fa\u7684n\u4e2a\u5143\u7d20\u4e2d\uff0c\u4efb\u610f\u4e24\u4e2a\u4e4b\u95f4\u90fd\u4e0d\u5b58\u5728\u77db\u76fe\u3002\u95ee\u662f\u5426\u5b58\u5728\u6ee1\u8db3\u6761\u4ef6\u7684\u9009\u53d6\u65b9\u6848\u3002\u8fd9\u5c31\u662f2-sat\u95ee\u9898\u3002\u89e3\u51b3\u65b9\u6cd5\u5982\u4e0b\uff0c\u4f8b\u5982a,b\u4e00\u7ec4\uff0cc,d\u4e00\u7ec4\uff0ca,c\u6709\u77db\u76fe\uff0c\u90a3\u4e48\u9009a\u5219\u4e0d\u80fd\u9009c\uff0c\u4e0d\u9009c\u5219\u5fc5\u987b\u9009d\u3002\u6240\u4ee5\u9009a\u5c31\u5fc5\u987b\u9009d\u3002\u540c\u7406\u9009c\u5c31\u5fc5\u987b\u9009b\u3002\u6211\u4eec\u5f15\u4e24\u6761\u8fb9\uff0ca->d, c->b\u3002\u5bf9\u4e8e\u6240\u6709\u7684\u77db\u76fe\u90fd\u7528\u7c7b\u4f3c\u7684\u65b9\u5f0f\u52a0\u8fb9\u3002\u8fd9\u6837\u53ea\u8981\u4ecex\u70b9\u53ef\u4ee5\u8d70\u5230y\u70b9\uff0c\u90a3\u4e48\u9009x\u70b9\u5c31\u5fc5\u987b\u9009y\u70b9\u3002\u7136\u540e\u5bf9\u5168\u56fe\u6c42\u5f3a\u8fde\u901a\u5206\u652f\u3002\u5728\u4e00\u4e2a\u5f3a\u8fde\u901a\u5206\u652f\u4e2d\uff0c\u9009\u4e86\u4e00\u4e2a\u70b9\uff0c\u5219\u5fc5\u987b\u9009\u5f3a\u8fde\u901a\u5206\u652f\u4e2d\u7684\u6240\u6709\u70b9\u3002\u5982\u679c\u6709\u67d0\u4e24\u4e2a\u70b9\u5c5e\u4e8e\u540c\u4e00\u7ec4\uff0c\u4e14\u5c5e\u4e8e\u540c\u4e00\u4e2a\u5f3a\u8fde\u901a\u5206\u652f\uff0c\u5219\u5fc5\u7136\u65e0\u89e3\uff0c\u5426\u5219\u6709\u89e3\u3002\u4e3a\u4ec0\u4e48\u5426\u5219\u5fc5\u7136\u6709\u89e3\u5462\uff1f\u5047\u8bbe\u65e0\u73af\u4ecd\u65e0\u89e3\u3002\u90a3\u4e48\u4e0d\u59a8\u8bbe\u7531a\u7ecf\u8fc7\u5f88\u591a\u70b9\u6700\u7ec8\u8d70\u5411b\uff08ab\u5728\u540c\u4e00\u7ec4\uff09\u5bfc\u81f4\u4e86\u65e0\u89e3\u3002\u56e0\u4e3a\u539f\u56fe\u5177\u6709\u5bf9\u79f0\u6027\u548c\u4f20\u9012\u6027\uff0c\u90a3\u4e48b\u5fc5\u7136\u4e5f\u80fd\u8d70\u5230a\uff0c\u6240\u4ee5\u5c31\u6210\u4e86\u73af\uff0c\u4e0e\u5047\u8bbe\u77db\u76fe\u3002\u6240\u4ee5\u5047\u8bbe\u4e0d\u6210\u7acb\u3002","title":"2-sat\u95ee\u9898"},{"location":"competitive_programming/graph_theory/#_2","text":"1.\u5b9a\u7406\uff1a\u65e0\u5411\u56feG\u6709\u6b27\u62c9\u901a\u8def\u7684\u5145\u5206\u5fc5\u8981\u6761\u4ef6\u662fG\u4e3a\u8fde\u901a\u56fe\uff0c\u5e76\u4e14G\u4ec5\u6709\u4e24\u4e2a\u5947\u5ea6\u7ed3\u70b9\u6216\u8005\u65e0\u5947\u5ea6\u7ed3\u70b9\u3002 \uff081\uff09\u5f53G\u662f\u4ec5\u6709\u4e24\u4e2a\u5947\u5ea6\u7ed3\u70b9\u7684\u8fde\u901a\u56fe\u65f6\uff0cG\u7684\u6b27\u62c9\u901a\u8def\u5fc5\u4ee5\u6b64\u4e24\u4e2a\u7ed3\u70b9\u4e3a\u7aef\u70b9\u3002 \uff082\uff09\u5f53G\u662f\u65e0\u5947\u5ea6\u7ed3\u70b9\u7684\u8fde\u901a\u56fe\u65f6\uff0cG\u5fc5\u6709\u6b27\u62c9\u56de\u8def\u3002 2.\u4e00\u4e2a\u6709\u5411\u56feD\u5177\u6709\u6b27\u62c9\u901a\u8def\uff0c\u5f53\u4e14\u4ec5\u5f53D\u662f\u8fde\u901a\u7684\uff0c\u4e14\u9664\u4e86\u4e24\u4e2a\u9876\u70b9\u5916\uff0c\u5176\u4f59\u9876\u70b9\u7684\u5165\u5ea6\u5747\u7b49\u4e8e\u51fa\u5ea6\uff0c\u8fd9\u4e24\u4e2a\u7279\u6b8a\u7684\u9876\u70b9\u4e2d\uff0c\u4e00\u4e2a\u9876\u70b9\u7684\u5165\u5ea6\u6bd4\u51fa\u5ea6\u5927\uff11\uff0c\u53e6\u4e00\u4e2a\u9876\u70b9\u7684\u5165\u5ea6\u6bd4\u51fa\u5ea6\u5c0f\uff11\uff0e\u63a8\u8bba\uff1a\u4e00\u4e2a\u6709\u5411\u56feD\u662f\u6b27\u62c9\u56fe\uff08\u5177\u6709\u6b27\u62c9\u56de\u8def\uff09\uff0c\u5f53\u4e14\u4ec5\u5f53D\u662f\u8fde\u901a\u7684\uff0c\u4e14\u6240\u6709\u9876\u70b9\u7684\u51fa\u5ea6\u7b49\u4e8e\u5165\u5ea6\u3002","title":"\u6b27\u62c9\u8def\u5f84"},{"location":"competitive_programming/graph_theory/#_3","text":"\u5bf9\u5168\u56fe\u8fdb\u884cdfs\uff0c\u4ece\u89c4\u5b9a\u8d77\u70b9\u5f00\u59cb\u3002\u8fc7\u7a0b\u4e2d\u8bb0\u5f55\u7ecf\u8fc7\u4e86\u54ea\u4e9b\u8fb9\uff0c\u4ee5\u4fdd\u8bc1\u6bcf\u6761\u8fb9\u53ea\u7ecf\u8fc7\u4e00\u6b21\u3002\u5f53\u4e00\u4e2a\u70b9\u7684\u6240\u6709\u8fb9\u90fd\u904d\u5386\u5b8c\u6210\u540e\uff0c\u628a\u8be5\u70b9\u5165\u6808\u3002\u6700\u540e\u4f9d\u6b21\u5f39\u6808\u5f97\u5230\u7684\u5c31\u662f\u6b27\u62c9\u8def\u5f84\u3002\u88ab\u5165\u6808\u7684\u70b9\u90fd\u662f\u8d70\u6295\u65e0\u8def\u7684\u70b9\uff0c\u5982\u679c\u5b58\u5728\u6b27\u62c9\u8def\u5f84\uff0c\u7b2c\u4e00\u6b21\u51fa\u73b0\u7684\u8d70\u6295\u65e0\u8def\u4e00\u5b9a\u662f\u5728\u8d70\u56de\u5230\u8d77\u70b9\u65f6\uff0c\u56e0\u4e3a\u5176\u4ed6\u60c5\u51b5\u65e0\u8bba\u600e\u4e48\u8d70\u53ea\u53ef\u80fd\u7565\u8fc7\u4e00\u4e9b\u8fb9\uff0c\u800c\u4e0d\u53ef\u80fd\u8d70\u8fdb\u6b7b\u8def\u3002","title":"\u6c42\u6b27\u62c9\u56de\u8def"},{"location":"competitive_programming/graph_theory/#_4","text":"\u5bf9\u4e8e\u4e00\u7ec4\u7c7b\u4f3c\u4e8exa-xb>=c\u7684\u4e0d\u7b49\u5f0f\u6c42\u662f\u5426\u6709\u6ee1\u8db3\u7684\u89e3\uff0c\u7528bellman\u6765\u89e3\uff0cbellman\u662f\u4f7f\u5f97dist[v] <= dist[u] + c\u3002 \u5dee\u5206\u7ea6\u675f\u662f\u4f7f\u5f97A-B>=C\u5373 B<=A+(-C)\u3002\u6240\u4ee5\u5bf9\u4e8e\u6bcf\u4e2a\u8fd9\u6837\u7684\u4e0d\u7b49\u5f0f\u6211\u4eec\u5c31\u4eceA\u5411B\u8fde\u4e00\u6761\u8fb9\u8fb9\u7684\u6743\u503c\u4e3a-C\u3002 \u89c2\u5bdf\u662f\u5426\u6709\u8d1f\u6743\u56de\u8def\uff0c\u6ca1\u6709\u5219\u6709\u89e3\uff0c\u6709\u5219\u65e0\u89e3\u3002\u6c42\u5f97\u7684\u6700\u77ed\u8def\u5373\u4e3a\u6700\u5927\u89e3\u3002\u5982\u679c\u9898\u76ee\u6ca1\u6709\u89c4\u5b9a\u6e90\u70b9\u7684\u503c\u53ef\u4ee5\u968f\u610f\uff0c\u5176\u4f59\u70b9\u521d\u59cb\u5316\u4e3a\u6b63\u65e0\u7a77\uff0c\u56e0\u4e3a\u5dee\u5206\u7ea6\u675f\u7684\u6761\u4ef6\u5c31\u662f\u5404\u4e2a\u6570\u5b57\u4e4b\u95f4\u7684\u5dee\u8981\u6ee1\u8db3\u67d0\u4e9b\u6761\u4ef6\u3002\u5e76\u6ca1\u6709\u89c4\u5b9a\u67d0\u4e2a\u6570\u5b57\u7684\u786e\u5b9a\u503c\uff0c\u6240\u4ee5\u7ecf\u8fc7\u6700\u77ed\u8def\u8fd0\u7b97\u540e\u4e5f\u53ea\u80fd\u5f97\u5230\u76f8\u5bf9\u503c\u3002 \u7528spfa\u505a\u5dee\u5206\u7ea6\u675f\u3002\u4e0d\u80fd\u5411bellman\u4e00\u6837\u3002\u8fd8\u662f\u628a\u5dee\u5206\u7ea6\u675f\u7406\u89e3\u4e3a\u6c42\u6700\u957f\u8def\u6bd4\u8f83\u76f4\u89c2\u3002 \u5bf9\u4e8edist[a]-dist[b]>=c\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u4f5cdist[a]>=dist[b]+c\uff0c\u6240\u4ee5\u6211\u4eec\u5982\u679c\u521d\u59cb\u5316\u4e3a\u8d1f\u65e0\u7a77\uff0c\u8d77\u70b9\u521d\u59cb\u5316\u4e3a0\uff0c\u5e76\u8ba9\u6240\u6709\u7684\u4e0d\u7b49\u5f0f\u90fd\u6ee1\u8db3\uff0c\u90a3\u4e48\u5c31\u662f\u5728\u6c42\u4e00\u4e2a\u6700\u957f\u8def\u3002 spfa\u4e0d\u80fd\u5904\u7406\u975e\u8fde\u901a\u56fe\uff0c\u9700\u8981\u52a0\u5165\u8d85\u7ea7\u6e90\uff08\u4e00\u4e2a\u5230\u6240\u6709\u70b9\u90fd\u6709\u4e00\u6761\u957f\u5ea6\u4e3a0\u7684\u8fb9\u7684\u70b9\uff09\uff0c\u5e76\u628a\u8d85\u7ea7\u6e90\u4f5c\u4e3a\u8d77\u70b9\uff0c\u624d\u80fd\u4fdd\u8bc1\u5728\u6269\u5c55\u8fc7\u7a0b\u4e2d\u5230\u8fbe\u6bcf\u4e2a\u70b9\u3002\u5426\u5219\u5dee\u5206\u7ea6\u675f\u7cfb\u7edf\u7684\u90e8\u5206\u5185\u5bb9\u5c31\u4e0d\u4f1a\u88ab\u68c0\u6d4b\u5230\u3002 \u5dee\u5206\u7ea6\u675f\u7cfb\u7edf\u6709\u4e24\u79cd\u65b9\u5f0f\u53ef\u4ee5\u6c42\u89e3\uff0c\u6700\u77ed\u8def\u548c\u6700\u957f\u8def\u3002\u5f53\u6211\u4eec\u628a\u4e0d\u7b49\u5f0f\u6574\u7406\u6210d[a]+w<=d[b]\u65f6\uff0c\u6211\u4eec\u6c42\u6700\u957f\u8def\u3002\u6574\u7406\u6210d[a]+w>=d[b]\u65f6\uff0c\u6211\u4eec\u6c42\u6700\u77ed\u8def\u3002\u5f53\u6c42\u6700\u77ed\u8def\u65f6\uff0c\u6211\u4eec\u901a\u5e38\u8981\u628a\u5404\u70b9\u8ddd\u79bb\u521d\u59cb\u5316\u4e3a\u6b63\u65e0\u7a77\uff0c\u6c42\u6700\u77ed\u8def\uff0c\u628a\u5404\u70b9\u8ddd\u79bb\u9010\u6e10\u51cf\u5c0f\uff0c\u76f4\u5230\u7b26\u5408\u6240\u6709\u4e0d\u7b49\u5f0f\u3002\u4e5f\u5c31\u662f\u5f00\u59cb\u5404\u70b9\u4e0d\u7b26\u5408\u6761\u4ef6\uff0c\u540e\u6765\u901a\u8fc7\u51cf\u5c0f\u53d8\u5f97\u7b26\u5408\u4e86\uff0c\u6240\u4ee5\u4e00\u5b9a\u662f\u7b26\u5408\u6761\u4ef6\u7684\u6700\u5927\u503c\u3002\u65e2\u7136\u662f\u6c42\u6700\u5927\u503c\uff0c\u5e76\u4e14\u662f\u51cf\u5c0f\u5404\u70b9\u8ddd\u79bb\uff0c\u4e5f\u5c31\u662f\u628a\u5404\u70b9\u7531\u6570\u8f74\u7684\u53f3\u4fa7\u5411\u5de6\u4fa7\u62c9\uff0c\u6240\u4ee5\u6211\u4eec\u4e00\u5b9a\u8981\u9009\u62e9\u4e00\u4e2a\u6700\u7ec8\u5728\u6570\u8f74\u6700\u5de6\u4fa7\u7684\u70b9\uff0c\u5e76\u521d\u59cb\u5316\u4e3a0\uff0c\u628a\u6240\u6709\u6b63\u65e0\u7a77\u7684\u70b9\u62c9\u8fd1\u5230\u7b26\u5408\u4e0d\u7b49\u5f0f\u3002\u6700\u957f\u8def\u540c\u7406\u3002","title":"\u5dee\u5206\u7ea6\u675f\u7cfb\u7edf"},{"location":"competitive_programming/graph_theory/#_5","text":"\u53cc\u8fde\u901a\u5206\u652f\u5206\u5c31\u662f\u4e00\u4e2a\u6781\u5927\u5316\uff08\u4e00\u4e2a\u70b9\u53ea\u8981\u52a0\u8fdb\u6765\u4e4b\u540e\u8be5\u5206\u652f\u4ecd\u7136\u662f\u53cc\u8fde\u901a\u5206\u652f\u5c31\u52a0\u8fdb\u6765\uff09\u7684\u5206\u652f\uff0c\u53bb\u6389\u4efb\u610f\u4e00\u6761\u8fb9\u8fd9\u4e2a\u5206\u652f\u5185\u90e8\u4ecd\u7136\u8fde\u901a\u3002\u4e5f\u53ef\u4ee5\u7406\u89e3\u4e3a\u53bb\u6389\u6865\u4e4b\u540e\uff0c\u6bcf\u4e2a\u8fde\u901a\u5206\u652f\u5c31\u662f\u539f\u56fe\u7684\u53cc\u8fde\u901a\u5206\u652f\u3002 \u6ce8\u610f\uff1a\u5317\u5927\u57f9\u8bad\u4e2d\u8bf4\u6709\u4e24\u79cd\u53cc\u8fde\u901a\uff08\u8fb9\u7684\u548c\u70b9\u7684\uff09\uff0c\u5176\u5b9e\u53ea\u6709\u8fb9\u7684\u53cc\u8fde\u901a\u624d\u662f\u53cc\u8fde\u901a\u7684\u6b63\u89c4\u5b9a\u4e49\u3002\u6240\u4ee5\u6211\u4eec\u4e0d\u5bf9\u70b9\u7684\u53cc\u8fde\u901a\u8fdb\u884c\u8ba8\u8bba\u3002 \u6c42\u5272\u70b9\u548c\u6865\u53ef\u4ee5\u7528tarjan\u7b97\u6cd5\uff0c\u5bf9\u56fe\u8fdb\u884cdfs\uff0c\u8bb0\u5f55\u6bcf\u4e2a\u70b9\u7684\u7b2c\u4e00\u6b21\u5230\u8fbe\u65f6\u95f4dfn[i]\u3002\u5e76\u8bb0\u5f55\u4e00\u4e2alow[i]\u8868\u793a\u8be5\u70b9\u53ca\u5176\u5b50\u5b59\u7ed3\u70b9\u6240\u80fd\u5230\u8fbe\u7684dfn\u6700\u5c0f\u7684\u70b9\u3002\u8fd9\u4e2a\u5230\u8fbe\u5e76\u4e0d\u662f\u666e\u901a\u610f\u4e49\u7684\u5230\u8fbe\uff0c\u800c\u662f\u5728\u904d\u5386\u8fc7\u7a0b\u4e2d\uff0c\u901a\u8fc7\u975e\u6811\u679d\u8fb9\uff08\u4e00\u5b9a\u662f\u8fd4\u7956\u8fb9\uff0c\u56e0\u4e3a\u662f\u65e0\u5411\u56fe\uff0c\u6ca1\u6709\u6a2a\u53c9\u8fb9\uff09\u80fd\u591f\u76f4\u63a5\u5230\u8fbe\u7684\u70b9\uff08\u800c\u4e0d\u662f\u8fde\u7eed\u4f7f\u7528\u8fd4\u7956\u8fb9\u80fd\u5230\u8fbe\u7684\uff09\u3002\u8fd9\u6837\u5c31\u53ef\u4ee5\u628alow\u603b\u7ed3\u4e3alow[u] = min(low[v]\uff08v\u4e3au\u7684\u513f\u5b50\u7ed3\u70b9\uff09,dfn[v]\uff08v\u662fu\u901a\u8fc7\u8fd4\u7956\u8fb9\u80fd\u5230\u8fbe\u7684\u70b9\uff09,dfn(u)); \u7136\u540e\u6211\u4eec\u53ef\u4ee5\u7c97\u7565\u5730\u8ba4\u4e3a\u8fd4\u7956\u8fb9\u53ef\u4ee5\u8fde\u540c\u6811\u679d\u8fb9\u5171\u540c\u6784\u6210\u4e00\u4e2a\u73af\u3002\u73af\u4e00\u5b9a\u662f\u53cc\u8fde\u901a\u7684\uff08\u4e00\u5b9a\u4e0d\u662f\u6865\uff09\uff0c\u4e0d\u5728\u73af\u5185\u7684\u8fb9\u4e00\u5b9a\u662f\u6865\u3002 \u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u603b\u7ed3\u4e3a\uff1a\u82e5\u8fb9(u,v)\uff0cdfn[u] < low[v]\uff08\u5373\u4e0d\u5728\u73af\u5185\uff09\uff0c\u5219\u4e3a\u6865\u3002 \u53e6\u5916\u6709\u5b9a\u7406\uff0c\u5f53\u628a\u8fb9\u7684\u53cc\u8fde\u901a\u5206\u652f\u7f29\u70b9\u540e\u5f62\u6210\u4e86\u4e00\u4e2a\u6709\u5411\u65e0\u73af\u56fe\uff0c\u53f6\u5b50\uff08\u5ea6\u4e3a1\u7684\u70b9\uff09\u7684\u4e2a\u6570\u4e3an\uff0c\u5219\u9700\u8981\u5728\u539f\u56fe\u4e2d\u6dfb\u52a0(n + 1)/2\u6761\u8fb9\uff0c\u53ef\u4ee5\u4f7f\u539f\u56fe\u53d8\u4e3a\u6ca1\u6709\u6865\u7684\u53cc\u8fde\u901a\u56fe\u3002 \u6c42\u5272\u70b9\u9664\u4e86tarjan\u7b97\u6cd5\uff0c\u8fd8\u6709\u4e00\u79cdO(n^2)\u7684\u7b97\u6cd5\uff0c\u5c31\u662f\u5206\u522b\u628a\u6bcf\u4e2a\u70b9\u4f5c\u4e3a\u6839\uff0c\u8fdb\u884cdfs\uff0c\u770b\u6839\u6709\u51e0\u4e2a\u5b50\u7ed3\u70b9\uff0c\u5982\u679c\u5927\u4e8e\u4e00\u4e2a\u5219\u4e3a\u5272\u70b9\u5426\u5219\u4e0d\u662f\u5272\u70b9\u3002 \u6211\u4eec\u6b63\u5e38\u7684\u505a\u6cd5\u662f\u6c42\u6865\uff0c\u5220\u6865\uff0c\u6c42\u8fde\u901a\u5206\u652f\uff0c\u7f29\u70b9\uff0c\u6784\u5efa\u65b0\u56fe\uff0c\u6c42\u53f6\u5b50\u6570\u3002","title":"\u53cc\u8fde\u901a\u5206\u652f"},{"location":"competitive_programming/graph_theory/#_6","text":"\u6211\u4eec\u6b63\u5e38\u7684\u505a\u6cd5\u662f\u6c42\u6865\uff0c\u5220\u6865\uff0c\u6c42\u8fde\u901a\u5206\u652f\u3002 \u6211\u4eec\u6709\u4e00\u79cd\u7b80\u4fbf\u65b9\u6cd5\u3002\u9700\u8981\u5bf9tarjan\u7b97\u6cd5\u505a\u4e00\u4e9b\u53d8\u5316\u3002\u6211\u4eec\u4e4b\u524d\u89c4\u5b9alow[u]\u662f\u5176\u5b50\u5b59\u901a\u8fc7\u4e00\u6761\u8fd4\u7956\u8fb9\u76f4\u63a5\u5230\u8fbe\u7684\u70b9\uff0c\u628a\u8fd9\u4e2a\u6539\u6210\u662f\u5176\u5b50\u5b59\u53ef\u4ee5\u8fde\u7eed\u901a\u8fc7\u591a\u6761\u8fd4\u7956\u8fb9\u6240\u80fd\u5230\u8fbe\u7684\u70b9\u3002\u90a3\u4e48low[u]=min(low[v],dfn[u]); \u8fd9\u6837\u505a\u7684\u7f3a\u9677\u662f\uff0c\u4e0d\u80fd\u6c42\u5272\u70b9\u4e86\uff0c\u591a\u6b21\u8fd4\u7956\u4f1a\u5bfc\u81f4\u6c42\u5272\u70b9\u7684\u9519\u8bef\uff0c\u5728\u591a\u73af\u4e24\u4e24\u4ee5\u5355\u4e2a\u70b9\u76f8\u8fde\u6392\u6210\u4e00\u6761\u7ebf\uff0c\u4e14\u6bcf\u4e24\u4e2a\u8fde\u63a5\u70b9\u95f4\u53ea\u6709\u4e00\u6761\u8fb9\u7684\u60c5\u51b5\u4e2d\uff0c\u90a3\u4e9b\u8fde\u63a5\u70b9\u672c\u5e94\u662f\u5272\u70b9\uff0c\u4f46\u662f\u5728dfs\u8fc7\u7a0b\u4e2d\uff0c\u8fd9\u4e9b\u8fde\u63a5\u70b9\u4e4b\u95f4\u7684\u8fb9\u53c8\u6070\u597d\u4e0d\u662f\u6811\u679d\u8fb9\u7684\u8bdd\uff0clow[u]\u53ef\u80fd\u4f1a\u901a\u8fc7\u591a\u6b21\u8fd4\u7956,\u4ece\u4e00\u4e2a\u5272\u70b9\u4e0d\u65ad\u7684\u7ecf\u8fc7\u8fd9\u4e9b\u5272\u70b9\u5230\u8fbe\u6700\u4e0a\u8fb9\u7684\u5272\u70b9\u624d\u8bb0\u5f55\u4e0blow[u]\u3002 \u8fd9\u6837\u4e2d\u95f4\u7684\u5272\u70b9\u5c31\u90fd\u4e0d\u7b26\u5408dfn(u)<=low[v]\u4e86\u3002 \u4f46\u662f\u8fd9\u6837\u505a\u6709\u4e00\u4e2a\u597d\u5904\uff0c\u5c31\u662f\u6240\u6709\u7684\u5bf9\u4e8e\u8fb9\u7684\u53cc\u8fde\u901a\u5206\u652f\u90fd\u4ee5low\u6807\u8bb0\u51fa\u6765\u4e86\uff0c\u5373\u5c5e\u4e8e\u540c\u4e00\u53cc\u8fde\u901a\u5206\u652f\u7684\u6240\u6709\u70b9\u7684low\u90fd\u7b49\u4e8e\u540c\u4e00\u4e2a\u503c\u3002\u56e0\u4e3a\u5728\u4e0d\u9047\u5230\u6865\u7684\u60c5\u51b5\u4e0b\uff0clow\u53ef\u4ee5\u8fd4\u7956\u5230\u8be5\u8fde\u540c\u5206\u652f\u5728\u904d\u5386\u6811\u4e2d\u7684\u6700\u9ad8\u70b9\uff08dfn\u6700\u5c0f\u7684\u70b9\uff09\u3002 \u8fd9\u6837\u5c31\u76f8\u5f53\u4e8e\u6574\u7406\u51fa\u4e86\u6240\u6709\u7684\u5bf9\u4e8e\u8fb9\u7684\u53cc\u8fde\u901a\u5206\u652f\u3002\u63a5\u4e0b\u6765\u8ba1\u7b97\u65b0\u56fe\u4e2d\u6bcf\u4e2a\u70b9\u7684\u5ea6\uff0c\u6211\u4eec\u76f4\u63a5\u904d\u5386\u6240\u6709\u7684\u8fb9\uff0c\u89c2\u5bdf\u8fb9\u7684\u4e24\u7aef\u70b9\u662f\u5426\u5c5e\u4e8e\u540c\u4e00\u5206\u652f\uff0c\u82e5\u4e0d\u5c5e\u4e8e\u5219\u628a\u4e24\u70b9\u5728\u65b0\u56fe\u4e2d\u7684\u5ea6\u6570+1\u3002\u7136\u540e\u770b\u6709\u591a\u5c11\u4e2a\u5ea6\u6570\u4e3a1\u7684\u70b9\uff08\u5373\u53f6\u5b50\u6570\uff09\uff0c\u518d\u901a\u8fc7\u516c\u5f0f\u8ba1\u7b97\u5373\u53ef\u3002","title":"\u6c42\u8fb9\u5f97\u53cc\u8fde\u901a\u5206\u652f\u7684\u65b9\u6cd5"},{"location":"competitive_programming/graph_theory/#_7","text":"\u9996\u5148\uff0c\u7528tarjan\u7b97\u6cd5\uff0cdfs\u904d\u5386\u5168\u56fe\uff0c\u7528dfs_dep\u6570\u7ec4\u8bb0\u5f55\u6bcf\u4e2a\u70b9\u5728\u904d\u5386\u8fc7\u7a0b\u4e2d\u7684\u6df1\u5ea6\uff0c\u7528low_point\u6570\u7ec4\u8bb0\u5f55\u6bcf\u4e2a\u70b9\u7684\u90bb\u5c45\u4e2d\uff08\u4e0d\u5305\u62ec\u7236\u4eb2\uff09\u6df1\u5ea6\u6700\u6d45\u7684\u8282\u70b9\uff0c\u628a\u904d\u5386\u8fc7\u7a0b\u4e2d\u6240\u6709\u6811\u679d\u8fb9\u5165\u6808\u3002\u6211\u4eec\u5728\u904d\u5386\u8fc7\u7a0b\u4e2d\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u8282\u70b9u\uff0c\u5982\u679c\u5728\u904d\u5386\u5b8c\u6210\u5b83\u7684\u67d0\u5b50\u8282\u70b9v\u4e4b\u540e\uff0c\u53d1\u73b0low_point[v]==dfs_dep[u]\u5219\u8bf4\u660eu\u4e0ev\u53ca\u5176\u5b50\u5b59\u6784\u6210\u4e00\u4e2a\u70b9\u53cc\u8fde\u901a\u5206\u91cf\uff0c\u6211\u4eec\u4e0d\u505c\u5f39\u6808\u76f4\u5230\u8fb9(u,v)\u88ab\u5f39\u51fa\uff0c\u548c\u8fd9\u4e9b\u8fb9\u76f8\u5173\u7684\u70b9\u6784\u6210\u4e00\u4e2a\u70b9\u53cc\u8fde\u901a\u5206\u91cf\u3002\u5f53\u6211\u4eec\u904d\u5386\u5b8c\u70b9u\u7684\u6240\u6709\u5b50\u5b59\u4e4b\u540e\uff0c\u82e5\u53d1\u73b0low_point[u]==dfs_dep[u]\uff0c\u5219\u8bf4\u660eu\u4e0d\u4f1a\u518d\u4e0e\u5176\u7956\u5b97\u8282\u70b9\u6784\u6210\u70b9\u53cc\u8fde\u901a\u5206\u91cf\uff0c\u4f46\u6b64\u65f6\u8fd8\u6709\u4e00\u6761u\u7684\u7236\u4eb2\u548cu\u7684\u8fde\u8fb9\u5b58\u5728\u4e8e\u6808\u9876\uff0c\u6211\u4eec\u8981\u628a\u5b83\u5f39\u51fa\u5e76\u4e22\u5f03\u3002","title":"\u6c42\u70b9\u53cc\u8fde\u901a\u5206\u652f\u7684\u65b9\u6cd5"},{"location":"competitive_programming/graph_theory/#_8","text":"stoer_wagner\u7b97\u6cd5 \u6bcf\u6b21\u4ece0\u70b9\u5f00\u59cb\uff0c\u8fdb\u884c\u4e00\u79cd\u7c7b\u4f3c\u4e8e\u6700\u5927\u751f\u6210\u6811\u7684\u64cd\u4f5c\uff0c\u552f\u4e00\u4e0e\u6700\u5927\u751f\u6210\u6811\u7684\u533a\u522b\u5c31\u662f\u5728\u9009\u62e9\u628a\u54ea\u4e2a\u70b9\u52a0\u8fdb\u6765\u7684\u65f6\u5019\uff0c\u4e0d\u662f\u6839\u636e\u8fde\u5230\u5b83\u7684\u8fb9\u7684\u957f\u5ea6\uff0c\u800c\u662f\u6839\u636e\u5b83\u5230\u6811\u7684\u6240\u6709\u8fb9\u7684\u957f\u5ea6\u548c\u3002\u7136\u540e\u8bb0\u5f55\u6700\u540e\u4e24\u4e2a\u8fdb\u6811\u7684\u70b9\u5408\u5e76\uff08\u7f29\u70b9\uff09\uff0c\u5e76\u7528\u8fd9\u4e24\u70b9\u95f4\u7684\u5272\u6765\u66f4\u65b0\u6700\u5c0f\u503c\u3002\u7136\u540e\u4e0d\u65ad\u91cd\u590d\u6b64\u64cd\u4f5c\uff08\u751f\u6210\u6811\u3001\u7f29\u70b9\u3001\u6700\u5c0f\u503c\uff09\uff0c\u76f4\u5230\u6240\u6709\u70b9\u90fd\u7f29\u4e3a1\u70b9\u3002","title":"\u65e0\u5411\u56fe\u7684\u6700\u5c0f\u5272"},{"location":"competitive_programming/graph_theory/#_9","text":"\u6c42\u6811\u5f62\u56fe\u4e2d\u6700\u957f\u8def\u7684\u65b9\u6cd5\uff1a\u4efb\u9009\u4e00\u7ed3\u70b9\u4e3a\u6839\uff0c\u627e\u6700\u6df1\u7ed3\u70b9\u3002\u5e76\u4ee5\u6700\u6df1\u7ed3\u70b9\u4e3a\u6839\uff0c\u627e\u6700\u6df1\u7ed3\u70b9\uff0c\u5176\u6df1\u5ea6\u5373\u4e3a\u6240\u6c42\u3002","title":"\u6811\u5f62\u56fe\u4e2d\u7684\u6700\u957f\u8def"},{"location":"competitive_programming/hash/","text":"Hashing hash\u6570\u7ec4\u7684\u65b9\u6cd5\u662fret = ((ret << 2) + (a[i] >> 4)) ^ (a[i] << 10); hash\u4e00\u4e2a\u6570\u5217f\uff0c\u6570\u5217\u4e2d\u7684\u6bcf\u4e00\u4f4d\u90fd\u6709\u4e00\u4e2a\u4e0a\u9650g\uff0c\u5373f[i]<=g[i]\u3002\u90a3\u4e48\u53ef\u4ee5\u5c06\u8be5\u6570\u5217hash\u4e3a\u8fd9\u6837\u4e00\u4e2a\u6574\u6570\uff0c\u8fd9\u4e2a\u6574\u6570\u7684\u6bcf\u4e00\u4e2a\u4f4d\u7684\u8fdb\u5236\u90fd\u4e0d\u540c\uff0c\u7b2ci\u4f4d\u7684\u8fdb\u5236\u662fg[i] + 1\uff0c\u5373\u7b2ci\u4f4d\u6ee1g[i]+1\u5219\u53ef\u8fdb\u4f4d\u3002\uff08\u5f53\u7136\u7531\u4e8eg[i]\u662f\u8be5\u4f4d\u7684\u4e0a\u9650\uff0c\u6240\u4ee5\u6c38\u8fdc\u4e0d\u53ef\u80fd\u8fdb\u4f4d\uff09\u7528p[i]\u8868\u793a(g[0]+1) * (g[1]+1) * ... * (g[i - 1]+1)\u3002\u90a3\u4e48\u6700\u7ec8f\u88abhash\u7684\u7ed3\u679c\u662fp[0] * f[0]+p[1] * f[1]+...\u3002","title":"Hashing"},{"location":"competitive_programming/hash/#hashing","text":"hash\u6570\u7ec4\u7684\u65b9\u6cd5\u662fret = ((ret << 2) + (a[i] >> 4)) ^ (a[i] << 10); hash\u4e00\u4e2a\u6570\u5217f\uff0c\u6570\u5217\u4e2d\u7684\u6bcf\u4e00\u4f4d\u90fd\u6709\u4e00\u4e2a\u4e0a\u9650g\uff0c\u5373f[i]<=g[i]\u3002\u90a3\u4e48\u53ef\u4ee5\u5c06\u8be5\u6570\u5217hash\u4e3a\u8fd9\u6837\u4e00\u4e2a\u6574\u6570\uff0c\u8fd9\u4e2a\u6574\u6570\u7684\u6bcf\u4e00\u4e2a\u4f4d\u7684\u8fdb\u5236\u90fd\u4e0d\u540c\uff0c\u7b2ci\u4f4d\u7684\u8fdb\u5236\u662fg[i] + 1\uff0c\u5373\u7b2ci\u4f4d\u6ee1g[i]+1\u5219\u53ef\u8fdb\u4f4d\u3002\uff08\u5f53\u7136\u7531\u4e8eg[i]\u662f\u8be5\u4f4d\u7684\u4e0a\u9650\uff0c\u6240\u4ee5\u6c38\u8fdc\u4e0d\u53ef\u80fd\u8fdb\u4f4d\uff09\u7528p[i]\u8868\u793a(g[0]+1) * (g[1]+1) * ... * (g[i - 1]+1)\u3002\u90a3\u4e48\u6700\u7ec8f\u88abhash\u7684\u7ed3\u679c\u662fp[0] * f[0]+p[1] * f[1]+...\u3002","title":"Hashing"},{"location":"competitive_programming/interview/","text":"Interview Tips If you cannot finish all, try to achieve something complete by not implementing all the subroutines. Use the first 5 minutes to confirm the details of the problem interactively with the interviewer. When confirming the details, try to use the testing techniques to test the details of the problem definition. When testing, use CLEAN: corner cases, large cases, empty cases, average cases, negative cases. Ask for hints if you don't have the optimal solution., Google Docs Settings Tools -> Preference : Uncheck Automatically capitalize words and Use smart quotes . Change font to Roboto Mono .","title":"Interview Tips"},{"location":"competitive_programming/interview/#interview-tips","text":"If you cannot finish all, try to achieve something complete by not implementing all the subroutines. Use the first 5 minutes to confirm the details of the problem interactively with the interviewer. When confirming the details, try to use the testing techniques to test the details of the problem definition. When testing, use CLEAN: corner cases, large cases, empty cases, average cases, negative cases. Ask for hints if you don't have the optimal solution.,","title":"Interview Tips"},{"location":"competitive_programming/interview/#google-docs-settings","text":"Tools -> Preference : Uncheck Automatically capitalize words and Use smart quotes . Change font to Roboto Mono .","title":"Google Docs Settings"},{"location":"competitive_programming/java/","text":"Java Grammar java\u8f93\u51fa\u53ef\u4ee5\u4f7f\u7528 System.out.format(); \u8fd9\u4e2a\u7684\u4f7f\u7528\u65b9\u6cd5\u4e0e printf(); \u76f8\u540c\u3002 \u4f7f\u7528\u6587\u4ef6\u8f93\u5165\u8981\u629b\u51fa\u5f02\u5e38\u3002 public static void main ( String args [] ) throws FileNotFoundException Scanner cin = new Scanner ( new FileInputStream ( \"t.txt\" )); \u7528java,\u9ad8\u7cbe\u5ea6\u3002\u8bfb\u5165\u9ad8\u7cbe\u5ea6\u6570\u53ef\u4ee5\u76f4\u63a5\u7528 cin.nextBigInteger(); \u4f7f\u7528BigDecimal\u80fd\u5904\u7406\u8f93\u5165\u7684\u6570\u5b57\u524d\u7aef\u6709\uff0b\u53f7\u7684\u60c5\u51b5 java\u4e2dStringBuffer\u7c7b\u4f3c\u4e8eC++\u4e2d\u7684String\uff0cappend\u51fd\u6570\u53ef\u4ee5\u5728\u5176\u540e\u9762\u6dfb\u52a0\u5b57\u7b26\uff0creverse\u53ef\u4ee5\u53cd\u8f6c\u3002 java\u4e2dBigInteger\u7684intValue\u65b9\u6cd5\u53ef\u4ee5\u5c06\u5176\u8f6c\u4e3aint\u3002","title":"Java Grammar"},{"location":"competitive_programming/java/#java-grammar","text":"java\u8f93\u51fa\u53ef\u4ee5\u4f7f\u7528 System.out.format(); \u8fd9\u4e2a\u7684\u4f7f\u7528\u65b9\u6cd5\u4e0e printf(); \u76f8\u540c\u3002 \u4f7f\u7528\u6587\u4ef6\u8f93\u5165\u8981\u629b\u51fa\u5f02\u5e38\u3002 public static void main ( String args [] ) throws FileNotFoundException Scanner cin = new Scanner ( new FileInputStream ( \"t.txt\" )); \u7528java,\u9ad8\u7cbe\u5ea6\u3002\u8bfb\u5165\u9ad8\u7cbe\u5ea6\u6570\u53ef\u4ee5\u76f4\u63a5\u7528 cin.nextBigInteger(); \u4f7f\u7528BigDecimal\u80fd\u5904\u7406\u8f93\u5165\u7684\u6570\u5b57\u524d\u7aef\u6709\uff0b\u53f7\u7684\u60c5\u51b5 java\u4e2dStringBuffer\u7c7b\u4f3c\u4e8eC++\u4e2d\u7684String\uff0cappend\u51fd\u6570\u53ef\u4ee5\u5728\u5176\u540e\u9762\u6dfb\u52a0\u5b57\u7b26\uff0creverse\u53ef\u4ee5\u53cd\u8f6c\u3002 java\u4e2dBigInteger\u7684intValue\u65b9\u6cd5\u53ef\u4ee5\u5c06\u5176\u8f6c\u4e3aint\u3002","title":"Java Grammar"},{"location":"competitive_programming/network_flow/","text":"Network Flow \u6e10\u6e10\u5f00\u59cb\u7406\u89e3\u7f51\u7edc\u6d41\u7684\u9898\u578b\u4e86\uff0c\u662f\u4e00\u79cd\u53ef\u4ee5\u81ea\u7531\u5206\u914d\uff0c\u6c42\u6700\u4f18\u5206\u914d\u65b9\u6848\u7684\u9898\u3002 \u7531\u4e8e\u6700\u77ed\u8def\u7b97\u6cd5\u662f\u6700\u5c0f\u8d39\u7528\u6700\u5927\u6d41\u7b97\u6cd5\u7684\u5b50\u7b97\u6cd5\uff0c\u6240\u4ee5\u6709\u4e9b\u6700\u77ed\u8def\u7684\u9898\u53ef\u80fd\u8981\u7528\u5230\u6700\u5c0f\u8d39\u7528\u6700\u5927\u6d41\u3002 \u5728\u6700\u5c0f\u8def\u7ecf\u8986\u76d6\u4e2d\uff0c\u539f\u56fe\u7684\u90bb\u63a5\u77e9\u9635\u548c\u4e8c\u5206\u56fe\u5339\u914d\u7684\u90bb\u63a5\u77e9\u9635\u4e3a\u540c\u4e00\u77e9\u9635\u3002 \u5f53\u7f51\u7edc\u6d41\u7684\u8282\u70b9\u6570\u8fc7\u591a\u4e14\u53ef\u5206\u7c7b\u7684\u65f6\u5019\uff0c\u5e94\u601d\u8003\u662f\u5426\u53ef\u4ee5\u5206\u591a\u6b21\u8fdb\u884c\u6700\u5927\u6d41\u6765\u6c42\u89e3\u3002 \u6700\u5c0f\u5272 \u7f51\u7edc\u6d41\u7684\u6700\u5c0f\u5272\u95ee\u9898\uff0c\u770b\u5230\u5206\u914d\u6210\u4e24\u90e8\u5206\u7684\u9898\uff0c\u5c31\u8981\u60f3\u5230\u7f51\u7edc\u6d41\u6700\u5c0f\u5272\u3002\u6700\u5c0f\u5272\u5c31\u662f\u5c06\u539f\u56fe\u5212\u5206\u4e3a\u4e24\u90e8\u5206\uff0c\u4e00\u90e8\u5206\u5305\u542b\u6e90\uff0c\u4e00\u90e8\u5206\u5305\u542b\u6c47\u3002\u5272\u503c\u662f\u4e00\u90e8\u5206\u6307\u5411\u53e6\u4e00\u90e8\u5206\u7684\u8fb9\u7684\u521d\u59cb\u5bb9\u91cf\u7684\u603b\u548c\uff0c\u4e0d\u52a0\u4e0a\u53e6\u4e00\u90e8\u5206\u6307\u5411\u672c\u90e8\u5206\u7684\u8fb9\u7684\u5bb9\u91cf\u3002\u800c\u5bf9\u4e8e\u6700\u5c0f\u5272\u6765\u8bf4\uff0c\u6700\u5927\u6d41\u6d41\u91cf\u5c31\u662f\u6700\u5c0f\u5272\u7684\u5bb9\u91cf\u3002\u56e0\u4e3a\u5728\u6700\u5927\u6d41\u7684\u8fc7\u7a0b\u4e2d\u603b\u6709\u4e00\u4e9b\u8fb9\u6210\u4e3a\u6d41\u91cf\u7ee7\u7eed\u589e\u52a0\u7684\u74f6\u9888\uff0c\u800c\u8fd9\u4e9b\u8fb9\u4e00\u5b9a\u662f\u6d41\u6ee1\u7684\uff0c\u53ea\u8981\u5c06\u8fd9\u4e9b\u8fb9\u5272\u5f00\u5c31\u5fc5\u5b9a\u53ef\u4ee5\u963b\u65ad\u6240\u6709\u6d41\u3002\u6700\u5927\u6d41\u540e\u5206\u6790\u539f\u56fe\u5982\u4f55\u5212\u5206\u7684\u65b9\u6cd5\uff0c\u5c31\u662f\u5c06\u6700\u5927\u6d41\u540e\u6b8b\u4f59\u7f51\u7edc\u4e2ds\u53ef\u4ee5\u8d70\u5230\u7684\u70b9\u5212\u4e3as\u96c6\u5408\uff0c\u5176\u4f59\u70b9\u5212\u4e3at\u96c6\u5408\uff0c\u6ce8\u610f\uff0c\u4e0d\u662f\u53ef\u4ee5\u8d70\u5230t\u7684\u70b9\uff0c\u56e0\u4e3a\u6709\u53ef\u80fd\u6709\u4e00\u6761\u7ebf\u4e0a\u7684\u591a\u6761\u8fb9\u90fd\u6d41\u6ee1\u7684\u60c5\u51b5\uff0c\u8fd9\u79cd\u60c5\u51b5\u4e0b\u6709\u4e9b\u70b9\u5c31\u65e0\u6cd5\u8d70\u5230t\uff0c\u800c\u4e14s\u4e5f\u8d70\u4e0d\u5230\u5b83\u3002 \u6700\u5927\u6743\u95ed\u5408\u5b50\u56fe \u5bf9\u4e8e\u7f51\u7edc\u6d41\u6700\u5c0f\u5272\u7684\u5efa\u56fe\uff0c\u901a\u5e38\u5e76\u4e0d\u662f\u76f4\u63a5\u60f3\u5230\u6700\u5c0f\u5272\uff0c\u800c\u662f\u5148\u5efa\u7acb\u4e00\u4e2a\u7ed3\u70b9\u5e26\u6743\uff0c\u8fb9\u4e0d\u5e26\u6743\u7684\u56fe\uff0c\u5e76\u5bf9\u8be5\u56fe\u6c42\u6700\u5927\u6743\u95ed\u5408\u5b50\u56fe\u3002\u95ed\u5408\u5b50\u56fe\uff1a\u4ece\u56fe\u4e2d\u9009\u51fa\u82e5\u5e72\u4e2a\u70b9\uff0c\u53ca\u8fd9\u4e9b\u70b9\u76f8\u90bb\u7684\u8fb9\uff0c\u82e5\u6240\u6709\u8fb9\u7684\u7aef\u70b9\u90fd\u662f\u88ab\u9009\u51fa\u7684\u70b9\uff0c\u5219\u8be5\u5b50\u56fe\u4e3a\u95ed\u5408\u5b50\u56fe\u3002\u4e3a\u6c42\u6700\u5927\u6743\u95ed\u5408\u5b50\u56fe\u800c\u628a\u95ee\u9898\u8f6c\u5316\u4e3a\u7f51\u7edc\u6d41\u7684\u6700\u5c0f\u5272\u3002\u8f6c\u5316\u7684\u5177\u4f53\u65b9\u6cd5\u662f\uff0c\u628a\u6240\u6709\u7ed3\u70b9\u5230\u7ed3\u70b9\u7684\u8fb9\u90fd\u8bbe\u7f6e\u4e3a\u5bb9\u91cf\u4e3a\u6b63\u65e0\u7a77\u7684\u8fb9\uff0c\u5e76\u4ece\u6e90\u5f15\u8fb9\u5230\u6743\u503c\u4e3a\u6b63\u7684\u7ed3\u70b9\uff0c\u8fb9\u7684\u5bb9\u91cf\u4e3a\u70b9\u7684\u6743\u503c\u3002\u4ece\u6743\u503c\u4e3a\u8d1f\u7684\u70b9\u5f15\u8fb9\u5230\u6c47\uff0c\u8fb9\u7684\u5bb9\u91cf\u4e3a\u7ed3\u70b9\u6743\u503c\u7684\u76f8\u53cd\u6570\u3002 \u7f51\u7edc\u6d41\u7684\u6700\u5c0f\u5272\u5bf9\u5e94\u7740\u6700\u5927\u6743\u95ed\u5408\u5b50\u56fe\uff0c\u8fd9\u4e2a\u95ed\u5408\u5b50\u56fe\u662f\u6240\u6709\u5272\u540e\u6e90\u70b9\u80fd\u5230\u8fbe\u7684\u6240\u6709\u70b9\u3002\u800c\u8fd9\u4e2a\u95ed\u5408\u5b50\u56fe\u7684\u6743\u5c31\u7b49\u4e8e\u539f\u56fe\u4e2d\u6240\u6709\u6b63\u6743\u70b9\u7684\u6743\u548c\u51cf\u53bb\u6700\u5c0f\u5272\u3002\u4e00\u4e2a\u6b63\u6743\u70b9\u7684\u8fb9\u88ab\u5272\uff0c\u5219\u5176\u80fd\u5230\u8fbe\u7684\u8d1f\u6743\u70b9\u4e0d\u5fc5\u56e0\u4e3a\u5b83\u88ab\u5272\uff0c\u82e5\u6b63\u6743\u70b9\u4e0d\u88ab\u5272\uff0c\u5219\u5176\u80fd\u5230\u8fbe\u7684\u8d1f\u6743\u70b9\u5fc5\u987b\u88ab\u5272\uff0c\u5426\u5219\u56fe\u8fde\u901a\u3002\u6ca1\u88ab\u5272\u7684\u6b63\u6743\u70b9\u548c\u88ab\u5272\u7684\u8d1f\u6743\u70b9\u5fc5\u7136\u7ec4\u6210\u4e00\u4e2a\u95ed\u5408\u5b50\u56fe\u3002\u6240\u4ee5\u6bcf\u79cd\u5272\u6cd5\u90fd\u5bf9\u5e94\u7740\u4e00\u4e2a\u95ed\u5408\u5b50\u56fe\u3002\u88ab\u5272\u6389\u7684\u8fb9\u5bf9\u5e94\u7684\u70b9\u6709\u4e24\u79cd\uff0c\u4e00\u79cd\u662f\u6ca1\u6709\u88ab\u9009\u4e2d\u7684\u6b63\u6743\u70b9\uff0c\u53e6\u4e00\u79cd\u662f\u88ab\u9009\u4e2d\u4e86\u7684\u8d1f\u6743\u70b9\u3002\u6211\u4eec\u7528\u6b63\u6743\u548c\u51cf\u53bb\u6700\u5c0f\u5272\u5f97\u5230\u7684\u662f\uff0c\u88ab\u9009\u4e2d\u7684\u6b63\u6743\u70b9\u51cf\u53bb\u88ab\u9009\u4e2d\u7684\u8d1f\u6743\u70b9\u7684\u6743\u503c\uff08\u7edd\u5bf9\u503c\uff09\u3002\u51cf\u6570\u8d8a\u5c0f\uff0c\u7ed3\u679c\u8d8a\u5927\u3002\u4e3a\u4fdd\u8bc1\u95ed\u5408\u5b50\u56fe\u6743\u503c\u6700\u5927\uff0c\u5f97\u662f\u5272\u503c\u6700\u5c0f\u3002 \u6700\u5927\u6743\u72ec\u7acb\u96c6 \u7f51\u7edc\u6d41\u6700\u5c0f\u5272\u8fd8\u5bf9\u5e94\u7740\u4e8c\u5206\u56fe\u6700\u5927\u6743\u72ec\u7acb\u96c6\u3002\u5373\u6bcf\u4e2a\u70b9\u6709\u4e2a\u6743\u503c\uff08\u6b63\u503c\uff09\uff0c\u9009\u4e2d\u4e00\u4e9b\u70b9\uff0c\u4f7f\u5f97\u4efb\u610f\u4e24\u70b9\u4e0d\u76f8\u90bb\uff0c\u4e14\u6743\u503c\u6700\u5927\u3002\u6700\u5927\u6743\u72ec\u7acb\u96c6\u7b49\u4e8e\u70b9\u6743\u548c\u51cf\u53bb\u6700\u5c0f\u6743\u8986\u76d6\u96c6\u3002\u6700\u5c0f\u6743\u8986\u76d6\u96c6\u7b49\u4e8e\u6700\u5c0f\u5272\u3002\u7f51\u7edc\u6d41\u5efa\u56fe\u65b9\u6cd5\uff1a\u6e90\u4e0e\u4e8c\u5206\u56fe\u7b2c\u4e00\u96c6\u5408\u4e2d\u7684\u70b9\u8fde\u63a5\uff0c\u4e8c\u5206\u56fe\u7b2c\u4e8c\u96c6\u5408\u4e2d\u7684\u70b9\u4e0e\u6c47\u8fde\u63a5\uff0c\u6d41\u91cf\u5747\u4e3a\u6743\u503c\u3002\u628a\u4e8c\u5206\u56fe\u4e4b\u95f4\u7684\u8fb9\u5728\u7f51\u7edc\u6d41\u56fe\u4e2d\u6dfb\u52a0\u4e3a\u6d41\u91cf\u6b63\u65e0\u7a77\u7684\u8fb9\u3002\u82e5\u4e00\u4e2a\u4e0e\u6e90\u8fde\u63a5\u7684\u70b9\u672a\u88ab\u5272\uff0c\u5219\u5176\u76f8\u90bb\u7684\u4e0e\u6c47\u8fde\u63a5\u7684\u70b9\u5fc5\u5b9a\u88ab\u5272\u3002\u8fd9\u51e0\u4e2a\u4e8c\u5206\u56fe\u4e2d\u7684\u8fb9\u5c31\u81f3\u5c11\u6709\u4e00\u4e2a\u70b9\u88ab\u5272\u3002\u6240\u4ee5\u6bcf\u79cd\u5272\u5bf9\u5e94\u4e00\u4e2a\u70b9\u96c6\u8986\u76d6\u3002\u6700\u5c0f\u5272\u5bf9\u5e94\u6700\u5c0f\u70b9\u96c6\u8986\u76d6\u3002 \u7f51\u7edc\u6d41\u7684\u5316\u7b80 \u7f51\u7edc\u6d41\u6709\u65f6\u9700\u8981\u5bf9\u56fe\u8fdb\u884c\u5316\u7b80 \u5316\u7b80\u89c4\u5219\uff1a \u89c4\u5f8b 1. \u5982\u679c\u51e0\u4e2a\u8282\u70b9\u7684\u6d41\u91cf\u7684\u6765\u6e90\u5b8c\u5168\u76f8\u540c\uff0c\u4e14\u6d41\u91cf\u4e3a+\u221e\uff0c\u5219\u53ef\u4ee5\u628a\u5b83\u4eec\u5408\u5e76\u6210\u4e00\u4e2a\u3002 \u89c4\u5f8b 2. \u5982\u679c\u51e0\u4e2a\u8282\u70b9\u7684\u6d41\u91cf\u7684\u53bb\u5411\u5b8c\u5168\u76f8\u540c\uff0c\u4e14\u6d41\u91cf\u4e3a+\u221e\uff0c\u5219\u53ef\u4ee5\u628a\u5b83\u4eec\u5408\u5e76\u6210\u4e00\u4e2a\u3002 \u89c4\u5f8b 3. \u5982\u679c\u4ece\u70b9 u \u5230\u70b9 v \u6709\u4e00\u6761\u5bb9\u91cf\u4e3a +\u221e \u7684\u8fb9\uff0c\u5e76\u4e14 u \u662f v \u7684\u552f\u4e00\u6d41\u91cf\u6765\u6e90\uff0c\u6216\u8005 v \u662f u \u7684\u552f\u4e00\u6d41\u91cf\u53bb\u5411\uff0c\u5219\u53ef\u4ee5\u628a u \u548c v \u5408\u5e76\u6210\u4e00\u4e2a\u8282\u70b9\u3002 \u6700\u5c0f\u70b9\u96c6\u8986\u76d6 \u6700\u5c0f\u70b9\u96c6\u8986\u76d6==\u6700\u5927\u5339\u914d\u3002\u5728\u8fd9\u91cc\u89e3\u91ca\u4e00\u4e0b\u539f\u56e0\uff0c\u9996\u5148\uff0c\u6700\u5c0f\u70b9\u96c6\u8986\u76d6\u4e00\u5b9a>=\u6700\u5927\u5339\u914d\uff0c\u56e0\u4e3a\u5047\u8bbe\u6700\u5927\u5339\u914d\u4e3an\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u5f97\u5230\u4e86n\u6761\u4e92\u4e0d\u76f8\u90bb\u7684\u8fb9\uff0c\u5149\u8986\u76d6\u8fd9\u4e9b\u8fb9\u5c31\u8981\u7528\u5230n\u4e2a\u70b9\u3002\u73b0\u5728\u6211\u4eec\u6765\u601d\u8003\u4e3a\u4ec0\u4e48\u6700\u5c0f\u70b9\u51fb\u8986\u76d6\u4e00\u5b9a<=\u6700\u5927\u5339\u914d\u3002\u4efb\u4f55\u4e00\u79cdn\u4e2a\u70b9\u7684\u6700\u5c0f\u70b9\u96c6\u8986\u76d6\uff0c\u4e00\u5b9a\u53ef\u4ee5\u8f6c\u5316\u6210\u4e00\u4e2an\u7684\u6700\u5927\u5339\u914d\u3002\u56e0\u4e3a\u6700\u5c0f\u70b9\u96c6\u8986\u76d6\u4e2d\u7684\u6bcf\u4e2a\u70b9\u90fd\u80fd\u627e\u5230\u81f3\u5c11\u4e00\u6761\u53ea\u6709\u4e00\u4e2a\u7aef\u70b9\u5728\u70b9\u96c6\u4e2d\u7684\u8fb9\uff08\u5982\u679c\u627e\u4e0d\u5230\u5219\u8bf4\u660e\u8be5\u70b9\u6240\u6709\u7684\u8fb9\u7684\u53e6\u5916\u4e00\u4e2a\u7aef\u70b9\u90fd\u88ab\u8986\u76d6\uff0c\u6240\u4ee5\u8be5\u70b9\u5219\u6ca1\u5fc5\u8981\u88ab\u8986\u76d6\uff0c\u548c\u5b83\u5728\u6700\u5c0f\u70b9\u96c6\u8986\u76d6\u4e2d\u76f8\u77db\u76fe\uff09\uff0c\u53ea\u8981\u6bcf\u4e2a\u7aef\u70b9\u90fd\u9009\u62e9\u4e00\u4e2a\u8fd9\u6837\u7684\u8fb9\uff0c\u5c31\u5fc5\u7136\u80fd\u8f6c\u5316\u4e3a\u4e00\u4e2a\u5339\u914d\u6570\u4e0e\u70b9\u96c6\u8986\u76d6\u7684\u70b9\u6570\u76f8\u7b49\u7684\u5339\u914d\u65b9\u6848\u3002\u591a\u4e2a\u8986\u76d6\u70b9\u90fd\u53ea\u80fd\u9009\u5219\u540c\u4e00\u4e2a\u70b9\u7ec4\u6210\u5339\u914d\u7684\u60c5\u51b5\u662f\u4e0d\u4f1a\u51fa\u73b0\u7684\u3002\u56e0\u4e3a\u5982\u679c\u51fa\u73b0\u8fd9\u79cd\u60c5\u51b5\u7684\u8bdd\uff0c\u90a3\u4e48\u8fd9\u51e0\u4e2a\u70b9\u4e00\u5b9a\u4e0d\u662f\u6700\u5c0f\u70b9\u96c6\u8986\u76d6\u3002\u56e0\u4e3a\u8fd9\u51e0\u4e2a\u70b9\uff08\u8bbe\u4e3a\u70b9\u96c6\u5408S\uff09\u65e2\u7136\u53ea\u6709\u4e00\u4e2a\u70b9A\u53ef\u4ee5\u7ec4\u6210\u5339\u914d\uff0c\u8bf4\u660e\u8fd9\u4e9bS\u4e2d\u7684\u70b9\u9664\u53bb\u4e0e\u70b9A\u7684\u8fb9\u4e4b\u5916\u7684\u5176\u4ed6\u8fb9\u7684\u53e6\u4e00\u7aef\u90fd\u662f\u8986\u76d6\u70b9\uff0c\u5373S\u4e2d\u70b9\u7684\u5176\u4ed6\u8fb9\u90fd\u5df2\u88ab\u5176\u4ed6\u70b9\u8986\u76d6\u5230\uff0cS\u91cc\u70b9\u88ab\u9009\u4e3a\u8986\u76d6\u96c6\u662f\u8981\u8986\u76d6S\u4e0eA\u8fde\u63a5\u7684\u90a3\u6761\u8fb9\uff0c\u6240\u4ee5\u6700\u5c0f\u70b9\u96c6\u8986\u76d6\u5e94\u8be5\u9009\u90a3\u4e2a\u70b9A\u5373\u53ef\u8986\u76d6\u8fd9\u4e9b\u8fb9\uff0c\u800c\u4e0d\u9009S\u4e2d\u7684\u70b9\u3002\u6240\u4ee5\u6700\u5927\u5339\u914d\u81f3\u5c11\u4e3a\u6700\u5c0f\u70b9\u96c6\u8986\u76d6\u6570\uff0c\u5373\u6700\u5c0f\u70b9\u96c6\u8986\u76d6\u4e00\u5b9a<=\u6700\u5927\u5339\u914d\u3002\u7efc\u4e0a\uff0c\u4e8c\u8005\u76f8\u7b49\u3002 \u6700\u5927\u72ec\u7acb\u96c6 \u6c42\u4e8c\u5206\u56fe\u7684\u6700\u5927\u72ec\u7acb\u96c6 \uff1d x + y \u2013 maxmatch; \u539f\u56e0\u5982\u4e0b\uff0cmaxmatch\u4e3a\u6700\u5927\u5339\u914d\uff0c\u6700\u5927\u5339\u914d=\u6700\u5c0f\u70b9\u96c6\u8986\u76d6\u3002\u6700\u5c0f\u70b9\u96c6\u8986\u76d6\u8981\u6c42\u6bcf\u4e2a\u8fb9\u81f3\u5c11\u8981\u6709\u4e00\u4e2a\u7aef\u70b9\u88ab\u9009\u4e2d\uff0c\u6700\u5c11\u9009\u51e0\u4e2a\u3002\u800c\u7528\u603b\u70b9\u96c6\u53d6\u6700\u5c0f\u70b9\u96c6\u8986\u76d6\u7684\u8865\u96c6\u7684\u610f\u4e49\u5c31\u662f\uff0c\u6bcf\u6761\u8fb9\u81f3\u591a\u6709\u4e00\u4e2a\u70b9\u88ab\u9009\u4e2d\uff0c\u6700\u591a\u9009\u51e0\u4e2a\u3002\u8fd9\u6070\u597d\u5c31\u662f\u6700\u5927\u72ec\u7acb\u96c6\u7684\u8981\u6c42/ \u6700\u5c0f\u8def\u5f84\u8986\u76d6 \u6700\u5c0f\u8def\u5f84\u8986\u76d6\uff0c\u7ed9\u5b9a\u4e00\u4e2a\u6709\u5411\u56fe\uff0c\u5728\u8fd9\u4e2a\u56fe\u4e0a\u7684\u67d0\u4e9b\u70b9\u4e0a\u653e\u4f1e\u5175\uff0c\u53ef\u4ee5\u4f7f\u4f1e\u5175\u53ef\u4ee5\u8d70\u5230\u56fe\u4e0a\u6240\u6709\u7684\u70b9\u3002\u4e14\u6bcf\u4e2a\u70b9\u53ea\u88ab\u4e00\u4e2a\u4f1e\u5175\u8d70\u4e00\u6b21\u3002\u95ee\u81f3\u5c11\u653e\u591a\u5c11\u4f1e\u5175\u3002 \u6211\u4eec\u53ef\u4ee5\u628a\u95ee\u9898\u8f6c\u5316\u4e3a\uff0c\u5728\u56fe\u4e0a\u7684\u8fb9\u4e2d\u9009\u51fa\u4e00\u4e9b\u8fb9\uff0c\u4f7f\u5f97\u6bcf\u4e2a\u70b9\u7684\u5165\u5ea6\u4e0e\u51fa\u5ea6\u90fd\u4e0d\u8d85\u8fc71\u3002 \u6211\u4eec\u5f00\u59cb\u5728\u56fe\u4e0a\u7684\u6bcf\u4e2a\u70b9\u90fd\u653e\u4e0a\u4f1e\u5175\uff0c\u7136\u540e\u6ca1\u9009\u51fa\u4e00\u6761\u8fb9\uff0c\u5c31\u610f\u5473\u7740\u6709\u4e00\u4e2a\u4f1e\u5175\u53ef\u4ee5\u88ab\u53d6\u6d88\u6389\u4e86\u3002\u4e5f\u5c31\u662f\u8bf4\u9700\u8981\u7684\u6700\u5c11\u4f1e\u5175\u6570=\u70b9\u603b\u6570\uff0d\u80fd\u9009\u51fa\u7684\u6700\u5927\u8fb9\u6570\u3002 \u6211\u4eec\u53ea\u8981\u6c42\u6700\u5927\u8fb9\u6570\u5373\u53ef\u3002\u7528\u4e8c\u5206\u56fe\u5339\u914d\uff0c\u628a\u6bcf\u4e2a\u70b9\u62c6\u6210\u4e24\u4e2a\u70b9\uff0c\u5206\u522b\u52a0\u5165\u4e8c\u5206\u56fe\u7684\u4e24\u4e2a\u70b9\u96c6\uff0c\u539f\u56fe\u4e2d\u4e00\u6761\u7531a\u5230b\u7684\u8fb9\u5728\u4e8c\u5206\u56fe\u4e2d\u662f\u4e00\u6761\u7531\u7b2c\u4e00\u4e2a\u70b9\u96c6\u4e2d\u7684\u7b2ca\u4e2a\u70b9\u5230\u7b2c\u4e8c\u4e2a\u70b9\u96c6\u4e2d\u7684\u7b2cb\u4e2a\u70b9\u3002\u4e5f\u5c31\u662f\u7b2c\u4e00\u4e2a\u70b9\u96c6\u7684\u70b9\u4e0e\u51fa\u8fb9\u6709\u5173\uff0c\u7b2c\u4e8c\u4e2a\u4e0e\u5165\u8fb9\u6709\u5173\u3002\u5339\u914d\u65f6\u4e5f\u5c31\u4fdd\u8bc1\u4e86\u6bcf\u4e2a\u70b9\u7684\u5982\u5ea6\u4e0e\u51fa\u5ea6\u90fd\u4e0d\u8d85\u8fc71\u3002\u6c42\u6700\u5927\u5339\u914d\u5373\u4e3a\u80fd\u9009\u51fa\u7684\u6700\u5927\u8fb9\u6570\u3002 \u6700\u5c0f\u8d39\u7528\u6700\u5927\u6d41 \u6700\u5c0f\u8d39\u7528\u6700\u5927\u6d41\u7684\u610f\u601d\u662f\uff1a\u6700\u5c0f\u8d39\u7528\u7684\u6700\u5927\u6d41\uff0c\u5373\u5728\u4f17\u591a\u60c5\u51b5\u7684\u6700\u5927\u6d41\u4e2d\u6311\u9009\u4e00\u4e2a\u8d39\u7528\u6700\u5c0f\u7684\u3002\u5176\u8ba1\u7b97\u6d41\u7a0b\u5927\u81f4\u662f\uff1a\u6bcf\u6b21\u627e\u5230\u4e00\u6761\u6839\u636e\u8d39\u7528\u6765\u770b\u7684\u6700\u77ed\u8def\uff0c\u7136\u540e\u5bf9\u8fd9\u6761\u6700\u77ed\u8def\u8fdb\u884c\u589e\u52a0\u6d41\u91cf\uff0c\u76f4\u5230\u6240\u6709\u8def\u5f84\u6d41\u91cf\u90fd\u4e0d\u80fd\u589e\u52a0\u4e3a\u6b62\u3002 \u7f51\u7edc\u6d41\uff0c\u5bf9\u6d41\u8fc7\u6bcf\u4e2a\u70b9\u7684\u6d41\u91cf\u6709\u9650\u5236\uff0c\u8fd9\u6837\u5c31\u9700\u8981\u62c6\u70b9\uff0c\u628a\u6bcf\u4e2a\u7ed3\u70b9\u62c6\u6210\u4e24\u4e2a\uff0c\u4e00\u4e2a\u5165\u70b9\uff0c\u4e00\u4e2a\u51fa\u70b9\uff0c\u5e76\u4ece\u5165\u70b9\u5230\u51fa\u70b9\u8fde\u63a5\u4e00\u6761\u8fb9\u6d41\u91cf\u4e3a\u70b9\u7684\u7684\u6d41\u5411\u9650\u5236\u3002\u81f3\u4e8e\u539f\u6765\u7684\u70b9\u4e0e\u70b9\u4e4b\u95f4\u7684\u8fb9\u7684\u6d41\u91cf\u5c31\u662f\u6b63\u65e0\u7a77\u3002","title":"Network Flow"},{"location":"competitive_programming/network_flow/#network-flow","text":"\u6e10\u6e10\u5f00\u59cb\u7406\u89e3\u7f51\u7edc\u6d41\u7684\u9898\u578b\u4e86\uff0c\u662f\u4e00\u79cd\u53ef\u4ee5\u81ea\u7531\u5206\u914d\uff0c\u6c42\u6700\u4f18\u5206\u914d\u65b9\u6848\u7684\u9898\u3002 \u7531\u4e8e\u6700\u77ed\u8def\u7b97\u6cd5\u662f\u6700\u5c0f\u8d39\u7528\u6700\u5927\u6d41\u7b97\u6cd5\u7684\u5b50\u7b97\u6cd5\uff0c\u6240\u4ee5\u6709\u4e9b\u6700\u77ed\u8def\u7684\u9898\u53ef\u80fd\u8981\u7528\u5230\u6700\u5c0f\u8d39\u7528\u6700\u5927\u6d41\u3002 \u5728\u6700\u5c0f\u8def\u7ecf\u8986\u76d6\u4e2d\uff0c\u539f\u56fe\u7684\u90bb\u63a5\u77e9\u9635\u548c\u4e8c\u5206\u56fe\u5339\u914d\u7684\u90bb\u63a5\u77e9\u9635\u4e3a\u540c\u4e00\u77e9\u9635\u3002 \u5f53\u7f51\u7edc\u6d41\u7684\u8282\u70b9\u6570\u8fc7\u591a\u4e14\u53ef\u5206\u7c7b\u7684\u65f6\u5019\uff0c\u5e94\u601d\u8003\u662f\u5426\u53ef\u4ee5\u5206\u591a\u6b21\u8fdb\u884c\u6700\u5927\u6d41\u6765\u6c42\u89e3\u3002","title":"Network Flow"},{"location":"competitive_programming/network_flow/#_1","text":"\u7f51\u7edc\u6d41\u7684\u6700\u5c0f\u5272\u95ee\u9898\uff0c\u770b\u5230\u5206\u914d\u6210\u4e24\u90e8\u5206\u7684\u9898\uff0c\u5c31\u8981\u60f3\u5230\u7f51\u7edc\u6d41\u6700\u5c0f\u5272\u3002\u6700\u5c0f\u5272\u5c31\u662f\u5c06\u539f\u56fe\u5212\u5206\u4e3a\u4e24\u90e8\u5206\uff0c\u4e00\u90e8\u5206\u5305\u542b\u6e90\uff0c\u4e00\u90e8\u5206\u5305\u542b\u6c47\u3002\u5272\u503c\u662f\u4e00\u90e8\u5206\u6307\u5411\u53e6\u4e00\u90e8\u5206\u7684\u8fb9\u7684\u521d\u59cb\u5bb9\u91cf\u7684\u603b\u548c\uff0c\u4e0d\u52a0\u4e0a\u53e6\u4e00\u90e8\u5206\u6307\u5411\u672c\u90e8\u5206\u7684\u8fb9\u7684\u5bb9\u91cf\u3002\u800c\u5bf9\u4e8e\u6700\u5c0f\u5272\u6765\u8bf4\uff0c\u6700\u5927\u6d41\u6d41\u91cf\u5c31\u662f\u6700\u5c0f\u5272\u7684\u5bb9\u91cf\u3002\u56e0\u4e3a\u5728\u6700\u5927\u6d41\u7684\u8fc7\u7a0b\u4e2d\u603b\u6709\u4e00\u4e9b\u8fb9\u6210\u4e3a\u6d41\u91cf\u7ee7\u7eed\u589e\u52a0\u7684\u74f6\u9888\uff0c\u800c\u8fd9\u4e9b\u8fb9\u4e00\u5b9a\u662f\u6d41\u6ee1\u7684\uff0c\u53ea\u8981\u5c06\u8fd9\u4e9b\u8fb9\u5272\u5f00\u5c31\u5fc5\u5b9a\u53ef\u4ee5\u963b\u65ad\u6240\u6709\u6d41\u3002\u6700\u5927\u6d41\u540e\u5206\u6790\u539f\u56fe\u5982\u4f55\u5212\u5206\u7684\u65b9\u6cd5\uff0c\u5c31\u662f\u5c06\u6700\u5927\u6d41\u540e\u6b8b\u4f59\u7f51\u7edc\u4e2ds\u53ef\u4ee5\u8d70\u5230\u7684\u70b9\u5212\u4e3as\u96c6\u5408\uff0c\u5176\u4f59\u70b9\u5212\u4e3at\u96c6\u5408\uff0c\u6ce8\u610f\uff0c\u4e0d\u662f\u53ef\u4ee5\u8d70\u5230t\u7684\u70b9\uff0c\u56e0\u4e3a\u6709\u53ef\u80fd\u6709\u4e00\u6761\u7ebf\u4e0a\u7684\u591a\u6761\u8fb9\u90fd\u6d41\u6ee1\u7684\u60c5\u51b5\uff0c\u8fd9\u79cd\u60c5\u51b5\u4e0b\u6709\u4e9b\u70b9\u5c31\u65e0\u6cd5\u8d70\u5230t\uff0c\u800c\u4e14s\u4e5f\u8d70\u4e0d\u5230\u5b83\u3002 \u6700\u5927\u6743\u95ed\u5408\u5b50\u56fe \u5bf9\u4e8e\u7f51\u7edc\u6d41\u6700\u5c0f\u5272\u7684\u5efa\u56fe\uff0c\u901a\u5e38\u5e76\u4e0d\u662f\u76f4\u63a5\u60f3\u5230\u6700\u5c0f\u5272\uff0c\u800c\u662f\u5148\u5efa\u7acb\u4e00\u4e2a\u7ed3\u70b9\u5e26\u6743\uff0c\u8fb9\u4e0d\u5e26\u6743\u7684\u56fe\uff0c\u5e76\u5bf9\u8be5\u56fe\u6c42\u6700\u5927\u6743\u95ed\u5408\u5b50\u56fe\u3002\u95ed\u5408\u5b50\u56fe\uff1a\u4ece\u56fe\u4e2d\u9009\u51fa\u82e5\u5e72\u4e2a\u70b9\uff0c\u53ca\u8fd9\u4e9b\u70b9\u76f8\u90bb\u7684\u8fb9\uff0c\u82e5\u6240\u6709\u8fb9\u7684\u7aef\u70b9\u90fd\u662f\u88ab\u9009\u51fa\u7684\u70b9\uff0c\u5219\u8be5\u5b50\u56fe\u4e3a\u95ed\u5408\u5b50\u56fe\u3002\u4e3a\u6c42\u6700\u5927\u6743\u95ed\u5408\u5b50\u56fe\u800c\u628a\u95ee\u9898\u8f6c\u5316\u4e3a\u7f51\u7edc\u6d41\u7684\u6700\u5c0f\u5272\u3002\u8f6c\u5316\u7684\u5177\u4f53\u65b9\u6cd5\u662f\uff0c\u628a\u6240\u6709\u7ed3\u70b9\u5230\u7ed3\u70b9\u7684\u8fb9\u90fd\u8bbe\u7f6e\u4e3a\u5bb9\u91cf\u4e3a\u6b63\u65e0\u7a77\u7684\u8fb9\uff0c\u5e76\u4ece\u6e90\u5f15\u8fb9\u5230\u6743\u503c\u4e3a\u6b63\u7684\u7ed3\u70b9\uff0c\u8fb9\u7684\u5bb9\u91cf\u4e3a\u70b9\u7684\u6743\u503c\u3002\u4ece\u6743\u503c\u4e3a\u8d1f\u7684\u70b9\u5f15\u8fb9\u5230\u6c47\uff0c\u8fb9\u7684\u5bb9\u91cf\u4e3a\u7ed3\u70b9\u6743\u503c\u7684\u76f8\u53cd\u6570\u3002 \u7f51\u7edc\u6d41\u7684\u6700\u5c0f\u5272\u5bf9\u5e94\u7740\u6700\u5927\u6743\u95ed\u5408\u5b50\u56fe\uff0c\u8fd9\u4e2a\u95ed\u5408\u5b50\u56fe\u662f\u6240\u6709\u5272\u540e\u6e90\u70b9\u80fd\u5230\u8fbe\u7684\u6240\u6709\u70b9\u3002\u800c\u8fd9\u4e2a\u95ed\u5408\u5b50\u56fe\u7684\u6743\u5c31\u7b49\u4e8e\u539f\u56fe\u4e2d\u6240\u6709\u6b63\u6743\u70b9\u7684\u6743\u548c\u51cf\u53bb\u6700\u5c0f\u5272\u3002\u4e00\u4e2a\u6b63\u6743\u70b9\u7684\u8fb9\u88ab\u5272\uff0c\u5219\u5176\u80fd\u5230\u8fbe\u7684\u8d1f\u6743\u70b9\u4e0d\u5fc5\u56e0\u4e3a\u5b83\u88ab\u5272\uff0c\u82e5\u6b63\u6743\u70b9\u4e0d\u88ab\u5272\uff0c\u5219\u5176\u80fd\u5230\u8fbe\u7684\u8d1f\u6743\u70b9\u5fc5\u987b\u88ab\u5272\uff0c\u5426\u5219\u56fe\u8fde\u901a\u3002\u6ca1\u88ab\u5272\u7684\u6b63\u6743\u70b9\u548c\u88ab\u5272\u7684\u8d1f\u6743\u70b9\u5fc5\u7136\u7ec4\u6210\u4e00\u4e2a\u95ed\u5408\u5b50\u56fe\u3002\u6240\u4ee5\u6bcf\u79cd\u5272\u6cd5\u90fd\u5bf9\u5e94\u7740\u4e00\u4e2a\u95ed\u5408\u5b50\u56fe\u3002\u88ab\u5272\u6389\u7684\u8fb9\u5bf9\u5e94\u7684\u70b9\u6709\u4e24\u79cd\uff0c\u4e00\u79cd\u662f\u6ca1\u6709\u88ab\u9009\u4e2d\u7684\u6b63\u6743\u70b9\uff0c\u53e6\u4e00\u79cd\u662f\u88ab\u9009\u4e2d\u4e86\u7684\u8d1f\u6743\u70b9\u3002\u6211\u4eec\u7528\u6b63\u6743\u548c\u51cf\u53bb\u6700\u5c0f\u5272\u5f97\u5230\u7684\u662f\uff0c\u88ab\u9009\u4e2d\u7684\u6b63\u6743\u70b9\u51cf\u53bb\u88ab\u9009\u4e2d\u7684\u8d1f\u6743\u70b9\u7684\u6743\u503c\uff08\u7edd\u5bf9\u503c\uff09\u3002\u51cf\u6570\u8d8a\u5c0f\uff0c\u7ed3\u679c\u8d8a\u5927\u3002\u4e3a\u4fdd\u8bc1\u95ed\u5408\u5b50\u56fe\u6743\u503c\u6700\u5927\uff0c\u5f97\u662f\u5272\u503c\u6700\u5c0f\u3002","title":"\u6700\u5c0f\u5272"},{"location":"competitive_programming/network_flow/#_2","text":"\u7f51\u7edc\u6d41\u6700\u5c0f\u5272\u8fd8\u5bf9\u5e94\u7740\u4e8c\u5206\u56fe\u6700\u5927\u6743\u72ec\u7acb\u96c6\u3002\u5373\u6bcf\u4e2a\u70b9\u6709\u4e2a\u6743\u503c\uff08\u6b63\u503c\uff09\uff0c\u9009\u4e2d\u4e00\u4e9b\u70b9\uff0c\u4f7f\u5f97\u4efb\u610f\u4e24\u70b9\u4e0d\u76f8\u90bb\uff0c\u4e14\u6743\u503c\u6700\u5927\u3002\u6700\u5927\u6743\u72ec\u7acb\u96c6\u7b49\u4e8e\u70b9\u6743\u548c\u51cf\u53bb\u6700\u5c0f\u6743\u8986\u76d6\u96c6\u3002\u6700\u5c0f\u6743\u8986\u76d6\u96c6\u7b49\u4e8e\u6700\u5c0f\u5272\u3002\u7f51\u7edc\u6d41\u5efa\u56fe\u65b9\u6cd5\uff1a\u6e90\u4e0e\u4e8c\u5206\u56fe\u7b2c\u4e00\u96c6\u5408\u4e2d\u7684\u70b9\u8fde\u63a5\uff0c\u4e8c\u5206\u56fe\u7b2c\u4e8c\u96c6\u5408\u4e2d\u7684\u70b9\u4e0e\u6c47\u8fde\u63a5\uff0c\u6d41\u91cf\u5747\u4e3a\u6743\u503c\u3002\u628a\u4e8c\u5206\u56fe\u4e4b\u95f4\u7684\u8fb9\u5728\u7f51\u7edc\u6d41\u56fe\u4e2d\u6dfb\u52a0\u4e3a\u6d41\u91cf\u6b63\u65e0\u7a77\u7684\u8fb9\u3002\u82e5\u4e00\u4e2a\u4e0e\u6e90\u8fde\u63a5\u7684\u70b9\u672a\u88ab\u5272\uff0c\u5219\u5176\u76f8\u90bb\u7684\u4e0e\u6c47\u8fde\u63a5\u7684\u70b9\u5fc5\u5b9a\u88ab\u5272\u3002\u8fd9\u51e0\u4e2a\u4e8c\u5206\u56fe\u4e2d\u7684\u8fb9\u5c31\u81f3\u5c11\u6709\u4e00\u4e2a\u70b9\u88ab\u5272\u3002\u6240\u4ee5\u6bcf\u79cd\u5272\u5bf9\u5e94\u4e00\u4e2a\u70b9\u96c6\u8986\u76d6\u3002\u6700\u5c0f\u5272\u5bf9\u5e94\u6700\u5c0f\u70b9\u96c6\u8986\u76d6\u3002","title":"\u6700\u5927\u6743\u72ec\u7acb\u96c6"},{"location":"competitive_programming/network_flow/#_3","text":"\u7f51\u7edc\u6d41\u6709\u65f6\u9700\u8981\u5bf9\u56fe\u8fdb\u884c\u5316\u7b80 \u5316\u7b80\u89c4\u5219\uff1a \u89c4\u5f8b 1. \u5982\u679c\u51e0\u4e2a\u8282\u70b9\u7684\u6d41\u91cf\u7684\u6765\u6e90\u5b8c\u5168\u76f8\u540c\uff0c\u4e14\u6d41\u91cf\u4e3a+\u221e\uff0c\u5219\u53ef\u4ee5\u628a\u5b83\u4eec\u5408\u5e76\u6210\u4e00\u4e2a\u3002 \u89c4\u5f8b 2. \u5982\u679c\u51e0\u4e2a\u8282\u70b9\u7684\u6d41\u91cf\u7684\u53bb\u5411\u5b8c\u5168\u76f8\u540c\uff0c\u4e14\u6d41\u91cf\u4e3a+\u221e\uff0c\u5219\u53ef\u4ee5\u628a\u5b83\u4eec\u5408\u5e76\u6210\u4e00\u4e2a\u3002 \u89c4\u5f8b 3. \u5982\u679c\u4ece\u70b9 u \u5230\u70b9 v \u6709\u4e00\u6761\u5bb9\u91cf\u4e3a +\u221e \u7684\u8fb9\uff0c\u5e76\u4e14 u \u662f v \u7684\u552f\u4e00\u6d41\u91cf\u6765\u6e90\uff0c\u6216\u8005 v \u662f u \u7684\u552f\u4e00\u6d41\u91cf\u53bb\u5411\uff0c\u5219\u53ef\u4ee5\u628a u \u548c v \u5408\u5e76\u6210\u4e00\u4e2a\u8282\u70b9\u3002","title":"\u7f51\u7edc\u6d41\u7684\u5316\u7b80"},{"location":"competitive_programming/network_flow/#_4","text":"\u6700\u5c0f\u70b9\u96c6\u8986\u76d6==\u6700\u5927\u5339\u914d\u3002\u5728\u8fd9\u91cc\u89e3\u91ca\u4e00\u4e0b\u539f\u56e0\uff0c\u9996\u5148\uff0c\u6700\u5c0f\u70b9\u96c6\u8986\u76d6\u4e00\u5b9a>=\u6700\u5927\u5339\u914d\uff0c\u56e0\u4e3a\u5047\u8bbe\u6700\u5927\u5339\u914d\u4e3an\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u5f97\u5230\u4e86n\u6761\u4e92\u4e0d\u76f8\u90bb\u7684\u8fb9\uff0c\u5149\u8986\u76d6\u8fd9\u4e9b\u8fb9\u5c31\u8981\u7528\u5230n\u4e2a\u70b9\u3002\u73b0\u5728\u6211\u4eec\u6765\u601d\u8003\u4e3a\u4ec0\u4e48\u6700\u5c0f\u70b9\u51fb\u8986\u76d6\u4e00\u5b9a<=\u6700\u5927\u5339\u914d\u3002\u4efb\u4f55\u4e00\u79cdn\u4e2a\u70b9\u7684\u6700\u5c0f\u70b9\u96c6\u8986\u76d6\uff0c\u4e00\u5b9a\u53ef\u4ee5\u8f6c\u5316\u6210\u4e00\u4e2an\u7684\u6700\u5927\u5339\u914d\u3002\u56e0\u4e3a\u6700\u5c0f\u70b9\u96c6\u8986\u76d6\u4e2d\u7684\u6bcf\u4e2a\u70b9\u90fd\u80fd\u627e\u5230\u81f3\u5c11\u4e00\u6761\u53ea\u6709\u4e00\u4e2a\u7aef\u70b9\u5728\u70b9\u96c6\u4e2d\u7684\u8fb9\uff08\u5982\u679c\u627e\u4e0d\u5230\u5219\u8bf4\u660e\u8be5\u70b9\u6240\u6709\u7684\u8fb9\u7684\u53e6\u5916\u4e00\u4e2a\u7aef\u70b9\u90fd\u88ab\u8986\u76d6\uff0c\u6240\u4ee5\u8be5\u70b9\u5219\u6ca1\u5fc5\u8981\u88ab\u8986\u76d6\uff0c\u548c\u5b83\u5728\u6700\u5c0f\u70b9\u96c6\u8986\u76d6\u4e2d\u76f8\u77db\u76fe\uff09\uff0c\u53ea\u8981\u6bcf\u4e2a\u7aef\u70b9\u90fd\u9009\u62e9\u4e00\u4e2a\u8fd9\u6837\u7684\u8fb9\uff0c\u5c31\u5fc5\u7136\u80fd\u8f6c\u5316\u4e3a\u4e00\u4e2a\u5339\u914d\u6570\u4e0e\u70b9\u96c6\u8986\u76d6\u7684\u70b9\u6570\u76f8\u7b49\u7684\u5339\u914d\u65b9\u6848\u3002\u591a\u4e2a\u8986\u76d6\u70b9\u90fd\u53ea\u80fd\u9009\u5219\u540c\u4e00\u4e2a\u70b9\u7ec4\u6210\u5339\u914d\u7684\u60c5\u51b5\u662f\u4e0d\u4f1a\u51fa\u73b0\u7684\u3002\u56e0\u4e3a\u5982\u679c\u51fa\u73b0\u8fd9\u79cd\u60c5\u51b5\u7684\u8bdd\uff0c\u90a3\u4e48\u8fd9\u51e0\u4e2a\u70b9\u4e00\u5b9a\u4e0d\u662f\u6700\u5c0f\u70b9\u96c6\u8986\u76d6\u3002\u56e0\u4e3a\u8fd9\u51e0\u4e2a\u70b9\uff08\u8bbe\u4e3a\u70b9\u96c6\u5408S\uff09\u65e2\u7136\u53ea\u6709\u4e00\u4e2a\u70b9A\u53ef\u4ee5\u7ec4\u6210\u5339\u914d\uff0c\u8bf4\u660e\u8fd9\u4e9bS\u4e2d\u7684\u70b9\u9664\u53bb\u4e0e\u70b9A\u7684\u8fb9\u4e4b\u5916\u7684\u5176\u4ed6\u8fb9\u7684\u53e6\u4e00\u7aef\u90fd\u662f\u8986\u76d6\u70b9\uff0c\u5373S\u4e2d\u70b9\u7684\u5176\u4ed6\u8fb9\u90fd\u5df2\u88ab\u5176\u4ed6\u70b9\u8986\u76d6\u5230\uff0cS\u91cc\u70b9\u88ab\u9009\u4e3a\u8986\u76d6\u96c6\u662f\u8981\u8986\u76d6S\u4e0eA\u8fde\u63a5\u7684\u90a3\u6761\u8fb9\uff0c\u6240\u4ee5\u6700\u5c0f\u70b9\u96c6\u8986\u76d6\u5e94\u8be5\u9009\u90a3\u4e2a\u70b9A\u5373\u53ef\u8986\u76d6\u8fd9\u4e9b\u8fb9\uff0c\u800c\u4e0d\u9009S\u4e2d\u7684\u70b9\u3002\u6240\u4ee5\u6700\u5927\u5339\u914d\u81f3\u5c11\u4e3a\u6700\u5c0f\u70b9\u96c6\u8986\u76d6\u6570\uff0c\u5373\u6700\u5c0f\u70b9\u96c6\u8986\u76d6\u4e00\u5b9a<=\u6700\u5927\u5339\u914d\u3002\u7efc\u4e0a\uff0c\u4e8c\u8005\u76f8\u7b49\u3002","title":"\u6700\u5c0f\u70b9\u96c6\u8986\u76d6"},{"location":"competitive_programming/network_flow/#_5","text":"\u6c42\u4e8c\u5206\u56fe\u7684\u6700\u5927\u72ec\u7acb\u96c6 \uff1d x + y \u2013 maxmatch; \u539f\u56e0\u5982\u4e0b\uff0cmaxmatch\u4e3a\u6700\u5927\u5339\u914d\uff0c\u6700\u5927\u5339\u914d=\u6700\u5c0f\u70b9\u96c6\u8986\u76d6\u3002\u6700\u5c0f\u70b9\u96c6\u8986\u76d6\u8981\u6c42\u6bcf\u4e2a\u8fb9\u81f3\u5c11\u8981\u6709\u4e00\u4e2a\u7aef\u70b9\u88ab\u9009\u4e2d\uff0c\u6700\u5c11\u9009\u51e0\u4e2a\u3002\u800c\u7528\u603b\u70b9\u96c6\u53d6\u6700\u5c0f\u70b9\u96c6\u8986\u76d6\u7684\u8865\u96c6\u7684\u610f\u4e49\u5c31\u662f\uff0c\u6bcf\u6761\u8fb9\u81f3\u591a\u6709\u4e00\u4e2a\u70b9\u88ab\u9009\u4e2d\uff0c\u6700\u591a\u9009\u51e0\u4e2a\u3002\u8fd9\u6070\u597d\u5c31\u662f\u6700\u5927\u72ec\u7acb\u96c6\u7684\u8981\u6c42/","title":"\u6700\u5927\u72ec\u7acb\u96c6"},{"location":"competitive_programming/network_flow/#_6","text":"\u6700\u5c0f\u8def\u5f84\u8986\u76d6\uff0c\u7ed9\u5b9a\u4e00\u4e2a\u6709\u5411\u56fe\uff0c\u5728\u8fd9\u4e2a\u56fe\u4e0a\u7684\u67d0\u4e9b\u70b9\u4e0a\u653e\u4f1e\u5175\uff0c\u53ef\u4ee5\u4f7f\u4f1e\u5175\u53ef\u4ee5\u8d70\u5230\u56fe\u4e0a\u6240\u6709\u7684\u70b9\u3002\u4e14\u6bcf\u4e2a\u70b9\u53ea\u88ab\u4e00\u4e2a\u4f1e\u5175\u8d70\u4e00\u6b21\u3002\u95ee\u81f3\u5c11\u653e\u591a\u5c11\u4f1e\u5175\u3002 \u6211\u4eec\u53ef\u4ee5\u628a\u95ee\u9898\u8f6c\u5316\u4e3a\uff0c\u5728\u56fe\u4e0a\u7684\u8fb9\u4e2d\u9009\u51fa\u4e00\u4e9b\u8fb9\uff0c\u4f7f\u5f97\u6bcf\u4e2a\u70b9\u7684\u5165\u5ea6\u4e0e\u51fa\u5ea6\u90fd\u4e0d\u8d85\u8fc71\u3002 \u6211\u4eec\u5f00\u59cb\u5728\u56fe\u4e0a\u7684\u6bcf\u4e2a\u70b9\u90fd\u653e\u4e0a\u4f1e\u5175\uff0c\u7136\u540e\u6ca1\u9009\u51fa\u4e00\u6761\u8fb9\uff0c\u5c31\u610f\u5473\u7740\u6709\u4e00\u4e2a\u4f1e\u5175\u53ef\u4ee5\u88ab\u53d6\u6d88\u6389\u4e86\u3002\u4e5f\u5c31\u662f\u8bf4\u9700\u8981\u7684\u6700\u5c11\u4f1e\u5175\u6570=\u70b9\u603b\u6570\uff0d\u80fd\u9009\u51fa\u7684\u6700\u5927\u8fb9\u6570\u3002 \u6211\u4eec\u53ea\u8981\u6c42\u6700\u5927\u8fb9\u6570\u5373\u53ef\u3002\u7528\u4e8c\u5206\u56fe\u5339\u914d\uff0c\u628a\u6bcf\u4e2a\u70b9\u62c6\u6210\u4e24\u4e2a\u70b9\uff0c\u5206\u522b\u52a0\u5165\u4e8c\u5206\u56fe\u7684\u4e24\u4e2a\u70b9\u96c6\uff0c\u539f\u56fe\u4e2d\u4e00\u6761\u7531a\u5230b\u7684\u8fb9\u5728\u4e8c\u5206\u56fe\u4e2d\u662f\u4e00\u6761\u7531\u7b2c\u4e00\u4e2a\u70b9\u96c6\u4e2d\u7684\u7b2ca\u4e2a\u70b9\u5230\u7b2c\u4e8c\u4e2a\u70b9\u96c6\u4e2d\u7684\u7b2cb\u4e2a\u70b9\u3002\u4e5f\u5c31\u662f\u7b2c\u4e00\u4e2a\u70b9\u96c6\u7684\u70b9\u4e0e\u51fa\u8fb9\u6709\u5173\uff0c\u7b2c\u4e8c\u4e2a\u4e0e\u5165\u8fb9\u6709\u5173\u3002\u5339\u914d\u65f6\u4e5f\u5c31\u4fdd\u8bc1\u4e86\u6bcf\u4e2a\u70b9\u7684\u5982\u5ea6\u4e0e\u51fa\u5ea6\u90fd\u4e0d\u8d85\u8fc71\u3002\u6c42\u6700\u5927\u5339\u914d\u5373\u4e3a\u80fd\u9009\u51fa\u7684\u6700\u5927\u8fb9\u6570\u3002","title":"\u6700\u5c0f\u8def\u5f84\u8986\u76d6"},{"location":"competitive_programming/network_flow/#_7","text":"\u6700\u5c0f\u8d39\u7528\u6700\u5927\u6d41\u7684\u610f\u601d\u662f\uff1a\u6700\u5c0f\u8d39\u7528\u7684\u6700\u5927\u6d41\uff0c\u5373\u5728\u4f17\u591a\u60c5\u51b5\u7684\u6700\u5927\u6d41\u4e2d\u6311\u9009\u4e00\u4e2a\u8d39\u7528\u6700\u5c0f\u7684\u3002\u5176\u8ba1\u7b97\u6d41\u7a0b\u5927\u81f4\u662f\uff1a\u6bcf\u6b21\u627e\u5230\u4e00\u6761\u6839\u636e\u8d39\u7528\u6765\u770b\u7684\u6700\u77ed\u8def\uff0c\u7136\u540e\u5bf9\u8fd9\u6761\u6700\u77ed\u8def\u8fdb\u884c\u589e\u52a0\u6d41\u91cf\uff0c\u76f4\u5230\u6240\u6709\u8def\u5f84\u6d41\u91cf\u90fd\u4e0d\u80fd\u589e\u52a0\u4e3a\u6b62\u3002 \u7f51\u7edc\u6d41\uff0c\u5bf9\u6d41\u8fc7\u6bcf\u4e2a\u70b9\u7684\u6d41\u91cf\u6709\u9650\u5236\uff0c\u8fd9\u6837\u5c31\u9700\u8981\u62c6\u70b9\uff0c\u628a\u6bcf\u4e2a\u7ed3\u70b9\u62c6\u6210\u4e24\u4e2a\uff0c\u4e00\u4e2a\u5165\u70b9\uff0c\u4e00\u4e2a\u51fa\u70b9\uff0c\u5e76\u4ece\u5165\u70b9\u5230\u51fa\u70b9\u8fde\u63a5\u4e00\u6761\u8fb9\u6d41\u91cf\u4e3a\u70b9\u7684\u7684\u6d41\u5411\u9650\u5236\u3002\u81f3\u4e8e\u539f\u6765\u7684\u70b9\u4e0e\u70b9\u4e4b\u95f4\u7684\u8fb9\u7684\u6d41\u91cf\u5c31\u662f\u6b63\u65e0\u7a77\u3002","title":"\u6700\u5c0f\u8d39\u7528\u6700\u5927\u6d41"},{"location":"competitive_programming/number_theory/","text":"Number Theory \u5982\u679c\u4e00\u4e2a\u8d28\u6570\u53ef\u4ee5\u8868\u793a\u62104x+1\u7684\u5f62\u5f0f\uff0c\u90a3\u4e48\u5b83\u4e00\u5b9a\u53ef\u4ee5\u8868\u793a\u6210\u4e24\u4e2a\u6570\u5b57\u7684\u5e73\u65b9\u548c\u3002\uff082\u662f\u7279\u6b8a\u60c5\u51b5\uff09 \u6839\u636e\u6b27\u62c9\u5e38\u6570\uff0c(M/1+M/2+...+M/M)\u7ea6\u7b49\u4e8eMlnM\u3002\u5728\u6570\u8bba\u7684\u7b97\u6cd5\u4e2d\u8ba1\u7b97\u65f6\u95f4\u590d\u6742\u5ea6\u65f6\u53ef\u80fd\u4f1a\u7528\u5230\u3002 \u6b27\u62c9\u51fd\u6570 \u6b27\u62c9\u51fd\u6570euler(n)\u8868\u793a\u5c0f\u4e8e\u7b49\u4e8en\u7684\u4e0en\u4e92\u8d28\u7684\u6570\u7684\u4e2a\u6570\uff0c\u5728\u6b27\u62c9\u51fd\u6570\uff0c\u8ba4\u4e3a\u5982\u679c\u4e24\u6570\u6700\u5927\u516c\u7ea6\u6570\u4e3a1\uff0c\u5219\u4e24\u6570\u4e92\u8d28\u3002\u6240\u4ee5\uff0cn\u4e0e1\u4e5f\u4e92\u8d28\uff0c\u4e14euler(1)=1\u3002 \u8ba1\u7b97\u516c\u5f0f\u4e3a\uff1a\u03c6(x)=x(1-1/p1)(1-1/p2)(1-1/p3)(1-1/p4)\u2026..(1-1/pn),\u5176\u4e2dp1, p2\u2026\u2026pn\u4e3ax\u7684\u6240\u6709\u4e0d\u91cd\u590d\u7684\u8d28\u56e0\u6570\uff0cx\u662f\u4e0d\u4e3a0\u7684\u6574\u6570\u3002 \u6b27\u62c9\u51fd\u6570\u9012\u63a8\u6c42\u6cd5\uff1a\u6b27\u62c9\u51fd\u6570\u7684\u539f\u59cb\u516c\u5f0f\u662f\u7528n\u8fde\u4e58\uff081-1/pi\uff09\u3002pi\u662fn\u7684\u4e0d\u91cd\u590d\u7684\u7d20\u56e0\u5b50\u3002\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u4e00\u4e2an^2\u7ea7\u7b5b\u6cd5\u7684\u65b9\u5f0f\u53bb\u7b5b\uff0c\u8fd9\u6837\u5c31\u4fdd\u8bc1\u4e86\u6bcf\u4e2a\u5408\u6570\u90fd\u4f1a\u88ab\u5176\u6240\u6709\u7d20\u56e0\u5b50\u7b5b\u4e00\u6b21\uff0c\u53ea\u8981\u5728\u7b5b\u7684\u65f6\u5019\u5728\u5176\u7ed3\u679c\u4e0a\u4e58\u4e0a\uff081-1/pi\uff09\u5373\u53ef\u3002 Fibonacci Fibonacci\u6570\u5217\u7684\u901a\u9879\u516c\u5f0f\u4e2d\u7531\u4e8e\uff08sqrt(5)-1\uff09^n\u592a\u5c0f\u4e86\uff0c\u6240\u4ee5\u53ef\u4ee5\u5ffd\u7565\uff0c\u65e0\u8bba\u662f\u5426\u5ffd\u7565\uff0cn\u90fd\u5fc5\u987b\u5927\u4e8e16\u3002 \u6269\u5c55\u6b27\u51e0\u91cc\u5fb7\u7b97\u6cd5 \u6269\u5c55\u6b27\u51e0\u91cc\u5fb7\u7b97\u6cd5\u6211\u4eec\u53ef\u4ee5\u7b80\u5355\u7684\u7406\u89e3\u4e3a\u6c42\u5173\u4e8ex\uff0cy\u7684\u65b9\u7a0b a*x+b*y=gcd(a,b) \u7684\u4e00\u7ec4\u6574\u6570\u89e3\u3002\u7528\u7b97\u6cd5\u6a21\u677f\u53ea\u80fd\u6c42\u51fa\u4e00\u7ec4\u89e3\uff0c\u800c\u6b64\u65b9\u7a0b\u6709\u6570\u7a77\u591a\u89e3\u3002\u8bbe\u5176\u4e00\u7ec4\u7279\u89e3\u4e3ax0,y0\u3002\u5219\u5176\u901a\u89e3\u5f62\u5f0f\u4e3a\uff1a x=x0-t*b/g\uff0cy=y0+t*a/g \u3002 \u5176\u4e2dg\u8868\u793agcd(a,b)\u3002t\u662f\u4e00\u4e2a\u7528\u6765\u534f\u8c03x\u548cy\u540c\u6b65\u53d8\u5316\u7684\u53d8\u91cf\u3002 \u8be5\u7b97\u6cd5\u540c\u6837\u53ef\u7528\u4e8e\u6c42\u89e3 a*x+b*y=c \u7684\u5f62\u5f0f\u7684\u65b9\u7a0b\u3002\u65b9\u6cd5\u662f\u5148\u6c42\u89e3 a*x+b*y=gcd(a,b) \u3002\u7136\u540e\u4e24\u7aef\u540c\u65f6\u9664\u4ee5gcd(a,b)\u518d\u4e58\u4ee5c\u5373\u53ef\u6574\u7406\u51fa\u539f\u65b9\u7a0b\u7684\u89e3\u3002\u5373 a*(x*c/g)+b*(y*c/g)=c \u3002\u8be5\u65b9\u7a0b\u6709\u89e3\u7684\u6761\u4ef6\u662fc\u80fd\u88abgcd(a,b)\u6574\u9664\u3002 \u6269\u5c55\u6b27\u51e0\u91cc\u5fb7\u662f\u5728\u6b27\u51e0\u91cc\u5fb7\u7b97\u6cd5\u57fa\u7840\u4e0a\u52a0\u5165\u4e86\u4e00\u4e9b\u4e1c\u897f\u3002 gcd(a,b)=gcd(b,a%b) => a*x1+b*y1 = b*x2 + a%b*y2 => x1=y2; y1=x2-[a/b]*y2; \u4e5f\u5c31\u662f\u539f\u6765\u7684\u6b27\u51e0\u91cc\u5fb7\u5728\u9012\u5f52\u8fc7\u7a0b\u4e2d\u503c\u524a\u51cf\u65b9\u7a0b\u53f3\u4fa7\uff0c\u800c\u6269\u5c55\u6b27\u51e0\u91cc\u5fb7\u8981\u540c\u65f6\u5bf9\u5de6\u4fa7\u8fdb\u884c\u53d8\u5316\u4ee5\u6c42\u89e3\u3002\u9012\u5f52\u5230\u6700\u5e95\u5c42\u65f6\u6709\uff1ab=0,gcd(a,b)=a; x=1,y=0; \u9664\u6cd5\u662f\u4e0d\u652f\u6301\u6a21\u8fd0\u7b97\u7684\uff0c\u56e0\u6b64\u6211\u4eec\u8981\u5c06\u9664\u6cd5\u8f6c\u5316\u4e3a\u4e58\u6cd5\uff0c\u4f8b\u5982\u9664\u4ee530\u53d8\u4e3a\u4e58\u4ee530\u7684\u9006\u5143\u3002 \u9006\u5143\u7684\u610f\u601d\u662f\uff0c\u5982\u679ca\u3001b\u4e92\u4e3amod c\u4e0b\u7684\u9006\u5143\uff0c\u5219a * b = 1 (mod c)\u3002 \u6c42\u9006\u5143\u53ef\u4ee5\u7528\u6269\u5c55\u6b27\u51e0\u91cc\u5fb7gcd(30,MOD,x,y)\uff0c\u628ax/gcd(30,MOD)\u6574\u7406\u52300\uff5eMOD-1\u8303\u56f4\u5185\u5373\u4e3a30\u7684\u9006\u5143\u3002 \u8d39\u9a6c\u5c0f\u5b9a\u7406 \u5373\uff1a\u5f53p\u662f\u8d28\u6570\u4e14a\u548cp\u4e92\u8d28\uff0c\u90a3\u4e48a^(p-1)=1 (mod p) \u800c\u9006\u5143\u7684\u5b9a\u4e49\u662fx * y=1 (mod p)\u5219y\u662fx\u7684\u9006\u5143\u3002\u4ee4x=a\uff0c\u4e14a\u4e0ep\u4e92\u8d28\uff0c\u5219\u7531a^(p-1)=1 (mod p)\u53ef\u5f97\uff1ay=a^(p-2)\u3002 \u5bf9\u4e8e\u6c42a\u7684\u9006\u5143\u8fd9\u4e2a\u95ee\u9898\uff0c a<p \u4e14p\u662f\u8d28\u6570\uff0c\u81ea\u7136\u53ef\u4ee5\u5229\u7528\u4e0a\u9762\u7684\u7ed3\u8bba\uff0ca\u7684\u9006\u5143\u5c31\u662fa^(p-2)\u3002 \u6b27\u62c9\u5b9a\u7406 \u6b27\u62c9\u5b9a\u7406\uff0c\u5bf9\u4e8e\u6b63\u6574\u6570a,n\uff0c\u82e5gcd(a,n)=1\uff0c\u5219\u6709a^euler(n)=1(mod n)\u3002 \u5feb\u901f\u5e42\u53d6\u6a21 \u5feb\u901f\u5e42\u53d6\u6a21\u7b97\u6cd5\uff0c\u53ea\u8981p * 2\u5728long long\u8303\u56f4\u5185\u90fd\u53ef\u4ee5\u8ba1\u7b97\uff0c\u5bf9\u4e8e\u7b97\u6cd5\u4e2dlong long * long long\u7684\u60c5\u51b5\u53ef\u80fd\u8d85\u754c\uff0c\u4f46\u662f\u6211\u4eec\u53ef\u4ee5\u7528\u4e00\u79cd\u7c7b\u4f3c\u4e8e\u5feb\u901f\u5e42\u7684\u65b9\u6cd5\u6765\u8fdb\u884c\u6b21\u4e58\u6cd5\u8ba1\u7b97\uff0c\u5373\u5feb\u901f\u5e42\u662f\u7528\u4e58\u6cd5\u4ee3\u66ff\u5e42\u8ba1\u7b97\u4ee5\u4fbf\u53ca\u65f6\u53d6\u6a21\uff0c\u800c\u6b64\u7b97\u6cd5\u5219\u662f\u7528\u52a0\u6cd5\u4ee3\u66ff\u4e58\u6cd5\u8ba1\u7b97\u53ca\u65f6\u53d6\u6a21\uff0c\u628a\u5feb\u901f\u5e42\u4e2d\u7684\u4e58\u6cd5\u6362\u6210\u52a0\u6cd5\uff0c\u5e73\u65b9\u6362\u6210\u4e582\u5373\u53ef\u3002 catalan\u6570 \u4ee4h(1)\uff1d1,h(0)=1\uff0ccatalan\u6570\u6ee1\u8db3 \u9012\u5f52\u5f0f\uff1a\u3000\u3000h(n)= h(0) * h(n-1)+h(1) * h(n-2) + ... + h(n-1)h(0) (\u5176\u4e2dn>=2) \u3000\u3000 \u53e6\u7c7b\u9012\u5f52\u5f0f\uff1a\u3000\u3000h(n)=((4 * n-2)/(n+1)) * h(n-1); \u3000\u3000 \u8be5\u9012\u63a8\u5173\u7cfb\u7684\u89e3\u4e3a\uff1a\u3000\u3000h(n)=C(2n,n)/(n+1) (n=1,2,3,...) \u5b83\u7684\u9002\u7528\u60c5\u51b5\u6709\uff1a 1\u3001\u53d6\u72692n\u4e2a\uff0c\u7269\u54c1\u5206a,b\u4e24\u79cd\uff0c\u4efb\u610f\u65f6\u523b\u624b\u4e2d\u7684a\u7269\u54c1\u6570<=b\u7269\u54c1\u6570\uff0c\u7684\u65b9\u6cd5\u6570\u4e3ah(n)\u3002\u6700\u7ec82n\u7269\u54c1\u4e2d\uff0c\u6709n\u4e2aa\uff0cn\u4e2ab\u3002 2\u3001\u628a(n+2)\u8fb9\u5f62\u5206\u5272\u6210\u82e5\u5e72\u4e2a\u4e09\u89d2\u5f62\u9762\u79ef\u7ec4\u5408\u7684\u65b9\u6cd5\u6570\u4e3ah(n)\u3002 3\u3001\u4e00\u5708\u67092n\u4e2a\u70b9\u4e24\u4e24\u8fde\u7ebf\u4e0d\u4ea4\u53c9\u7684\u65b9\u6cd5\u6570\u4e3ah(n)\u3002 4\u3001\u6709n\u4e2a\u7ed3\u70b9\u7684\u4e8c\u53c9\u6811\uff0c\u6709h(n)\u79cd\u4e0d\u540c\u7684\u6784\u9020\u3002 stirling\u516c\u5f0f stirling\u516c\u5f0f\uff1alim(n\u2192\u221e) (n/e)^n * (2\u03c0n)^(1/2) / n! = 1\u3002\u53ef\u7528\u6765\u6c42n!\u7684\u4f4d\u6570\u3002 Miller-rabin Miller-rabin\u7b97\u6cd5\u662f\u4e00\u4e2a\u7528\u6765\u5feb\u901f\u5224\u65ad\u4e00\u4e2a\u6b63\u6574\u6570\u662f\u5426\u4e3a\u7d20\u6570\u7684\u7b97\u6cd5\u3002\u5b83\u5229\u7528\u4e86\u8d39\u9a6c\u5c0f\u5b9a\u7406\uff0c\u5373\uff1a\u5982\u679cp\u662f\u8d28\u6570\uff0c\u4e14a\uff0cp\u4e92\u8d28\uff0c\u90a3\u4e48a^(p-1) mod p\u6052\u7b49\u4e8e1\u3002\u4e5f\u5c31\u662f\u5bf9\u4e8e\u6240\u6709\u5c0f\u4e8ep\u7684\u6b63\u6574\u6570a\u6765\u8bf4\u90fd\u5e94\u8be5\u590d\u5408a^(p-1) mod p\u6052\u7b49\u4e8e1\u3002\u90a3\u4e48\u6839\u636e\u9006\u5426\u547d\u9898\uff0c\u5bf9\u4e8e\u4e00\u4e2ap\uff0c\u6211\u4eec\u53ea\u8981\u4e3e\u51fa\u4e00\u4e2aa\uff08a < p\uff09\u4e0d\u7b26\u5408\u8fd9\u4e2a\u6052\u7b49\u5f0f\uff0c\u5219\u53ef\u5224\u5b9ap\u4e0d\u662f\u7d20\u6570\u3002Miller-rabin\u7b97\u6cd5\u5c31\u662f\u591a\u6b21\u7528\u4e0d\u540c\u7684a\u6765\u5c1d\u8bd5p\u662f\u5426\u4e3a\u7d20\u6570\u3002 \u4f46\u662f\u6bcf\u6b21\u5c1d\u8bd5\u8fc7\u7a0b\u4e2d\u8fd8\u505a\u4e86\u4e00\u4e2a\u4f18\u5316\u64cd\u4f5c\uff0c\u4ee5\u63d0\u9ad8\u7528\u5c11\u91cf\u7684a\u68c0\u6d4b\u51fap\u4e0d\u662f\u7d20\u6570\u7684\u6982\u7387\u3002\u8fd9\u4e2a\u4f18\u5316\u53eb\u505a\u4e8c\u6b21\u63a2\u6d4b\u3002\u5b83\u662f\u6839\u636e\u4e00\u4e2a\u5b9a\u7406\uff1a\u5982\u679cp\u662f\u4e00\u4e2a\u7d20\u6570\uff0c\u90a3\u4e48\u5bf9\u4e8ex(0 < x < p)\uff0c\u82e5x^2 mod p \u7b49\u4e8e1\uff0c\u5219x=1\u6216p-1\u3002\u9006\u5426\u547d\u9898\uff1a\u5982\u679c\u5bf9\u4e8ex(0 < x < p)\uff0c\u82e5x^2 mod p \u4e0d\u7b49\u4e8e1\uff0c\u5219p\u4e0d\u662f\u7d20\u6570\u3002\u6839\u636e\u8fd9\u4e2a\u5b9a\u7406\uff0c\u6211\u4eec\u8981\u8ba1\u7b97a^(p-1) mod p\u662f\u5426\u7b49\u4e8e1\u65f6\uff0c\u53ef\u4ee5\u8fd9\u6837\u8ba1\u7b97\uff0c\u8bbep-1=(2^t) * k\u3002\u6211\u4eec\u4ecea^k\u5f00\u59cb\uff0c\u4e0d\u65ad\u5c06\u5176\u5e73\u65b9\u76f4\u5230\u5f97\u5230a^(p-1)\uff0c\u4e00\u65e6\u53d1\u73b0\u67d0\u6b21\u5e73\u65b9\u540emod p\u7b49\u4e8e1\u4e86\uff0c\u90a3\u4e48\u8bf4\u660e\u7b26\u5408\u4e86\u4e8c\u6b21\u63a2\u6d4b\u5b9a\u7406\u7684\u9006\u5426\u547d\u9898\u4f7f\u7528\u6761\u4ef6\uff0c\u7acb\u5373\u68c0\u67e5x\u662f\u5426\u7b49\u4e8e1\u6216p-1\uff0c\u5982\u679c\u4e0d\u662f\u5219\u53ef\u76f4\u63a5\u5224\u5b9ap\u4e3a\u5408\u6570\u3002 pollard-rho \u8fd9\u662f\u4e00\u4e2a\u7528\u6765\u5feb\u901f\u5bf9\u6574\u6570\u8fdb\u884c\u8d28\u56e0\u6570\u5206\u89e3\u7684\u7b97\u6cd5\uff0c\u9700\u8981\u4e0eMiller-rabin\u5171\u540c\u4f7f\u7528\u3002\u6c42n\u7684\u8d28\u56e0\u5b50\u7684\u57fa\u672c\u8fc7\u7a0b\u662f\uff0c\u5148\u5224\u65adn\u662f\u5426\u4e3a\u7d20\u6570\uff0c\u5982\u679c\u4e0d\u662f\u5219\u6309\u7167\u4e00\u4e2a\u4f2a\u968f\u673a\u6570\u751f\u6210\u8fc7\u7a0b\u6765\u751f\u6210\u968f\u673a\u6570\u5e8f\u5217\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u751f\u6210\u7684\u968f\u673a\u6570\u5224\u65ad\u4e0en\u662f\u5426\u4e92\u8d28\uff0c\u5982\u679c\u4e92\u8d28\u5219\u5c1d\u8bd5\u4e0b\u4e00\u4e2a\u968f\u673a\u6570\u3002\u5982\u679c\u4e0d\u4e92\u8d28\u5219\u5c06\u5176\u516c\u56e0\u5b50\u8bb0\u4f5cp\uff0c\u9012\u5f52\u6c42\u89e3p\u548cn/p\u7684\u56e0\u5b50\u3002\u5982\u679cn\u662f\u7d20\u6570\u5219\u76f4\u63a5\u8fd4\u56den\u4e3a\u5176\u7d20\u56e0\u5b50\u3002 \u5c0f\u4e8e\u7b49\u4e8ex\u7684\u8d28\u6570\u7684\u4e2a\u6570\u662flog(x)\u7ea7\u7684\u3002 c(n,k)(k<=n)\u7684\u5947\u5076\u6027\u53d6\u51b3\u4e8e(n-k)\u4e0ek\u7684\u4e8c\u8fdb\u5236\u8868\u8fbe\u5f0f\u662f\u5426\u5b58\u5728\u540c\u4e00\u4f4d\u4e0a\u7684\u4e24\u4e2a\u6570\u7801\u5747\u4e3a1\uff0c\u82e5\u5b58\u5728\uff0c\u5219\u4e3a\u5076\u6570\uff0c\u53cd\u4e4b\u4e3a\u5947\u6570 \u4f7f\u7528lowbit\uff0c\u5373\u4e8c\u8fdb\u5236\u7801\u4e2d\u7684\u6700\u9760\u540e\u76841\u548c\u540e\u9762\u76840\u7ec4\u6210\u7684\u6570\u5b57\uff0c\u52a0\u4e0a\u6216\u51cf\u53bb\u8fd9\u4e2a\u5c31\u76f8\u5f53\u4e8e\u628a\u6570\u5b57\u5f52\u7ed3\u5230\u5de6\u4fa7\u6700\u8fd1\u7684\u6216\u8005\u53f3\u4fa7\u6700\u8fd1\u76842\u7684x\u6b21\u5e42\u6574\u5757\u4e0a\uff0cx\u521a\u597d\u5927\u4e8e\u8be5\u6570\u7684\u542b\u6709\u56e0\u5b502\u7684\u4e2a\u6570\u3002 \u7ea6\u745f\u592b\u95ee\u9898 \u7ea6\u745f\u592b\u95ee\u9898\uff0c\u6709n\u4e2a\u4eba\u7ad9\u6210\u4e00\u5708\uff0c\u4f9d\u6b21\u7f16\u53f70\uff5en-1\uff0c\u7f16\u53f7\u4e3a(m-1)%n\u7684\u4eba\u51fa\u5c40\uff0c\u7136\u540e\u5269\u4e0b\u7684n-1\u4e2a\u4eba\u91cd\u65b0\u7f16\u53f7\uff0c\u8ba9\u539f\u6765\u5728m\u540e\u9762\u7684\u90a3\u4e2a\u4eba\u7f16\u53f7\u4e3a0\uff0c\u5269\u4e0b\u7684\u4f9d\u6b21\u9012 \u589e\uff0c\u7f16\u53f7\u4ece1\uff5en-2\u3002\u518d\u6b21\u8ba9\u7f16\u53f7\u4e3a(m-1)%(n-1)\u7684\u4eba\u51fa\u5c40\u3002\u4e0d\u65ad\u91cd\u590d\u6b64\u8fc7\u7a0b\uff0c\u76f4\u81f3\u53ea\u5269\u4e00\u4e2a\u4eba\u4e3a\u6b62\u3002\u95ee\u8fd9\u4e2a\u4eba\u5728\u7b2c\u4e00\u6b21\u7f16\u53f7\u65f6\u7684\u7f16\u53f7\u3002\u60f3\u8981\u89e3\u51b3\u7ea6\u745f\u592b\u95ee\u9898\u6211 \u4eec\u8981\u9006\u63a8\u3002\u8bd5\u8003\u8651\u521a\u624d\u8fc7\u7a0b\u7684\u9006\u8fc7\u7a0b\u3002\u5f53\u524d\u5269\u4f59x\u4eba\u4e14\u5df2\u7f16\u53f7\uff0c\u9006\u8fc7\u7a0b\u4e5f\u5c31\u662f\u628a\u90a3\u4e2a\u521a\u521a\u51fa\u5c40\u7684\u4eba\u91cd\u65b0\u52a0\u8fdb\u5708\u91cc\u6765\uff0c\u5e76\u8fd8\u539f\u4e0a\u4e00\u6b21\u7684\u7f16\u53f7\u3002\u6211\u4eec\u9700\u8981\u505a\u7684\u662f\u5728\u5f53\u524dx \u4eba\u4e2d\u7684\u7f16\u53f7\u4e3a0\u7684\u90a3\u4e2a\u4eba\u524d\u9762\u63d2\u5165\u4e00\u4e2a\u4eba\uff0c\u8ba9\u90a3\u4e2a\u4eba\u7684\u7f16\u53f7\u4e3a(m-1)%(x+1)\uff0c\u5176\u4f59\u4eba\u7684\u7f16\u53f7\u53ef\u6839\u636e\u8fd9\u4e2a\u65b0\u52a0\u8fdb\u6765\u7684\u4eba\u7684\u7f16\u53f7\u6765\u786e\u5b9a\u3002\u6211\u4eec\u8981\u4ece\u6700\u540e\u5269\u4e00\u4e2a\u4eba\u7684\u60c5\u51b5 \u5f00\u59cb\u9006\u63a8\u5230\u5269\u4f59n\u4e2a\u4eba\u7684\u60c5\u51b5\u3002\u6211\u4eec\u53ea\u9700\u8981\u8ba9\u90a3\u4e2a\u6700\u7ec8\u80dc\u5229\u7684\u4eba\u7684\u7f16\u53f7\u6309\u7167\u9006\u8fc7\u7a0b\u7684\u7f16\u53f7\u53d8\u5316\u89c4\u5f8b\u8fdb\u884c\u53d8\u5316\u5373\u53ef\u3002\u5176\u53d8\u5316\u89c4\u5f8b\u4e3a\uff0c\u8bbe\u539f\u6765\u83b7\u80dc\u8005\u5e8f\u53f7\u4e3aa\uff0c\u52a0\u5165\u4e00\u4e2a \u51fa\u5c40\u7684\u4eba\u4e4b\u540e\u4eba\u6570\u4e3ax\uff0c\u5219\u73b0\u5728\u83b7\u80dc\u8005\u7684\u5e8f\u53f7\u5e94\u5f53\u53d8\u4e3a(a+m)%x\uff0c\u5373\u8ba9\u5e8f\u53f7\u8ddf\u539f\u6765\u6bd4\u9519\u4f4d\u4e86m\u4e2a\u4eba\u3002\u603b\u7ed3\u6210\u9012\u63a8\u516c\u5f0f\uff1af(n)=(f(n-1)+m)%n \u8981\u6c42\u7528\u4e24\u4e24\u4ea4\u6362\u7684\u65b9\u5f0f\u7ed9\u4e00\u4e2a\u6570\u5217\u6392\u5e8f\uff0c\u4ea4\u6362f[i]\u548cf[j]\u7684\u4ee3\u4ef7\u4e3af[i]+f[j]\uff0c\u6c42\u6700\u5c0f\u4ee3\u4ef7\u3002\u5177\u4f53\u65b9\u6cd5\u5c31\u662f\u5728\u6570\u5217\u4e2d\u627e\u7f6e\u6362\u73af\uff0c\u6bcf\u4e2a\u73af\u6709\u4e24\u79cd\u5904\u7406\u65b9\u5f0f\uff0c\u4e00\u79cd\u662f\u7528\u6700\u5c0f\u7684\u5143\u7d20\u5c06\u73af\u91cc\u6240\u6709\u5143\u7d20\u5f52\u4f4d\uff0c\u53e6\u4e00\u79cd\u662f\u7528\u5168\u6570\u5217\u6700\u5c0f\u5143\u7d20\u4e0e\u73af\u5185\u6700\u5c0f\u5143\u7d20\u4ea4\u6362\uff0c\u5e76\u5728\u73af\u5185\u7528\u8fd9\u4e2a\u5168\u6570\u5217\u6700\u5c0f\u5143\u7d20\u5c06\u73af\u91cc\u6240\u6709\u5143\u7d20\u5f52\u4f4d\uff0c\u518d\u4e0e\u539f\u73af\u5185\u6700\u5c0f\u5143\u7d20\u4ea4\u6362\u56de\u6765\u3002","title":"Number Theory"},{"location":"competitive_programming/number_theory/#number-theory","text":"\u5982\u679c\u4e00\u4e2a\u8d28\u6570\u53ef\u4ee5\u8868\u793a\u62104x+1\u7684\u5f62\u5f0f\uff0c\u90a3\u4e48\u5b83\u4e00\u5b9a\u53ef\u4ee5\u8868\u793a\u6210\u4e24\u4e2a\u6570\u5b57\u7684\u5e73\u65b9\u548c\u3002\uff082\u662f\u7279\u6b8a\u60c5\u51b5\uff09 \u6839\u636e\u6b27\u62c9\u5e38\u6570\uff0c(M/1+M/2+...+M/M)\u7ea6\u7b49\u4e8eMlnM\u3002\u5728\u6570\u8bba\u7684\u7b97\u6cd5\u4e2d\u8ba1\u7b97\u65f6\u95f4\u590d\u6742\u5ea6\u65f6\u53ef\u80fd\u4f1a\u7528\u5230\u3002","title":"Number Theory"},{"location":"competitive_programming/number_theory/#_1","text":"\u6b27\u62c9\u51fd\u6570euler(n)\u8868\u793a\u5c0f\u4e8e\u7b49\u4e8en\u7684\u4e0en\u4e92\u8d28\u7684\u6570\u7684\u4e2a\u6570\uff0c\u5728\u6b27\u62c9\u51fd\u6570\uff0c\u8ba4\u4e3a\u5982\u679c\u4e24\u6570\u6700\u5927\u516c\u7ea6\u6570\u4e3a1\uff0c\u5219\u4e24\u6570\u4e92\u8d28\u3002\u6240\u4ee5\uff0cn\u4e0e1\u4e5f\u4e92\u8d28\uff0c\u4e14euler(1)=1\u3002 \u8ba1\u7b97\u516c\u5f0f\u4e3a\uff1a\u03c6(x)=x(1-1/p1)(1-1/p2)(1-1/p3)(1-1/p4)\u2026..(1-1/pn),\u5176\u4e2dp1, p2\u2026\u2026pn\u4e3ax\u7684\u6240\u6709\u4e0d\u91cd\u590d\u7684\u8d28\u56e0\u6570\uff0cx\u662f\u4e0d\u4e3a0\u7684\u6574\u6570\u3002 \u6b27\u62c9\u51fd\u6570\u9012\u63a8\u6c42\u6cd5\uff1a\u6b27\u62c9\u51fd\u6570\u7684\u539f\u59cb\u516c\u5f0f\u662f\u7528n\u8fde\u4e58\uff081-1/pi\uff09\u3002pi\u662fn\u7684\u4e0d\u91cd\u590d\u7684\u7d20\u56e0\u5b50\u3002\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u4e00\u4e2an^2\u7ea7\u7b5b\u6cd5\u7684\u65b9\u5f0f\u53bb\u7b5b\uff0c\u8fd9\u6837\u5c31\u4fdd\u8bc1\u4e86\u6bcf\u4e2a\u5408\u6570\u90fd\u4f1a\u88ab\u5176\u6240\u6709\u7d20\u56e0\u5b50\u7b5b\u4e00\u6b21\uff0c\u53ea\u8981\u5728\u7b5b\u7684\u65f6\u5019\u5728\u5176\u7ed3\u679c\u4e0a\u4e58\u4e0a\uff081-1/pi\uff09\u5373\u53ef\u3002","title":"\u6b27\u62c9\u51fd\u6570"},{"location":"competitive_programming/number_theory/#fibonacci","text":"Fibonacci\u6570\u5217\u7684\u901a\u9879\u516c\u5f0f\u4e2d\u7531\u4e8e\uff08sqrt(5)-1\uff09^n\u592a\u5c0f\u4e86\uff0c\u6240\u4ee5\u53ef\u4ee5\u5ffd\u7565\uff0c\u65e0\u8bba\u662f\u5426\u5ffd\u7565\uff0cn\u90fd\u5fc5\u987b\u5927\u4e8e16\u3002","title":"Fibonacci"},{"location":"competitive_programming/number_theory/#_2","text":"\u6269\u5c55\u6b27\u51e0\u91cc\u5fb7\u7b97\u6cd5\u6211\u4eec\u53ef\u4ee5\u7b80\u5355\u7684\u7406\u89e3\u4e3a\u6c42\u5173\u4e8ex\uff0cy\u7684\u65b9\u7a0b a*x+b*y=gcd(a,b) \u7684\u4e00\u7ec4\u6574\u6570\u89e3\u3002\u7528\u7b97\u6cd5\u6a21\u677f\u53ea\u80fd\u6c42\u51fa\u4e00\u7ec4\u89e3\uff0c\u800c\u6b64\u65b9\u7a0b\u6709\u6570\u7a77\u591a\u89e3\u3002\u8bbe\u5176\u4e00\u7ec4\u7279\u89e3\u4e3ax0,y0\u3002\u5219\u5176\u901a\u89e3\u5f62\u5f0f\u4e3a\uff1a x=x0-t*b/g\uff0cy=y0+t*a/g \u3002 \u5176\u4e2dg\u8868\u793agcd(a,b)\u3002t\u662f\u4e00\u4e2a\u7528\u6765\u534f\u8c03x\u548cy\u540c\u6b65\u53d8\u5316\u7684\u53d8\u91cf\u3002 \u8be5\u7b97\u6cd5\u540c\u6837\u53ef\u7528\u4e8e\u6c42\u89e3 a*x+b*y=c \u7684\u5f62\u5f0f\u7684\u65b9\u7a0b\u3002\u65b9\u6cd5\u662f\u5148\u6c42\u89e3 a*x+b*y=gcd(a,b) \u3002\u7136\u540e\u4e24\u7aef\u540c\u65f6\u9664\u4ee5gcd(a,b)\u518d\u4e58\u4ee5c\u5373\u53ef\u6574\u7406\u51fa\u539f\u65b9\u7a0b\u7684\u89e3\u3002\u5373 a*(x*c/g)+b*(y*c/g)=c \u3002\u8be5\u65b9\u7a0b\u6709\u89e3\u7684\u6761\u4ef6\u662fc\u80fd\u88abgcd(a,b)\u6574\u9664\u3002 \u6269\u5c55\u6b27\u51e0\u91cc\u5fb7\u662f\u5728\u6b27\u51e0\u91cc\u5fb7\u7b97\u6cd5\u57fa\u7840\u4e0a\u52a0\u5165\u4e86\u4e00\u4e9b\u4e1c\u897f\u3002 gcd(a,b)=gcd(b,a%b) => a*x1+b*y1 = b*x2 + a%b*y2 => x1=y2; y1=x2-[a/b]*y2; \u4e5f\u5c31\u662f\u539f\u6765\u7684\u6b27\u51e0\u91cc\u5fb7\u5728\u9012\u5f52\u8fc7\u7a0b\u4e2d\u503c\u524a\u51cf\u65b9\u7a0b\u53f3\u4fa7\uff0c\u800c\u6269\u5c55\u6b27\u51e0\u91cc\u5fb7\u8981\u540c\u65f6\u5bf9\u5de6\u4fa7\u8fdb\u884c\u53d8\u5316\u4ee5\u6c42\u89e3\u3002\u9012\u5f52\u5230\u6700\u5e95\u5c42\u65f6\u6709\uff1ab=0,gcd(a,b)=a; x=1,y=0; \u9664\u6cd5\u662f\u4e0d\u652f\u6301\u6a21\u8fd0\u7b97\u7684\uff0c\u56e0\u6b64\u6211\u4eec\u8981\u5c06\u9664\u6cd5\u8f6c\u5316\u4e3a\u4e58\u6cd5\uff0c\u4f8b\u5982\u9664\u4ee530\u53d8\u4e3a\u4e58\u4ee530\u7684\u9006\u5143\u3002 \u9006\u5143\u7684\u610f\u601d\u662f\uff0c\u5982\u679ca\u3001b\u4e92\u4e3amod c\u4e0b\u7684\u9006\u5143\uff0c\u5219a * b = 1 (mod c)\u3002 \u6c42\u9006\u5143\u53ef\u4ee5\u7528\u6269\u5c55\u6b27\u51e0\u91cc\u5fb7gcd(30,MOD,x,y)\uff0c\u628ax/gcd(30,MOD)\u6574\u7406\u52300\uff5eMOD-1\u8303\u56f4\u5185\u5373\u4e3a30\u7684\u9006\u5143\u3002","title":"\u6269\u5c55\u6b27\u51e0\u91cc\u5fb7\u7b97\u6cd5"},{"location":"competitive_programming/number_theory/#_3","text":"\u5373\uff1a\u5f53p\u662f\u8d28\u6570\u4e14a\u548cp\u4e92\u8d28\uff0c\u90a3\u4e48a^(p-1)=1 (mod p) \u800c\u9006\u5143\u7684\u5b9a\u4e49\u662fx * y=1 (mod p)\u5219y\u662fx\u7684\u9006\u5143\u3002\u4ee4x=a\uff0c\u4e14a\u4e0ep\u4e92\u8d28\uff0c\u5219\u7531a^(p-1)=1 (mod p)\u53ef\u5f97\uff1ay=a^(p-2)\u3002 \u5bf9\u4e8e\u6c42a\u7684\u9006\u5143\u8fd9\u4e2a\u95ee\u9898\uff0c a<p \u4e14p\u662f\u8d28\u6570\uff0c\u81ea\u7136\u53ef\u4ee5\u5229\u7528\u4e0a\u9762\u7684\u7ed3\u8bba\uff0ca\u7684\u9006\u5143\u5c31\u662fa^(p-2)\u3002","title":"\u8d39\u9a6c\u5c0f\u5b9a\u7406"},{"location":"competitive_programming/number_theory/#_4","text":"\u6b27\u62c9\u5b9a\u7406\uff0c\u5bf9\u4e8e\u6b63\u6574\u6570a,n\uff0c\u82e5gcd(a,n)=1\uff0c\u5219\u6709a^euler(n)=1(mod n)\u3002","title":"\u6b27\u62c9\u5b9a\u7406"},{"location":"competitive_programming/number_theory/#_5","text":"\u5feb\u901f\u5e42\u53d6\u6a21\u7b97\u6cd5\uff0c\u53ea\u8981p * 2\u5728long long\u8303\u56f4\u5185\u90fd\u53ef\u4ee5\u8ba1\u7b97\uff0c\u5bf9\u4e8e\u7b97\u6cd5\u4e2dlong long * long long\u7684\u60c5\u51b5\u53ef\u80fd\u8d85\u754c\uff0c\u4f46\u662f\u6211\u4eec\u53ef\u4ee5\u7528\u4e00\u79cd\u7c7b\u4f3c\u4e8e\u5feb\u901f\u5e42\u7684\u65b9\u6cd5\u6765\u8fdb\u884c\u6b21\u4e58\u6cd5\u8ba1\u7b97\uff0c\u5373\u5feb\u901f\u5e42\u662f\u7528\u4e58\u6cd5\u4ee3\u66ff\u5e42\u8ba1\u7b97\u4ee5\u4fbf\u53ca\u65f6\u53d6\u6a21\uff0c\u800c\u6b64\u7b97\u6cd5\u5219\u662f\u7528\u52a0\u6cd5\u4ee3\u66ff\u4e58\u6cd5\u8ba1\u7b97\u53ca\u65f6\u53d6\u6a21\uff0c\u628a\u5feb\u901f\u5e42\u4e2d\u7684\u4e58\u6cd5\u6362\u6210\u52a0\u6cd5\uff0c\u5e73\u65b9\u6362\u6210\u4e582\u5373\u53ef\u3002","title":"\u5feb\u901f\u5e42\u53d6\u6a21"},{"location":"competitive_programming/number_theory/#catalan","text":"\u4ee4h(1)\uff1d1,h(0)=1\uff0ccatalan\u6570\u6ee1\u8db3 \u9012\u5f52\u5f0f\uff1a\u3000\u3000h(n)= h(0) * h(n-1)+h(1) * h(n-2) + ... + h(n-1)h(0) (\u5176\u4e2dn>=2) \u3000\u3000 \u53e6\u7c7b\u9012\u5f52\u5f0f\uff1a\u3000\u3000h(n)=((4 * n-2)/(n+1)) * h(n-1); \u3000\u3000 \u8be5\u9012\u63a8\u5173\u7cfb\u7684\u89e3\u4e3a\uff1a\u3000\u3000h(n)=C(2n,n)/(n+1) (n=1,2,3,...) \u5b83\u7684\u9002\u7528\u60c5\u51b5\u6709\uff1a 1\u3001\u53d6\u72692n\u4e2a\uff0c\u7269\u54c1\u5206a,b\u4e24\u79cd\uff0c\u4efb\u610f\u65f6\u523b\u624b\u4e2d\u7684a\u7269\u54c1\u6570<=b\u7269\u54c1\u6570\uff0c\u7684\u65b9\u6cd5\u6570\u4e3ah(n)\u3002\u6700\u7ec82n\u7269\u54c1\u4e2d\uff0c\u6709n\u4e2aa\uff0cn\u4e2ab\u3002 2\u3001\u628a(n+2)\u8fb9\u5f62\u5206\u5272\u6210\u82e5\u5e72\u4e2a\u4e09\u89d2\u5f62\u9762\u79ef\u7ec4\u5408\u7684\u65b9\u6cd5\u6570\u4e3ah(n)\u3002 3\u3001\u4e00\u5708\u67092n\u4e2a\u70b9\u4e24\u4e24\u8fde\u7ebf\u4e0d\u4ea4\u53c9\u7684\u65b9\u6cd5\u6570\u4e3ah(n)\u3002 4\u3001\u6709n\u4e2a\u7ed3\u70b9\u7684\u4e8c\u53c9\u6811\uff0c\u6709h(n)\u79cd\u4e0d\u540c\u7684\u6784\u9020\u3002","title":"catalan\u6570"},{"location":"competitive_programming/number_theory/#stirling","text":"stirling\u516c\u5f0f\uff1alim(n\u2192\u221e) (n/e)^n * (2\u03c0n)^(1/2) / n! = 1\u3002\u53ef\u7528\u6765\u6c42n!\u7684\u4f4d\u6570\u3002","title":"stirling\u516c\u5f0f"},{"location":"competitive_programming/number_theory/#miller-rabin","text":"Miller-rabin\u7b97\u6cd5\u662f\u4e00\u4e2a\u7528\u6765\u5feb\u901f\u5224\u65ad\u4e00\u4e2a\u6b63\u6574\u6570\u662f\u5426\u4e3a\u7d20\u6570\u7684\u7b97\u6cd5\u3002\u5b83\u5229\u7528\u4e86\u8d39\u9a6c\u5c0f\u5b9a\u7406\uff0c\u5373\uff1a\u5982\u679cp\u662f\u8d28\u6570\uff0c\u4e14a\uff0cp\u4e92\u8d28\uff0c\u90a3\u4e48a^(p-1) mod p\u6052\u7b49\u4e8e1\u3002\u4e5f\u5c31\u662f\u5bf9\u4e8e\u6240\u6709\u5c0f\u4e8ep\u7684\u6b63\u6574\u6570a\u6765\u8bf4\u90fd\u5e94\u8be5\u590d\u5408a^(p-1) mod p\u6052\u7b49\u4e8e1\u3002\u90a3\u4e48\u6839\u636e\u9006\u5426\u547d\u9898\uff0c\u5bf9\u4e8e\u4e00\u4e2ap\uff0c\u6211\u4eec\u53ea\u8981\u4e3e\u51fa\u4e00\u4e2aa\uff08a < p\uff09\u4e0d\u7b26\u5408\u8fd9\u4e2a\u6052\u7b49\u5f0f\uff0c\u5219\u53ef\u5224\u5b9ap\u4e0d\u662f\u7d20\u6570\u3002Miller-rabin\u7b97\u6cd5\u5c31\u662f\u591a\u6b21\u7528\u4e0d\u540c\u7684a\u6765\u5c1d\u8bd5p\u662f\u5426\u4e3a\u7d20\u6570\u3002 \u4f46\u662f\u6bcf\u6b21\u5c1d\u8bd5\u8fc7\u7a0b\u4e2d\u8fd8\u505a\u4e86\u4e00\u4e2a\u4f18\u5316\u64cd\u4f5c\uff0c\u4ee5\u63d0\u9ad8\u7528\u5c11\u91cf\u7684a\u68c0\u6d4b\u51fap\u4e0d\u662f\u7d20\u6570\u7684\u6982\u7387\u3002\u8fd9\u4e2a\u4f18\u5316\u53eb\u505a\u4e8c\u6b21\u63a2\u6d4b\u3002\u5b83\u662f\u6839\u636e\u4e00\u4e2a\u5b9a\u7406\uff1a\u5982\u679cp\u662f\u4e00\u4e2a\u7d20\u6570\uff0c\u90a3\u4e48\u5bf9\u4e8ex(0 < x < p)\uff0c\u82e5x^2 mod p \u7b49\u4e8e1\uff0c\u5219x=1\u6216p-1\u3002\u9006\u5426\u547d\u9898\uff1a\u5982\u679c\u5bf9\u4e8ex(0 < x < p)\uff0c\u82e5x^2 mod p \u4e0d\u7b49\u4e8e1\uff0c\u5219p\u4e0d\u662f\u7d20\u6570\u3002\u6839\u636e\u8fd9\u4e2a\u5b9a\u7406\uff0c\u6211\u4eec\u8981\u8ba1\u7b97a^(p-1) mod p\u662f\u5426\u7b49\u4e8e1\u65f6\uff0c\u53ef\u4ee5\u8fd9\u6837\u8ba1\u7b97\uff0c\u8bbep-1=(2^t) * k\u3002\u6211\u4eec\u4ecea^k\u5f00\u59cb\uff0c\u4e0d\u65ad\u5c06\u5176\u5e73\u65b9\u76f4\u5230\u5f97\u5230a^(p-1)\uff0c\u4e00\u65e6\u53d1\u73b0\u67d0\u6b21\u5e73\u65b9\u540emod p\u7b49\u4e8e1\u4e86\uff0c\u90a3\u4e48\u8bf4\u660e\u7b26\u5408\u4e86\u4e8c\u6b21\u63a2\u6d4b\u5b9a\u7406\u7684\u9006\u5426\u547d\u9898\u4f7f\u7528\u6761\u4ef6\uff0c\u7acb\u5373\u68c0\u67e5x\u662f\u5426\u7b49\u4e8e1\u6216p-1\uff0c\u5982\u679c\u4e0d\u662f\u5219\u53ef\u76f4\u63a5\u5224\u5b9ap\u4e3a\u5408\u6570\u3002","title":"Miller-rabin"},{"location":"competitive_programming/number_theory/#pollard-rho","text":"\u8fd9\u662f\u4e00\u4e2a\u7528\u6765\u5feb\u901f\u5bf9\u6574\u6570\u8fdb\u884c\u8d28\u56e0\u6570\u5206\u89e3\u7684\u7b97\u6cd5\uff0c\u9700\u8981\u4e0eMiller-rabin\u5171\u540c\u4f7f\u7528\u3002\u6c42n\u7684\u8d28\u56e0\u5b50\u7684\u57fa\u672c\u8fc7\u7a0b\u662f\uff0c\u5148\u5224\u65adn\u662f\u5426\u4e3a\u7d20\u6570\uff0c\u5982\u679c\u4e0d\u662f\u5219\u6309\u7167\u4e00\u4e2a\u4f2a\u968f\u673a\u6570\u751f\u6210\u8fc7\u7a0b\u6765\u751f\u6210\u968f\u673a\u6570\u5e8f\u5217\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u751f\u6210\u7684\u968f\u673a\u6570\u5224\u65ad\u4e0en\u662f\u5426\u4e92\u8d28\uff0c\u5982\u679c\u4e92\u8d28\u5219\u5c1d\u8bd5\u4e0b\u4e00\u4e2a\u968f\u673a\u6570\u3002\u5982\u679c\u4e0d\u4e92\u8d28\u5219\u5c06\u5176\u516c\u56e0\u5b50\u8bb0\u4f5cp\uff0c\u9012\u5f52\u6c42\u89e3p\u548cn/p\u7684\u56e0\u5b50\u3002\u5982\u679cn\u662f\u7d20\u6570\u5219\u76f4\u63a5\u8fd4\u56den\u4e3a\u5176\u7d20\u56e0\u5b50\u3002 \u5c0f\u4e8e\u7b49\u4e8ex\u7684\u8d28\u6570\u7684\u4e2a\u6570\u662flog(x)\u7ea7\u7684\u3002 c(n,k)(k<=n)\u7684\u5947\u5076\u6027\u53d6\u51b3\u4e8e(n-k)\u4e0ek\u7684\u4e8c\u8fdb\u5236\u8868\u8fbe\u5f0f\u662f\u5426\u5b58\u5728\u540c\u4e00\u4f4d\u4e0a\u7684\u4e24\u4e2a\u6570\u7801\u5747\u4e3a1\uff0c\u82e5\u5b58\u5728\uff0c\u5219\u4e3a\u5076\u6570\uff0c\u53cd\u4e4b\u4e3a\u5947\u6570 \u4f7f\u7528lowbit\uff0c\u5373\u4e8c\u8fdb\u5236\u7801\u4e2d\u7684\u6700\u9760\u540e\u76841\u548c\u540e\u9762\u76840\u7ec4\u6210\u7684\u6570\u5b57\uff0c\u52a0\u4e0a\u6216\u51cf\u53bb\u8fd9\u4e2a\u5c31\u76f8\u5f53\u4e8e\u628a\u6570\u5b57\u5f52\u7ed3\u5230\u5de6\u4fa7\u6700\u8fd1\u7684\u6216\u8005\u53f3\u4fa7\u6700\u8fd1\u76842\u7684x\u6b21\u5e42\u6574\u5757\u4e0a\uff0cx\u521a\u597d\u5927\u4e8e\u8be5\u6570\u7684\u542b\u6709\u56e0\u5b502\u7684\u4e2a\u6570\u3002","title":"pollard-rho"},{"location":"competitive_programming/number_theory/#_6","text":"\u7ea6\u745f\u592b\u95ee\u9898\uff0c\u6709n\u4e2a\u4eba\u7ad9\u6210\u4e00\u5708\uff0c\u4f9d\u6b21\u7f16\u53f70\uff5en-1\uff0c\u7f16\u53f7\u4e3a(m-1)%n\u7684\u4eba\u51fa\u5c40\uff0c\u7136\u540e\u5269\u4e0b\u7684n-1\u4e2a\u4eba\u91cd\u65b0\u7f16\u53f7\uff0c\u8ba9\u539f\u6765\u5728m\u540e\u9762\u7684\u90a3\u4e2a\u4eba\u7f16\u53f7\u4e3a0\uff0c\u5269\u4e0b\u7684\u4f9d\u6b21\u9012 \u589e\uff0c\u7f16\u53f7\u4ece1\uff5en-2\u3002\u518d\u6b21\u8ba9\u7f16\u53f7\u4e3a(m-1)%(n-1)\u7684\u4eba\u51fa\u5c40\u3002\u4e0d\u65ad\u91cd\u590d\u6b64\u8fc7\u7a0b\uff0c\u76f4\u81f3\u53ea\u5269\u4e00\u4e2a\u4eba\u4e3a\u6b62\u3002\u95ee\u8fd9\u4e2a\u4eba\u5728\u7b2c\u4e00\u6b21\u7f16\u53f7\u65f6\u7684\u7f16\u53f7\u3002\u60f3\u8981\u89e3\u51b3\u7ea6\u745f\u592b\u95ee\u9898\u6211 \u4eec\u8981\u9006\u63a8\u3002\u8bd5\u8003\u8651\u521a\u624d\u8fc7\u7a0b\u7684\u9006\u8fc7\u7a0b\u3002\u5f53\u524d\u5269\u4f59x\u4eba\u4e14\u5df2\u7f16\u53f7\uff0c\u9006\u8fc7\u7a0b\u4e5f\u5c31\u662f\u628a\u90a3\u4e2a\u521a\u521a\u51fa\u5c40\u7684\u4eba\u91cd\u65b0\u52a0\u8fdb\u5708\u91cc\u6765\uff0c\u5e76\u8fd8\u539f\u4e0a\u4e00\u6b21\u7684\u7f16\u53f7\u3002\u6211\u4eec\u9700\u8981\u505a\u7684\u662f\u5728\u5f53\u524dx \u4eba\u4e2d\u7684\u7f16\u53f7\u4e3a0\u7684\u90a3\u4e2a\u4eba\u524d\u9762\u63d2\u5165\u4e00\u4e2a\u4eba\uff0c\u8ba9\u90a3\u4e2a\u4eba\u7684\u7f16\u53f7\u4e3a(m-1)%(x+1)\uff0c\u5176\u4f59\u4eba\u7684\u7f16\u53f7\u53ef\u6839\u636e\u8fd9\u4e2a\u65b0\u52a0\u8fdb\u6765\u7684\u4eba\u7684\u7f16\u53f7\u6765\u786e\u5b9a\u3002\u6211\u4eec\u8981\u4ece\u6700\u540e\u5269\u4e00\u4e2a\u4eba\u7684\u60c5\u51b5 \u5f00\u59cb\u9006\u63a8\u5230\u5269\u4f59n\u4e2a\u4eba\u7684\u60c5\u51b5\u3002\u6211\u4eec\u53ea\u9700\u8981\u8ba9\u90a3\u4e2a\u6700\u7ec8\u80dc\u5229\u7684\u4eba\u7684\u7f16\u53f7\u6309\u7167\u9006\u8fc7\u7a0b\u7684\u7f16\u53f7\u53d8\u5316\u89c4\u5f8b\u8fdb\u884c\u53d8\u5316\u5373\u53ef\u3002\u5176\u53d8\u5316\u89c4\u5f8b\u4e3a\uff0c\u8bbe\u539f\u6765\u83b7\u80dc\u8005\u5e8f\u53f7\u4e3aa\uff0c\u52a0\u5165\u4e00\u4e2a \u51fa\u5c40\u7684\u4eba\u4e4b\u540e\u4eba\u6570\u4e3ax\uff0c\u5219\u73b0\u5728\u83b7\u80dc\u8005\u7684\u5e8f\u53f7\u5e94\u5f53\u53d8\u4e3a(a+m)%x\uff0c\u5373\u8ba9\u5e8f\u53f7\u8ddf\u539f\u6765\u6bd4\u9519\u4f4d\u4e86m\u4e2a\u4eba\u3002\u603b\u7ed3\u6210\u9012\u63a8\u516c\u5f0f\uff1af(n)=(f(n-1)+m)%n \u8981\u6c42\u7528\u4e24\u4e24\u4ea4\u6362\u7684\u65b9\u5f0f\u7ed9\u4e00\u4e2a\u6570\u5217\u6392\u5e8f\uff0c\u4ea4\u6362f[i]\u548cf[j]\u7684\u4ee3\u4ef7\u4e3af[i]+f[j]\uff0c\u6c42\u6700\u5c0f\u4ee3\u4ef7\u3002\u5177\u4f53\u65b9\u6cd5\u5c31\u662f\u5728\u6570\u5217\u4e2d\u627e\u7f6e\u6362\u73af\uff0c\u6bcf\u4e2a\u73af\u6709\u4e24\u79cd\u5904\u7406\u65b9\u5f0f\uff0c\u4e00\u79cd\u662f\u7528\u6700\u5c0f\u7684\u5143\u7d20\u5c06\u73af\u91cc\u6240\u6709\u5143\u7d20\u5f52\u4f4d\uff0c\u53e6\u4e00\u79cd\u662f\u7528\u5168\u6570\u5217\u6700\u5c0f\u5143\u7d20\u4e0e\u73af\u5185\u6700\u5c0f\u5143\u7d20\u4ea4\u6362\uff0c\u5e76\u5728\u73af\u5185\u7528\u8fd9\u4e2a\u5168\u6570\u5217\u6700\u5c0f\u5143\u7d20\u5c06\u73af\u91cc\u6240\u6709\u5143\u7d20\u5f52\u4f4d\uff0c\u518d\u4e0e\u539f\u73af\u5185\u6700\u5c0f\u5143\u7d20\u4ea4\u6362\u56de\u6765\u3002","title":"\u7ea6\u745f\u592b\u95ee\u9898"},{"location":"competitive_programming/python/","text":"Python Grammar Common Mistakes When use '', \"\", (), [], and {}, type the pair before insert the contents. () and [] can be easily misused with each other. for index, elem in enumerate(...): . index before elem. Use // to divide integers and get integer part of the result. Data Structures Queue & Stack import collections dq = collections . deque () dq . append ( 1 ) dq . append ( 2 ) dq . appendleft ( 3 ) print ( dq ) # [3, 1, 2] dq . pop () print ( dq ) # [3, 1] dq . popleft () print ( dq ) # [1] while dq : a = dq . popleft () ... Hash Table a = {} a [ 'ab' ] = 5 print ( 'ab' in a ) # True print ( a [ 'ab' ]) # 5 a . pop ( 'ab' ) print ( 'ab' in a ) # False a = collections . defaultdict ( lambda : 0 ) a = collections . defaultdict ( list ) # Set is not subscriptable. a = set () a . add ( 'ab' ) print ( 'ab' in a ) # True a . remove ( 'ab' ) print ( 'ab' in a ) # False Heap import heapq hp = heapq . heapify ([ 1 , 5 , 8 , 2 , 3 ]) heapq . heappush ( hp , 9 ) print ( heapq . heappop ( hp )) # 1 # Use negative value if want a max heap. # or use cmp_to_key(cmp). Comparison # Traditional cpp style cmp function. def cmp ( a , b ): return a - b from functools import cmp_to_key list_b = sorted ( list_a , key = cmp_to_key ( cmp )) # For anything not supporting key argument # wrap them into a class with cmp as comparison function k_class = cmp_to_key ( cmp ) list_b = [] for a in list_a : list_b . append ( k_class ( a )) list_b = sorted ( list_b ) for b in list_b : print ( b . obj ) Iterator Product from itertools import product product ( 'ABCD' , 'xy' ) # list of tuples, Ax Ay Bx By Cx Cy Dx Dy Group By from itertools import groupby [ k for k , g in groupby ( 'AAAABBBCCDAABBB' )] # --> ['A', 'B', 'C', 'D', 'A', 'B'] [ list ( g ) for k , g in groupby ( 'AAAABBBCCD' )] # --> [['A','A','A','A'], ['B','B','B'], ['C','C'], ['D']] Combination from itertools import combinations , combinations_with_replacement combinations ( 'ABCD' , 2 ) # list of tuples AB AC AD BC BD CD combinations_with_replacement ( 'ABCD' , 2 ) # list of tuples AA AB AC AD BB BC BD CC CD DD Permutation from itertools import permutations permutations ( 'ABCD' , 2 ) # list of tuples AB AC AD BA BC BD CA CB CD DA DB DC Strings Split Strings a = 'aba' print ( a . split ( 'a' )) # ['', 'b', ''] print ( a . split ( 'x' )) # ['aba'] Count Occurance a = 'abababa' print ( a . count ( 'aba' )) # 2 Case Changes a = 'aBA' print ( a . upper ()) # ABA print ( a . lower ()) # aba I/O From File file = open ( 'somefile' ) for line in file : do_something () file . close () From standard IO import sys for line in sys . stdin : do_something ()","title":"Python Grammar"},{"location":"competitive_programming/python/#python-grammar","text":"","title":"Python Grammar"},{"location":"competitive_programming/python/#common-mistakes","text":"When use '', \"\", (), [], and {}, type the pair before insert the contents. () and [] can be easily misused with each other. for index, elem in enumerate(...): . index before elem. Use // to divide integers and get integer part of the result.","title":"Common Mistakes"},{"location":"competitive_programming/python/#data-structures","text":"","title":"Data Structures"},{"location":"competitive_programming/python/#queue-stack","text":"import collections dq = collections . deque () dq . append ( 1 ) dq . append ( 2 ) dq . appendleft ( 3 ) print ( dq ) # [3, 1, 2] dq . pop () print ( dq ) # [3, 1] dq . popleft () print ( dq ) # [1] while dq : a = dq . popleft () ...","title":"Queue &amp; Stack"},{"location":"competitive_programming/python/#hash-table","text":"a = {} a [ 'ab' ] = 5 print ( 'ab' in a ) # True print ( a [ 'ab' ]) # 5 a . pop ( 'ab' ) print ( 'ab' in a ) # False a = collections . defaultdict ( lambda : 0 ) a = collections . defaultdict ( list ) # Set is not subscriptable. a = set () a . add ( 'ab' ) print ( 'ab' in a ) # True a . remove ( 'ab' ) print ( 'ab' in a ) # False","title":"Hash Table"},{"location":"competitive_programming/python/#heap","text":"import heapq hp = heapq . heapify ([ 1 , 5 , 8 , 2 , 3 ]) heapq . heappush ( hp , 9 ) print ( heapq . heappop ( hp )) # 1 # Use negative value if want a max heap. # or use cmp_to_key(cmp).","title":"Heap"},{"location":"competitive_programming/python/#comparison","text":"# Traditional cpp style cmp function. def cmp ( a , b ): return a - b from functools import cmp_to_key list_b = sorted ( list_a , key = cmp_to_key ( cmp )) # For anything not supporting key argument # wrap them into a class with cmp as comparison function k_class = cmp_to_key ( cmp ) list_b = [] for a in list_a : list_b . append ( k_class ( a )) list_b = sorted ( list_b ) for b in list_b : print ( b . obj )","title":"Comparison"},{"location":"competitive_programming/python/#iterator","text":"","title":"Iterator"},{"location":"competitive_programming/python/#product","text":"from itertools import product product ( 'ABCD' , 'xy' ) # list of tuples, Ax Ay Bx By Cx Cy Dx Dy","title":"Product"},{"location":"competitive_programming/python/#group-by","text":"from itertools import groupby [ k for k , g in groupby ( 'AAAABBBCCDAABBB' )] # --> ['A', 'B', 'C', 'D', 'A', 'B'] [ list ( g ) for k , g in groupby ( 'AAAABBBCCD' )] # --> [['A','A','A','A'], ['B','B','B'], ['C','C'], ['D']]","title":"Group By"},{"location":"competitive_programming/python/#combination","text":"from itertools import combinations , combinations_with_replacement combinations ( 'ABCD' , 2 ) # list of tuples AB AC AD BC BD CD combinations_with_replacement ( 'ABCD' , 2 ) # list of tuples AA AB AC AD BB BC BD CC CD DD","title":"Combination"},{"location":"competitive_programming/python/#permutation","text":"from itertools import permutations permutations ( 'ABCD' , 2 ) # list of tuples AB AC AD BA BC BD CA CB CD DA DB DC","title":"Permutation"},{"location":"competitive_programming/python/#strings","text":"","title":"Strings"},{"location":"competitive_programming/python/#split-strings","text":"a = 'aba' print ( a . split ( 'a' )) # ['', 'b', ''] print ( a . split ( 'x' )) # ['aba']","title":"Split Strings"},{"location":"competitive_programming/python/#count-occurance","text":"a = 'abababa' print ( a . count ( 'aba' )) # 2","title":"Count Occurance"},{"location":"competitive_programming/python/#case-changes","text":"a = 'aBA' print ( a . upper ()) # ABA print ( a . lower ()) # aba","title":"Case Changes"},{"location":"competitive_programming/python/#io","text":"","title":"I/O"},{"location":"competitive_programming/python/#from-file","text":"file = open ( 'somefile' ) for line in file : do_something () file . close ()","title":"From File"},{"location":"competitive_programming/python/#from-standard-io","text":"import sys for line in sys . stdin : do_something ()","title":"From standard IO"},{"location":"competitive_programming/rmq_lca/","text":"RMQ & LCA RMQ 1.\u7406\u89e3\u4e86rmq\u7684st\u7b97\u6cd5\u3002\u5c31\u662f\u5c06\u6bcf\u4e2a\u5927\u533a\u95f4\u7528\u521a\u597d\u5927\u4e8e\u5176\u957f\u5ea6\u4e00\u534a\u76842^x\u7684\u5927\u5c0f\u6765\u5c06\u5176\u5206\u5272\u4e3a\u4e24\u4e2a\u6709\u91cd\u53e0\u533a\u95f4\u6c42\u89e3\u3002\u5373s~t\u88ab\u5206\u4e3as~s + 2^x \u548c t - 2^x + 1 ~t\u3002\u5409\u5927\u7684\u7b2c\u4e00\u4e2ast\u662f\u9519\u8bef\u7684\u3002 2.\u5b66\u4f1a\u4e86\u7b1b\u5361\u5c14\u6811\uff0c\u5b83\u6bcf\u4e2a\u7ed3\u70b9\u6709\u4e24\u4e2a\u503c\uff0c\u6839\u636e\u7b2c\u4e00\u4e2a\u503c\uff0c\u5b83\u662f\u4e00\u9897\u4e8c\u53c9\u641c\u7d22\u6811\uff0c\u6839\u636e\u7b2c\u4e8c\u4e2a\u503c\uff0c\u5b83\u662f\u5806\uff08\u4e0d\u4e00\u5b9a\u662f\u5b8c\u5168\u4e8c\u53c9\u6811\uff09\u3002\u5982\u679c\u6211\u4eec\u8ba4\u4e3a\u7b2c\u4e00\u4e2a\u503c\u662f\u6570\u7ec4\u4e0b\u6807\uff0c\u7b2c\u4e8c\u4e2a\u503c\u662f\u6570\u7ec4\u5bf9\u5e94\u4f4d\u7684\u503c\u7684\u8bdd\uff0c\u8fd9\u8bfe\u6811\u7684\u4e24\u4e2a\u7ed3\u70b9\u7684lca\u7684\u7b2c\u4e8c\u4e2a\u503c\u5c31\u662f\u4e24\u7ed3\u70b9\u7684\u7b2c\u4e00\u4e2a\u503c\u5728\u6570\u7ec4\u4e2d\u5212\u5b9a\u7684\u533a\u95f4\u7684rmq\u3002\u6211\u4eec\u901a\u5e38\u662f\u7531\u4e00\u4e2a\u6570\u7ec4\u6765\u6784\u5efa\u7b1b\u5361\u5c14\u6811\uff0c\u4ece\u5de6\u81f3\u53f3\u4f9d\u6b21\u5c06\u6570\u7ec4\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u52a0\u5165\u6811\u4e2d\uff0c\u7531\u4e8e\u65b0\u52a0\u5165\u7684\u7ed3\u70b9\u7684\u4e0b\u6807\u662f\u6700\u5927\u7684\uff0c\u6240\u4ee5\u5b83\u4e00\u5b9a\u4f4d\u4e8e\u641c\u7d22\u4e8c\u53c9\u6811\u7684\u6700\u53f3\u7aef\u3002\u800c\u4e4b\u524d\u4f4d\u4e8e\u6700\u53f3\u7aef\u7684\u662f\u4e0a\u4e00\u4e2a\u52a0\u5165\u7684\u7ed3\u70b9\uff0c\u6240\u4ee5\u6211\u4eec\u5c31\u4ece\u4e0a\u4e00\u4e2a\u52a0\u5165\u7684\u7ed3\u70b9\u5f00\u59cb\u5411\u5176\u7236\u4eb2\u4e0d\u65ad\u63a8\u8fdb\uff08\u5f53\u524d\u5c06\u52a0\u5165\u7684\u7ed3\u70b9\u4e0d\u53ef\u80fd\u5728\u4e0a\u4e00\u4e2a\u7ed3\u70b9\u7684\u4e0b\u65b9\uff0c\u56e0\u4e3a\u6240\u6709\u4e0b\u65b9\u7684\u7ed3\u70b9\u6765\u8bf4\uff0c\u65e0\u8bba\u5f53\u524d\u7ed3\u70b9\u63d2\u5728\u54ea\u91cc\u90fd\u6c38\u8fdc\u5728\u4e0a\u4e00\u4e2a\u7ed3\u70b9\u7684\u5de6\u8fb9\uff1b\u800c\u5bf9\u4e8e\u5176\u7236\u4eb2\u548c\u7956\u5148\u5219\u53ef\u4ee5\u7ecf\u8fc7\u5982\u4e0b\u8c03\u6574\u4f7f\u5f53\u524d\u63d2\u5165\u7ed3\u70b9\u5728\u6700\u53f3\u7aef\uff09\uff0c\u627e\u5230\u4e00\u4e2a\u6bd4\uff08\u5bf9\u4e8e\u5927\u6839\u5806\uff09\u5b83\u5927\u7684\uff0c\u628a\u8be5\u7ed3\u70b9\u7684\u53f3\u513f\u5b50\u53d8\u4e3a\u5f53\u524d\u63d2\u5165\u7ed3\u70b9\u7684\u5de6\u513f\u5b50\uff0c\u518d\u628a\u5f53\u524d\u7ed3\u70b9\u6539\u4e3a\u5176\u53f3\u513f\u5b50\u3002 LCA lca\u95ee\u9898\uff0c\u79bb\u7ebf\u7684\u65b9\u6cd5\u7528tarjan tarjan\u7b97\u6cd5\u7684\u6d41\u7a0b\u5982\u4e0b\u3002dfs\u904d\u5386\u6811\uff0c\u7528\u5e76\u67e5\u96c6\u7684\u65b9\u5f0f\uff0c\u5728\u5f53\u524ddfs\u8def\u5f84\u4e2d\u627e\u5230\u4e00\u4e2a\u70b9\uff0c\u8fd9\u4e00\u70b9\u662f\u904d\u5386\u5b8c\u6210\u7684\u70b9\u7684\u7956\u5148\uff0c\u800c\u4e14\u8fd9\u70b9\u7684\u6df1\u5ea6\u6700\u5927\u3002\u628a\u904d\u5386\u5b8c\u6210\u7684\u70b9\u5408\u5e76\u5230\u8fd9\u4e2a\u70b9\uff0c\u5373\u8fd9\u4e2a\u70b9\u53d8\u6210\u904d\u5386\u5b8c\u6210\u7684\u70b9\u7684\u5e76\u67e5\u96c6\u4e2d\u7684father\u3002\u8fd9\u6837\uff0c\u6839\u636edfs\u7684\u6027\u8d28\uff0c\u53ef\u4ee5\u77e5\u9053\uff0c\u904d\u5386\u5b8c\u6210\u7684\u70b9\u5176\u4e0e\u5f53\u524d\u6b63\u5728\u904d\u5386\u7684\u70b9\u7684lca\u5373\u4e3a\u5176\u5e76\u67e5\u96c6\u4e2d\u7684\u7956\u5148\u3002\u5b9e\u9645\u64cd\u4f5c\u7684\u65b9\u6cd5\u662f\u5bf9\u4e8e\u4e00\u4e2a\u7ed3\u70b9\uff0cdfs\u6bcf\u4e2a\u5b50\u7ed3\u70b9\uff0c\u7136\u540e\u628a\u6bcf\u4e2a\u5b50\u7ed3\u70b9\u5408\u5e76\u5230\u5176\u672c\u8eab\u3002\u5728\u6b64\u8fc7\u7a0b\u4e2d\u987a\u5e26\u56de\u7b54\u6240\u6709lca\u95ee\u9898\u3002 \u5728\u7ebfLCA\u6709\u4e24\u79cd\u65b9\u6cd5\uff0c\u7b2c\u4e00\u79cd\u6bd4\u8f83\u5e38\u89c1\uff0c\u5373\u5c06\u5176\u8f6c\u5316\u6210RMA\u95ee\u9898\u3002\u5148\u5bf9\u6811\u5f62\u56fe\u8fdb\u884c\u6df1\u5ea6\u4f18\u5148\u904d\u5386\uff0c\u904d\u5386\u8fc7\u7a0b\u8bb0\u5f55\u8def\u7ebf\u4e2d\u70b9\u7684\u9014\u7ecf\u5e8f\u5217\uff0c\u6bcf\u4e2a\u975e\u53f6\u5b50\u8282\u70b9\u4f1a\u5728\u5e8f\u5217\u4e2d\u51fa\u73b0\u591a\u6b21\uff0c\u4ece\u4e00\u4e2a\u8282\u70b9A\u7684\u4e00\u4e2a\u5b50\u8282\u70b9\u56de\u5230A\u70b9\u518d\u8d70\u53e6\u4e00\u4e2a\u5b50\u8282\u70b9\u7684\u65f6\u5019\u8981\u518d\u6b21\u52a0A\u52a0\u5165\u5e8f\u5217\u3002\u8bb0\u5f55\u5e8f\u5217\u7684\u540c\u65f6\u8fd8\u8981\u8bb0\u5f55\u5e8f\u5217\u4e2d\u6bcf\u4e2a\u70b9\u5728\u6811\u4e2d\u5bf9\u5e94\u7684\u6df1\u5ea6\u3002\u4ee5\u53ca\u5728\u5e8f\u5217\u4e2d\u7b2c\u4e00\u6b21\u51fa\u73b0\u7684\u4f4d\u7f6e\uff08\u5176\u5b9e\u4e0d\u4e00\u5b9a\u975e\u8981\u7b2c\u4e00\u4e2a\u624d\u884c\uff09\uff0c\u4e3b\u8981\u7528\u4e8e\u6839\u636e\u70b9\u6807\u53f7\u67e5\u627e\u5176\u5728\u5e8f\u5217\u4e2d\u5bf9\u5e94\u7684\u4e0b\u6807\u3002\u6b64\u65f6\uff0cLCA\u5df2\u7ecf\u8f6c\u5316\u4e3aRMQ\uff0c\u5982\u679c\u8981\u6c42a,b\u7684LCA\uff0c\u53ea\u9700\u8981\u627e\u5230a,b\u5728\u904d\u5386\u5e8f\u5217\u4e2d\u5206\u522b\u5bf9\u5e94\u7684\u4f4d\u7f6e\uff0c\u5e76\u5728\u6df1\u5ea6\u5e8f\u5217\u4e2d\u67e5\u627e\u4ee5\u8fd9\u4e24\u70b9\u4e3a\u7aef\u70b9\u7684\u533a\u95f4\u5185\u7684\u6700\u5c0f\u503c\u5373\u53ef\u3002\u8fd9\u4e2a\u6700\u5c0f\u503c\u5728\u904d\u5386\u5e8f\u5217\u4e2d\u5bf9\u5e94\u7684\u70b9\u5c31\u662f\u4ed6\u4eec\u7684LCA\u3002\u8fd9\u79cd\u65b9\u6cd5\u9884\u5904\u7406O(NlogN)\uff0c\u67e5\u8be2\u662fO(1)\u3002 \u53e6\u4e00\u79cd\u65b9\u6cd5\u7528\u5230\u4e86DP\u7684\u601d\u60f3\u3002\u7528\u4e00\u4e2a\u6570\u7ec4f[i][j]\u8868\u793ai\u70b9\u5728\u6811\u4e2d\u5230\u6839\u8282\u70b9\u7684\u5e8f\u5217\u4e2d\u8ddd\u79bbi\u8fb9\u6570\u4e3a2^j\u7684\u70b9\u3002\u90a3\u4e48f[i][j] = f[ f[i][j - 1] ][j - 1]\u3002\u5177\u4f53\u505a\u6cd5\u662f\uff0c\u6211\u4eec\u8fdb\u884cBFS\uff0c\u8bb0\u5f55\u6bcf\u4e2a\u70b9\u7684\u7236\u8282\u70b9\uff0c\u5373f[i][0]\u3002\u548c\u6bcf\u4e2a\u70b9\u7684\u6df1\u5ea6\u3002\u7136\u540e\u6839\u636e\u72b6\u6001\u8f6c\u79fb\u516c\u5f0f\u586b\u5145\u6574\u4e2a\u6570\u7ec4\u3002\u5728\u67e5\u8be2\u65f6\uff0c\u5148\u770ba,b\u4e24\u70b9\u8c01\u7684\u6df1\u5ea6\u5927\uff0c\u5229\u7528\u4e24\u8005\u6df1\u5ea6\u5dee\u7684\u4e8c\u8fdb\u5236\u5e8f\u5217\uff0c\u914d\u5408f\u6570\u7ec4\uff0c\u627e\u5230\u8f83\u6df1\u7684\u70b9\u5728\u8f83\u6d45\u7684\u70b9\u90a3\u5c42\u7684\u7956\u5148\u3002\u7136\u540e\u7ee7\u7eed\u4f7f\u7528f\u6570\u7ec4\uff0c\u6bcf\u6b21\u5411\u4e0a\u63a2\u6d4b2^i\u7684\u8ddd\u79bb\u7684\u70b9\u4e24\u8005\u7684\u7956\u5148\u662f\u5426\u4e3a\u540c\u4e00\u4e2a\uff0c\u5982\u679c\u4e0d\u662f\u5219i++\u540e\u7ee7\u7eed\u53e0\u52a0\u5411\u4e0a\u63a2\u6d4b2^i\uff0c\u5982\u679c\u662f\u540c\u4e00\u4e2a\u5219i--\u540e\u91cd\u65b0\u63a2\u6d4b\u3002\u76f4\u5230\u627e\u5230\u6700\u5c0f\u7684\u516c\u5171\u7956\u5148\u4e3a\u6b62\u3002\u8fd9\u79cd\u65b9\u6cd5\u9884\u5904\u7406O(NlogN)\uff0c\u67e5\u8be2\u662fO(NlogN)\u3002\u4f46\u4e0e\u4e0a\u4e00\u79cd\u65b9\u6cd5\u76f8\u6bd4\uff0c\u4e0d\u9700\u8981dfs\uff0c\u800c\u7528bfs\uff0c\u8fd9\u6837\u53ef\u4ee5\u8282\u7701\u5f88\u591a\u65f6\u95f4\u3002","title":"RMQ & LCA"},{"location":"competitive_programming/rmq_lca/#rmq-lca","text":"","title":"RMQ &amp; LCA"},{"location":"competitive_programming/rmq_lca/#rmq","text":"1.\u7406\u89e3\u4e86rmq\u7684st\u7b97\u6cd5\u3002\u5c31\u662f\u5c06\u6bcf\u4e2a\u5927\u533a\u95f4\u7528\u521a\u597d\u5927\u4e8e\u5176\u957f\u5ea6\u4e00\u534a\u76842^x\u7684\u5927\u5c0f\u6765\u5c06\u5176\u5206\u5272\u4e3a\u4e24\u4e2a\u6709\u91cd\u53e0\u533a\u95f4\u6c42\u89e3\u3002\u5373s~t\u88ab\u5206\u4e3as~s + 2^x \u548c t - 2^x + 1 ~t\u3002\u5409\u5927\u7684\u7b2c\u4e00\u4e2ast\u662f\u9519\u8bef\u7684\u3002 2.\u5b66\u4f1a\u4e86\u7b1b\u5361\u5c14\u6811\uff0c\u5b83\u6bcf\u4e2a\u7ed3\u70b9\u6709\u4e24\u4e2a\u503c\uff0c\u6839\u636e\u7b2c\u4e00\u4e2a\u503c\uff0c\u5b83\u662f\u4e00\u9897\u4e8c\u53c9\u641c\u7d22\u6811\uff0c\u6839\u636e\u7b2c\u4e8c\u4e2a\u503c\uff0c\u5b83\u662f\u5806\uff08\u4e0d\u4e00\u5b9a\u662f\u5b8c\u5168\u4e8c\u53c9\u6811\uff09\u3002\u5982\u679c\u6211\u4eec\u8ba4\u4e3a\u7b2c\u4e00\u4e2a\u503c\u662f\u6570\u7ec4\u4e0b\u6807\uff0c\u7b2c\u4e8c\u4e2a\u503c\u662f\u6570\u7ec4\u5bf9\u5e94\u4f4d\u7684\u503c\u7684\u8bdd\uff0c\u8fd9\u8bfe\u6811\u7684\u4e24\u4e2a\u7ed3\u70b9\u7684lca\u7684\u7b2c\u4e8c\u4e2a\u503c\u5c31\u662f\u4e24\u7ed3\u70b9\u7684\u7b2c\u4e00\u4e2a\u503c\u5728\u6570\u7ec4\u4e2d\u5212\u5b9a\u7684\u533a\u95f4\u7684rmq\u3002\u6211\u4eec\u901a\u5e38\u662f\u7531\u4e00\u4e2a\u6570\u7ec4\u6765\u6784\u5efa\u7b1b\u5361\u5c14\u6811\uff0c\u4ece\u5de6\u81f3\u53f3\u4f9d\u6b21\u5c06\u6570\u7ec4\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u52a0\u5165\u6811\u4e2d\uff0c\u7531\u4e8e\u65b0\u52a0\u5165\u7684\u7ed3\u70b9\u7684\u4e0b\u6807\u662f\u6700\u5927\u7684\uff0c\u6240\u4ee5\u5b83\u4e00\u5b9a\u4f4d\u4e8e\u641c\u7d22\u4e8c\u53c9\u6811\u7684\u6700\u53f3\u7aef\u3002\u800c\u4e4b\u524d\u4f4d\u4e8e\u6700\u53f3\u7aef\u7684\u662f\u4e0a\u4e00\u4e2a\u52a0\u5165\u7684\u7ed3\u70b9\uff0c\u6240\u4ee5\u6211\u4eec\u5c31\u4ece\u4e0a\u4e00\u4e2a\u52a0\u5165\u7684\u7ed3\u70b9\u5f00\u59cb\u5411\u5176\u7236\u4eb2\u4e0d\u65ad\u63a8\u8fdb\uff08\u5f53\u524d\u5c06\u52a0\u5165\u7684\u7ed3\u70b9\u4e0d\u53ef\u80fd\u5728\u4e0a\u4e00\u4e2a\u7ed3\u70b9\u7684\u4e0b\u65b9\uff0c\u56e0\u4e3a\u6240\u6709\u4e0b\u65b9\u7684\u7ed3\u70b9\u6765\u8bf4\uff0c\u65e0\u8bba\u5f53\u524d\u7ed3\u70b9\u63d2\u5728\u54ea\u91cc\u90fd\u6c38\u8fdc\u5728\u4e0a\u4e00\u4e2a\u7ed3\u70b9\u7684\u5de6\u8fb9\uff1b\u800c\u5bf9\u4e8e\u5176\u7236\u4eb2\u548c\u7956\u5148\u5219\u53ef\u4ee5\u7ecf\u8fc7\u5982\u4e0b\u8c03\u6574\u4f7f\u5f53\u524d\u63d2\u5165\u7ed3\u70b9\u5728\u6700\u53f3\u7aef\uff09\uff0c\u627e\u5230\u4e00\u4e2a\u6bd4\uff08\u5bf9\u4e8e\u5927\u6839\u5806\uff09\u5b83\u5927\u7684\uff0c\u628a\u8be5\u7ed3\u70b9\u7684\u53f3\u513f\u5b50\u53d8\u4e3a\u5f53\u524d\u63d2\u5165\u7ed3\u70b9\u7684\u5de6\u513f\u5b50\uff0c\u518d\u628a\u5f53\u524d\u7ed3\u70b9\u6539\u4e3a\u5176\u53f3\u513f\u5b50\u3002","title":"RMQ"},{"location":"competitive_programming/rmq_lca/#lca","text":"lca\u95ee\u9898\uff0c\u79bb\u7ebf\u7684\u65b9\u6cd5\u7528tarjan tarjan\u7b97\u6cd5\u7684\u6d41\u7a0b\u5982\u4e0b\u3002dfs\u904d\u5386\u6811\uff0c\u7528\u5e76\u67e5\u96c6\u7684\u65b9\u5f0f\uff0c\u5728\u5f53\u524ddfs\u8def\u5f84\u4e2d\u627e\u5230\u4e00\u4e2a\u70b9\uff0c\u8fd9\u4e00\u70b9\u662f\u904d\u5386\u5b8c\u6210\u7684\u70b9\u7684\u7956\u5148\uff0c\u800c\u4e14\u8fd9\u70b9\u7684\u6df1\u5ea6\u6700\u5927\u3002\u628a\u904d\u5386\u5b8c\u6210\u7684\u70b9\u5408\u5e76\u5230\u8fd9\u4e2a\u70b9\uff0c\u5373\u8fd9\u4e2a\u70b9\u53d8\u6210\u904d\u5386\u5b8c\u6210\u7684\u70b9\u7684\u5e76\u67e5\u96c6\u4e2d\u7684father\u3002\u8fd9\u6837\uff0c\u6839\u636edfs\u7684\u6027\u8d28\uff0c\u53ef\u4ee5\u77e5\u9053\uff0c\u904d\u5386\u5b8c\u6210\u7684\u70b9\u5176\u4e0e\u5f53\u524d\u6b63\u5728\u904d\u5386\u7684\u70b9\u7684lca\u5373\u4e3a\u5176\u5e76\u67e5\u96c6\u4e2d\u7684\u7956\u5148\u3002\u5b9e\u9645\u64cd\u4f5c\u7684\u65b9\u6cd5\u662f\u5bf9\u4e8e\u4e00\u4e2a\u7ed3\u70b9\uff0cdfs\u6bcf\u4e2a\u5b50\u7ed3\u70b9\uff0c\u7136\u540e\u628a\u6bcf\u4e2a\u5b50\u7ed3\u70b9\u5408\u5e76\u5230\u5176\u672c\u8eab\u3002\u5728\u6b64\u8fc7\u7a0b\u4e2d\u987a\u5e26\u56de\u7b54\u6240\u6709lca\u95ee\u9898\u3002 \u5728\u7ebfLCA\u6709\u4e24\u79cd\u65b9\u6cd5\uff0c\u7b2c\u4e00\u79cd\u6bd4\u8f83\u5e38\u89c1\uff0c\u5373\u5c06\u5176\u8f6c\u5316\u6210RMA\u95ee\u9898\u3002\u5148\u5bf9\u6811\u5f62\u56fe\u8fdb\u884c\u6df1\u5ea6\u4f18\u5148\u904d\u5386\uff0c\u904d\u5386\u8fc7\u7a0b\u8bb0\u5f55\u8def\u7ebf\u4e2d\u70b9\u7684\u9014\u7ecf\u5e8f\u5217\uff0c\u6bcf\u4e2a\u975e\u53f6\u5b50\u8282\u70b9\u4f1a\u5728\u5e8f\u5217\u4e2d\u51fa\u73b0\u591a\u6b21\uff0c\u4ece\u4e00\u4e2a\u8282\u70b9A\u7684\u4e00\u4e2a\u5b50\u8282\u70b9\u56de\u5230A\u70b9\u518d\u8d70\u53e6\u4e00\u4e2a\u5b50\u8282\u70b9\u7684\u65f6\u5019\u8981\u518d\u6b21\u52a0A\u52a0\u5165\u5e8f\u5217\u3002\u8bb0\u5f55\u5e8f\u5217\u7684\u540c\u65f6\u8fd8\u8981\u8bb0\u5f55\u5e8f\u5217\u4e2d\u6bcf\u4e2a\u70b9\u5728\u6811\u4e2d\u5bf9\u5e94\u7684\u6df1\u5ea6\u3002\u4ee5\u53ca\u5728\u5e8f\u5217\u4e2d\u7b2c\u4e00\u6b21\u51fa\u73b0\u7684\u4f4d\u7f6e\uff08\u5176\u5b9e\u4e0d\u4e00\u5b9a\u975e\u8981\u7b2c\u4e00\u4e2a\u624d\u884c\uff09\uff0c\u4e3b\u8981\u7528\u4e8e\u6839\u636e\u70b9\u6807\u53f7\u67e5\u627e\u5176\u5728\u5e8f\u5217\u4e2d\u5bf9\u5e94\u7684\u4e0b\u6807\u3002\u6b64\u65f6\uff0cLCA\u5df2\u7ecf\u8f6c\u5316\u4e3aRMQ\uff0c\u5982\u679c\u8981\u6c42a,b\u7684LCA\uff0c\u53ea\u9700\u8981\u627e\u5230a,b\u5728\u904d\u5386\u5e8f\u5217\u4e2d\u5206\u522b\u5bf9\u5e94\u7684\u4f4d\u7f6e\uff0c\u5e76\u5728\u6df1\u5ea6\u5e8f\u5217\u4e2d\u67e5\u627e\u4ee5\u8fd9\u4e24\u70b9\u4e3a\u7aef\u70b9\u7684\u533a\u95f4\u5185\u7684\u6700\u5c0f\u503c\u5373\u53ef\u3002\u8fd9\u4e2a\u6700\u5c0f\u503c\u5728\u904d\u5386\u5e8f\u5217\u4e2d\u5bf9\u5e94\u7684\u70b9\u5c31\u662f\u4ed6\u4eec\u7684LCA\u3002\u8fd9\u79cd\u65b9\u6cd5\u9884\u5904\u7406O(NlogN)\uff0c\u67e5\u8be2\u662fO(1)\u3002 \u53e6\u4e00\u79cd\u65b9\u6cd5\u7528\u5230\u4e86DP\u7684\u601d\u60f3\u3002\u7528\u4e00\u4e2a\u6570\u7ec4f[i][j]\u8868\u793ai\u70b9\u5728\u6811\u4e2d\u5230\u6839\u8282\u70b9\u7684\u5e8f\u5217\u4e2d\u8ddd\u79bbi\u8fb9\u6570\u4e3a2^j\u7684\u70b9\u3002\u90a3\u4e48f[i][j] = f[ f[i][j - 1] ][j - 1]\u3002\u5177\u4f53\u505a\u6cd5\u662f\uff0c\u6211\u4eec\u8fdb\u884cBFS\uff0c\u8bb0\u5f55\u6bcf\u4e2a\u70b9\u7684\u7236\u8282\u70b9\uff0c\u5373f[i][0]\u3002\u548c\u6bcf\u4e2a\u70b9\u7684\u6df1\u5ea6\u3002\u7136\u540e\u6839\u636e\u72b6\u6001\u8f6c\u79fb\u516c\u5f0f\u586b\u5145\u6574\u4e2a\u6570\u7ec4\u3002\u5728\u67e5\u8be2\u65f6\uff0c\u5148\u770ba,b\u4e24\u70b9\u8c01\u7684\u6df1\u5ea6\u5927\uff0c\u5229\u7528\u4e24\u8005\u6df1\u5ea6\u5dee\u7684\u4e8c\u8fdb\u5236\u5e8f\u5217\uff0c\u914d\u5408f\u6570\u7ec4\uff0c\u627e\u5230\u8f83\u6df1\u7684\u70b9\u5728\u8f83\u6d45\u7684\u70b9\u90a3\u5c42\u7684\u7956\u5148\u3002\u7136\u540e\u7ee7\u7eed\u4f7f\u7528f\u6570\u7ec4\uff0c\u6bcf\u6b21\u5411\u4e0a\u63a2\u6d4b2^i\u7684\u8ddd\u79bb\u7684\u70b9\u4e24\u8005\u7684\u7956\u5148\u662f\u5426\u4e3a\u540c\u4e00\u4e2a\uff0c\u5982\u679c\u4e0d\u662f\u5219i++\u540e\u7ee7\u7eed\u53e0\u52a0\u5411\u4e0a\u63a2\u6d4b2^i\uff0c\u5982\u679c\u662f\u540c\u4e00\u4e2a\u5219i--\u540e\u91cd\u65b0\u63a2\u6d4b\u3002\u76f4\u5230\u627e\u5230\u6700\u5c0f\u7684\u516c\u5171\u7956\u5148\u4e3a\u6b62\u3002\u8fd9\u79cd\u65b9\u6cd5\u9884\u5904\u7406O(NlogN)\uff0c\u67e5\u8be2\u662fO(NlogN)\u3002\u4f46\u4e0e\u4e0a\u4e00\u79cd\u65b9\u6cd5\u76f8\u6bd4\uff0c\u4e0d\u9700\u8981dfs\uff0c\u800c\u7528bfs\uff0c\u8fd9\u6837\u53ef\u4ee5\u8282\u7701\u5f88\u591a\u65f6\u95f4\u3002","title":"LCA"},{"location":"competitive_programming/string/","text":"String trie\u6811\u662f\u4e00\u79cd\u5b58\u50a8\u540d\u79f0\u7684\u666e\u904d\u65b9\u6cd5\u3002 Karp-Rabin karp-rabin\u628a\u5b57\u7b26\u4e32\u8f6c\u5316\u6210\u6570\u5b57\u7684\u7b97\u6cd5\uff0c\u4e00\u4e2a\u5b57\u7b26\u4e32\u6709n\u79cd\u5b57\u7b26\u6784\u6210\uff0c\u628a\u6bcf\u79cd\u5b57\u7b26\u5bf9\u5e94\u4e3a0\uff5en-1\u4e2d\u7684\u4e00\u4e2a\u6570\u5b57\uff0c\u628a\u5b57\u6bcd\u6362\u6210\u5bf9\u5e94\u7684\u6570\u5b57\u4e4b\u540e\uff0c\u5bf9\u4e8e\u56fa\u5b9a\u957f\u5ea6\u7684\u4e32\uff0c\u6bcf\u4e2a\u4e32\u90fd\u4e0e\u4e00\u4e2a\u552f\u4e00\u7684n\u8fdb\u5236\u6570\u5bf9\u5e94\u3002\u8fd9\u6837\u5c31\u53ef\u4ee5hash\u4e86 DFA ac\u81ea\u52a8\u673a\u4e0a\u7684\u7b49\u4ef7\u6001\uff1a \u7b49\u4ef7\u6001\u5373\u7528fail\u6307\u9488\u8fde\u63a5\u7684\u70b9\uff0c\u5728\u884c\u8d70fail\u6307\u9488\u65f6\u5339\u914d\u7684\u5b57\u7b26\u6570\u91cf\u5e76\u6ca1\u6709\u53d1\u751f\u53d8\u5316\uff0c\u56e0\u6b64\u8fd9\u4e9b\u70b9\u53ef\u4ee5\u770b\u6210\u662f\u76f8\u540c\u7684\u5339\u914d\u72b6\u6001\u3002 \u901a\u5e38\u6709\u4e24\u79cd\u65b9\u6cd5\u5904\u7406\u7b49\u4ef7\u6001\uff0c\u7b2c\u4e00\u662f\u4e92\u4e3a\u7b49\u4ef7\u6001\u7684\u70b9\u5404\u81ea\u8bb0\u5f55\u5404\u81ea\u7684\u4fe1\u606f\u3002\u5339\u914d\u7684\u65f6\u5019\u9700\u8981\u904d\u5386\u6240\u6709\u7b49\u4ef7\u6001\u4ee5\u5224\u65ad\u662f\u5426\u5339\u914d\u6210\u529f\u3002next\u6307\u9488\u53ef\u80fd\u4e3a\u7a7a\uff0c\u9700\u8981\u5339\u914d\u65f6\u8fdb\u884c\u5224\u65ad\u662f\u5426\u9700\u8981\u8d70fail\u6307\u9488\u3002 \u7b2c\u4e8c\u662f\u6240\u6709\u7b49\u4ef7\u6001\u4e2d\u7684\u70b9\u8bb0\u5f55\u672c\u8eab\u4ee5\u53ca\u6240\u6709\u6bd4\u5b83\u6d45\u7684\u70b9\u7684\u4fe1\u606f\u603b\u548c\uff08\u5339\u914d\u6210\u529f\u7684\u5355\u8bcd\u603b\u6570\uff09\uff0c\u5339\u914d\u65f6\u4e0d\u9700\u8981\u8d70\u7b49\u4ef7\u6001\u4ee5\u5224\u65ad\u5339\u914d\u6210\u529f\u4e0e\u5426\u3002next\u6307\u9488\u4e0d\u4e3a\u7a7a\uff0c\u76f4\u63a5\u6307\u5411\u672c\u5e94\u901a\u8fc7fail\u6307\u9488\u5bfb\u627e\u5230\u7684\u90a3\u4e2a\u72b6\u6001\u3002 ac\u81ea\u52a8\u673a\u4e0e\u77e9\u9635\uff1a \u5728ac\u81ea\u52a8\u673a\u4e0a\uff0c\u6bcf\u4e00\u4e2a\u4ece\u6839\u51fa\u53d1\u5e76\u5728\u81ea\u52a8\u673a\u4e0a\u884c\u8d70\u7684\u4efb\u610f\u957f\u5ea6\u7684\u8def\u5f84\u90fd\u4ee3\u8868\u4e86\u4e00\u4e2a\u5b57\u7b26\u4e32\u3002 \u628aac\u81ea\u52a8\u673a\u770b\u6210\u4e00\u4e2a\u6709\u5411\u56fe\u7684\u8bdd\u6211\u4eec\u53ef\u4ee5\u63d0\u53d6\u5b83\u7684\u90bb\u63a5\u77e9\u9635\uff08\u53ef\u8fbe\u77e9\u9635\uff09\uff0cmatrix[i][j]\u8868\u793ai\u548cj\u662f\u5426\u76f8\u90bb\u3002 \u8fd9\u4e2a\u77e9\u9635\u7684n\u6b21\u5e42matrix^n[i][j]\u8868\u793a\u4ecei\u6070\u597d\u8d70n\u6b65\u5230\u8fbej\u7684\u8def\u5f84\u6709\u51e0\u6761\u3002 \u90a3\u53ef\u8fbe\u77e9\u9635\u5bf9\u7b49\u4ef7\u6001\u662f\u600e\u4e48\u5904\u7406\u7684\u5462\uff1f\u5982\u679c\u8003\u8651\u7b49\u4ef7\u6001\uff0c\u4e00\u4e2a\u72b6\u6001\u7684\u53ef\u5230\u8fbe\u72b6\u6001\u5b9e\u5728\u662f\u592a\u591a\u4e86\u3002\u56e0\u6b64\u6211\u4eec\u8fd9\u91cc\u8ba4\u4e3a\u7684\u53ef\u8fbe\u53ea\u662f\u7528\u5730\u4e8c\u4e2d\u65b9\u6cd5\u5904\u7406\u7b49\u4ef7\u6001\u65f6\uff0cnext\u6307\u9488\u76f4\u63a5\u6307\u5411\u7684\u88ab\u8ba4\u4e3a\u53ef\u8fbe\u3002","title":"String"},{"location":"competitive_programming/string/#string","text":"trie\u6811\u662f\u4e00\u79cd\u5b58\u50a8\u540d\u79f0\u7684\u666e\u904d\u65b9\u6cd5\u3002","title":"String"},{"location":"competitive_programming/string/#karp-rabin","text":"karp-rabin\u628a\u5b57\u7b26\u4e32\u8f6c\u5316\u6210\u6570\u5b57\u7684\u7b97\u6cd5\uff0c\u4e00\u4e2a\u5b57\u7b26\u4e32\u6709n\u79cd\u5b57\u7b26\u6784\u6210\uff0c\u628a\u6bcf\u79cd\u5b57\u7b26\u5bf9\u5e94\u4e3a0\uff5en-1\u4e2d\u7684\u4e00\u4e2a\u6570\u5b57\uff0c\u628a\u5b57\u6bcd\u6362\u6210\u5bf9\u5e94\u7684\u6570\u5b57\u4e4b\u540e\uff0c\u5bf9\u4e8e\u56fa\u5b9a\u957f\u5ea6\u7684\u4e32\uff0c\u6bcf\u4e2a\u4e32\u90fd\u4e0e\u4e00\u4e2a\u552f\u4e00\u7684n\u8fdb\u5236\u6570\u5bf9\u5e94\u3002\u8fd9\u6837\u5c31\u53ef\u4ee5hash\u4e86","title":"Karp-Rabin"},{"location":"competitive_programming/string/#dfa","text":"ac\u81ea\u52a8\u673a\u4e0a\u7684\u7b49\u4ef7\u6001\uff1a \u7b49\u4ef7\u6001\u5373\u7528fail\u6307\u9488\u8fde\u63a5\u7684\u70b9\uff0c\u5728\u884c\u8d70fail\u6307\u9488\u65f6\u5339\u914d\u7684\u5b57\u7b26\u6570\u91cf\u5e76\u6ca1\u6709\u53d1\u751f\u53d8\u5316\uff0c\u56e0\u6b64\u8fd9\u4e9b\u70b9\u53ef\u4ee5\u770b\u6210\u662f\u76f8\u540c\u7684\u5339\u914d\u72b6\u6001\u3002 \u901a\u5e38\u6709\u4e24\u79cd\u65b9\u6cd5\u5904\u7406\u7b49\u4ef7\u6001\uff0c\u7b2c\u4e00\u662f\u4e92\u4e3a\u7b49\u4ef7\u6001\u7684\u70b9\u5404\u81ea\u8bb0\u5f55\u5404\u81ea\u7684\u4fe1\u606f\u3002\u5339\u914d\u7684\u65f6\u5019\u9700\u8981\u904d\u5386\u6240\u6709\u7b49\u4ef7\u6001\u4ee5\u5224\u65ad\u662f\u5426\u5339\u914d\u6210\u529f\u3002next\u6307\u9488\u53ef\u80fd\u4e3a\u7a7a\uff0c\u9700\u8981\u5339\u914d\u65f6\u8fdb\u884c\u5224\u65ad\u662f\u5426\u9700\u8981\u8d70fail\u6307\u9488\u3002 \u7b2c\u4e8c\u662f\u6240\u6709\u7b49\u4ef7\u6001\u4e2d\u7684\u70b9\u8bb0\u5f55\u672c\u8eab\u4ee5\u53ca\u6240\u6709\u6bd4\u5b83\u6d45\u7684\u70b9\u7684\u4fe1\u606f\u603b\u548c\uff08\u5339\u914d\u6210\u529f\u7684\u5355\u8bcd\u603b\u6570\uff09\uff0c\u5339\u914d\u65f6\u4e0d\u9700\u8981\u8d70\u7b49\u4ef7\u6001\u4ee5\u5224\u65ad\u5339\u914d\u6210\u529f\u4e0e\u5426\u3002next\u6307\u9488\u4e0d\u4e3a\u7a7a\uff0c\u76f4\u63a5\u6307\u5411\u672c\u5e94\u901a\u8fc7fail\u6307\u9488\u5bfb\u627e\u5230\u7684\u90a3\u4e2a\u72b6\u6001\u3002 ac\u81ea\u52a8\u673a\u4e0e\u77e9\u9635\uff1a \u5728ac\u81ea\u52a8\u673a\u4e0a\uff0c\u6bcf\u4e00\u4e2a\u4ece\u6839\u51fa\u53d1\u5e76\u5728\u81ea\u52a8\u673a\u4e0a\u884c\u8d70\u7684\u4efb\u610f\u957f\u5ea6\u7684\u8def\u5f84\u90fd\u4ee3\u8868\u4e86\u4e00\u4e2a\u5b57\u7b26\u4e32\u3002 \u628aac\u81ea\u52a8\u673a\u770b\u6210\u4e00\u4e2a\u6709\u5411\u56fe\u7684\u8bdd\u6211\u4eec\u53ef\u4ee5\u63d0\u53d6\u5b83\u7684\u90bb\u63a5\u77e9\u9635\uff08\u53ef\u8fbe\u77e9\u9635\uff09\uff0cmatrix[i][j]\u8868\u793ai\u548cj\u662f\u5426\u76f8\u90bb\u3002 \u8fd9\u4e2a\u77e9\u9635\u7684n\u6b21\u5e42matrix^n[i][j]\u8868\u793a\u4ecei\u6070\u597d\u8d70n\u6b65\u5230\u8fbej\u7684\u8def\u5f84\u6709\u51e0\u6761\u3002 \u90a3\u53ef\u8fbe\u77e9\u9635\u5bf9\u7b49\u4ef7\u6001\u662f\u600e\u4e48\u5904\u7406\u7684\u5462\uff1f\u5982\u679c\u8003\u8651\u7b49\u4ef7\u6001\uff0c\u4e00\u4e2a\u72b6\u6001\u7684\u53ef\u5230\u8fbe\u72b6\u6001\u5b9e\u5728\u662f\u592a\u591a\u4e86\u3002\u56e0\u6b64\u6211\u4eec\u8fd9\u91cc\u8ba4\u4e3a\u7684\u53ef\u8fbe\u53ea\u662f\u7528\u5730\u4e8c\u4e2d\u65b9\u6cd5\u5904\u7406\u7b49\u4ef7\u6001\u65f6\uff0cnext\u6307\u9488\u76f4\u63a5\u6307\u5411\u7684\u88ab\u8ba4\u4e3a\u53ef\u8fbe\u3002","title":"DFA"},{"location":"competitive_programming/codeforces/383C/","text":"383C Tutorial Learned a new way to assign dfn dfn for subtrees. Solution #include <cstdio> #include <vector> using namespace std ; #define D(x) const int MAX_N = int ( 1e5 ) * 2 + 10 ; int n , m ; int value [ MAX_N ]; vector < int > edge [ MAX_N ]; int dfn [ MAX_N ], dfn2 [ MAX_N ]; int time_count ; int binary_indexed_tree [ MAX_N ]; int depth [ MAX_N ]; void dfs ( int u , int father , int cur_depth ) { depth [ u ] = cur_depth ; dfn [ u ] = time_count ++ ; for ( int i = 0 ; i < ( signed ) edge [ u ]. size (); i ++ ) { int v = edge [ u ][ i ]; if ( v != father ) dfs ( v , u , cur_depth + 1 ); } dfn2 [ u ] = time_count ; } int low_bit ( int x ) { return x & ( - x ); } void add ( int pos , int val ) { for ( int i = pos ; i < MAX_N ; i += low_bit ( i )) { binary_indexed_tree [ i ] += val ; } } int sum ( int pos ) { int ret = 0 ; for ( int i = pos ; i > 0 ; i -= low_bit ( i )) { ret += binary_indexed_tree [ i ]; } return ret ; } int main () { //input scanf ( \"%d%d\" , & n , & m ); for ( int i = 1 ; i <= n ; i ++ ) scanf ( \"%d\" , value + i ); for ( int i = 0 ; i < n - 1 ; i ++ ) { int a , b ; scanf ( \"%d%d\" , & a , & b ); edge [ a ]. push_back ( b ); edge [ b ]. push_back ( a ); } //work time_count = 1 ; dfs ( 1 , -1 , 1 ); for ( int i = 0 ; i < m ; i ++ ) { int command , x , val ; scanf ( \"%d\" , & command ); if ( command == 1 ) { scanf ( \"%d%d\" , & x , & val ); if ( depth [ x ] & 1 ) val = - val ; add ( dfn [ x ], val ); add ( dfn2 [ x ], - val ); continue ; } scanf ( \"%d\" , & x ); val = sum ( dfn [ x ]); D ( printf ( \"%d \\n \" , val )); if ( depth [ x ] & 1 ) val = - val ; printf ( \"%d \\n \" , value [ x ] + val ); } return 0 ; }","title":"383C"},{"location":"competitive_programming/codeforces/383C/#383c","text":"","title":"383C"},{"location":"competitive_programming/codeforces/383C/#tutorial","text":"Learned a new way to assign dfn dfn for subtrees.","title":"Tutorial"},{"location":"competitive_programming/codeforces/383C/#solution","text":"#include <cstdio> #include <vector> using namespace std ; #define D(x) const int MAX_N = int ( 1e5 ) * 2 + 10 ; int n , m ; int value [ MAX_N ]; vector < int > edge [ MAX_N ]; int dfn [ MAX_N ], dfn2 [ MAX_N ]; int time_count ; int binary_indexed_tree [ MAX_N ]; int depth [ MAX_N ]; void dfs ( int u , int father , int cur_depth ) { depth [ u ] = cur_depth ; dfn [ u ] = time_count ++ ; for ( int i = 0 ; i < ( signed ) edge [ u ]. size (); i ++ ) { int v = edge [ u ][ i ]; if ( v != father ) dfs ( v , u , cur_depth + 1 ); } dfn2 [ u ] = time_count ; } int low_bit ( int x ) { return x & ( - x ); } void add ( int pos , int val ) { for ( int i = pos ; i < MAX_N ; i += low_bit ( i )) { binary_indexed_tree [ i ] += val ; } } int sum ( int pos ) { int ret = 0 ; for ( int i = pos ; i > 0 ; i -= low_bit ( i )) { ret += binary_indexed_tree [ i ]; } return ret ; } int main () { //input scanf ( \"%d%d\" , & n , & m ); for ( int i = 1 ; i <= n ; i ++ ) scanf ( \"%d\" , value + i ); for ( int i = 0 ; i < n - 1 ; i ++ ) { int a , b ; scanf ( \"%d%d\" , & a , & b ); edge [ a ]. push_back ( b ); edge [ b ]. push_back ( a ); } //work time_count = 1 ; dfs ( 1 , -1 , 1 ); for ( int i = 0 ; i < m ; i ++ ) { int command , x , val ; scanf ( \"%d\" , & command ); if ( command == 1 ) { scanf ( \"%d%d\" , & x , & val ); if ( depth [ x ] & 1 ) val = - val ; add ( dfn [ x ], val ); add ( dfn2 [ x ], - val ); continue ; } scanf ( \"%d\" , & x ); val = sum ( dfn [ x ]); D ( printf ( \"%d \\n \" , val )); if ( depth [ x ] & 1 ) val = - val ; printf ( \"%d \\n \" , value [ x ] + val ); } return 0 ; }","title":"Solution"},{"location":"competitive_programming/codeforces/388B/","text":"388B Solution #include <cstdio> using namespace std ; #define D(x) const int MAX_N = 100 ; int num ; bool ans [ MAX_N ][ MAX_N ]; void connect ( int a , int b ) { ans [ a ][ b ] = ans [ b ][ a ] = true ; } int main () { //init connect ( 1 , 3 ); connect ( 1 , 4 ); for ( int i = 1 ; i < 30 ; i ++ ) { connect ( i * 2 + 1 , i * 2 + 3 ); connect ( i * 2 + 1 , i * 2 + 4 ); connect ( i * 2 + 2 , i * 2 + 3 ); connect ( i * 2 + 2 , i * 2 + 4 ); } for ( int i = 1 ; i <= 30 ; i ++ ) { connect ( 62 + i , 63 + i ); } connect ( 93 , 2 ); //input scanf ( \"%d\" , & num ); //work int temp = 0 ; while ( num > 0 ) { if ( num & 1 ) { connect ( temp * 2 + 1 , 63 + temp ); if ( temp != 0 ) { connect ( temp * 2 + 2 , 63 + temp ); } } temp ++ ; num >>= 1 ; } //output printf ( \"%d \\n \" , 93 ); for ( int i = 1 ; i <= 93 ; i ++ ) { for ( int j = 1 ; j <= 93 ; j ++ ) { if ( ans [ i ][ j ]) putchar ( 'Y' ); else putchar ( 'N' ); } putchar ( '\\n' ); } return 0 ; }","title":"388B"},{"location":"competitive_programming/codeforces/388B/#388b","text":"","title":"388B"},{"location":"competitive_programming/codeforces/388B/#solution","text":"#include <cstdio> using namespace std ; #define D(x) const int MAX_N = 100 ; int num ; bool ans [ MAX_N ][ MAX_N ]; void connect ( int a , int b ) { ans [ a ][ b ] = ans [ b ][ a ] = true ; } int main () { //init connect ( 1 , 3 ); connect ( 1 , 4 ); for ( int i = 1 ; i < 30 ; i ++ ) { connect ( i * 2 + 1 , i * 2 + 3 ); connect ( i * 2 + 1 , i * 2 + 4 ); connect ( i * 2 + 2 , i * 2 + 3 ); connect ( i * 2 + 2 , i * 2 + 4 ); } for ( int i = 1 ; i <= 30 ; i ++ ) { connect ( 62 + i , 63 + i ); } connect ( 93 , 2 ); //input scanf ( \"%d\" , & num ); //work int temp = 0 ; while ( num > 0 ) { if ( num & 1 ) { connect ( temp * 2 + 1 , 63 + temp ); if ( temp != 0 ) { connect ( temp * 2 + 2 , 63 + temp ); } } temp ++ ; num >>= 1 ; } //output printf ( \"%d \\n \" , 93 ); for ( int i = 1 ; i <= 93 ; i ++ ) { for ( int j = 1 ; j <= 93 ; j ++ ) { if ( ans [ i ][ j ]) putchar ( 'Y' ); else putchar ( 'N' ); } putchar ( '\\n' ); } return 0 ; }","title":"Solution"},{"location":"competitive_programming/codeforces/392B/","text":"392B Solution #include <cstdio> #include <algorithm> using namespace std ; const int MAX_N = 50 ; int cost [ 3 ][ 3 ]; long long f [ MAX_N ][ 3 ][ 3 ]; int n ; int main () { //input for ( int i = 0 ; i < 3 ; i ++ ) for ( int j = 0 ; j < 3 ; j ++ ) scanf ( \"%d\" , & cost [ i ][ j ]); scanf ( \"%d\" , & n ); //work for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { for ( int k = 0 ; k < 3 ; k ++ ) { if ( j == k ) continue ; int x = 3 - j - k ; f [ i ][ j ][ k ] = f [ i - 1 ][ j ][ x ] + cost [ j ][ k ] + f [ i - 1 ][ x ][ k ]; f [ i ][ j ][ k ] = min ( f [ i ][ j ][ k ], f [ i - 1 ][ j ][ k ] + cost [ j ][ x ] + f [ i - 1 ][ k ][ j ] + cost [ x ][ k ] + f [ i - 1 ][ j ][ k ]); } } } printf ( \"%I64d \\n \" , f [ n ][ 0 ][ 2 ]); return 0 ; }","title":"392B"},{"location":"competitive_programming/codeforces/392B/#392b","text":"","title":"392B"},{"location":"competitive_programming/codeforces/392B/#solution","text":"#include <cstdio> #include <algorithm> using namespace std ; const int MAX_N = 50 ; int cost [ 3 ][ 3 ]; long long f [ MAX_N ][ 3 ][ 3 ]; int n ; int main () { //input for ( int i = 0 ; i < 3 ; i ++ ) for ( int j = 0 ; j < 3 ; j ++ ) scanf ( \"%d\" , & cost [ i ][ j ]); scanf ( \"%d\" , & n ); //work for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { for ( int k = 0 ; k < 3 ; k ++ ) { if ( j == k ) continue ; int x = 3 - j - k ; f [ i ][ j ][ k ] = f [ i - 1 ][ j ][ x ] + cost [ j ][ k ] + f [ i - 1 ][ x ][ k ]; f [ i ][ j ][ k ] = min ( f [ i ][ j ][ k ], f [ i - 1 ][ j ][ k ] + cost [ j ][ x ] + f [ i - 1 ][ k ][ j ] + cost [ x ][ k ] + f [ i - 1 ][ j ][ k ]); } } } printf ( \"%I64d \\n \" , f [ n ][ 0 ][ 2 ]); return 0 ; }","title":"Solution"},{"location":"competitive_programming/codeforces/396B/","text":"396B Solution #include <cstdio> using namespace std ; #define LL long long int n ; LL gcd ( LL a , LL b ){ if ( a == 0 ) return 1 ; if ( a < 0 ) return gcd ( - a , b ); while ( b ){ LL t = a % b ; a = b ; b = t ; } return a ; } bool is_prime ( int a ) { for ( int i = 2 ; i * i <= a ; i ++ ) { if ( a % i == 0 ) return false ; } return true ; } int main () { //input int t ; scanf ( \"%d\" , & t ); while ( t -- ) { scanf ( \"%d\" , & n ); if ( n == 2 ) { puts ( \"1/6\" ); continue ; } int left = n ; while ( ! is_prime ( left )) left -- ; int right = n + 1 ; while ( ! is_prime ( right )) right ++ ; LL up = 1L L * ( left - 2 ) * right + 2L L * ( n - left + 1 ); LL down = 2L L * left * right ; LL g = gcd ( up , down ); up /= g ; down /= g ; printf ( \"%lld/%lld \\n \" , up , down ); } return 0 ; }","title":"396B"},{"location":"competitive_programming/codeforces/396B/#396b","text":"","title":"396B"},{"location":"competitive_programming/codeforces/396B/#solution","text":"#include <cstdio> using namespace std ; #define LL long long int n ; LL gcd ( LL a , LL b ){ if ( a == 0 ) return 1 ; if ( a < 0 ) return gcd ( - a , b ); while ( b ){ LL t = a % b ; a = b ; b = t ; } return a ; } bool is_prime ( int a ) { for ( int i = 2 ; i * i <= a ; i ++ ) { if ( a % i == 0 ) return false ; } return true ; } int main () { //input int t ; scanf ( \"%d\" , & t ); while ( t -- ) { scanf ( \"%d\" , & n ); if ( n == 2 ) { puts ( \"1/6\" ); continue ; } int left = n ; while ( ! is_prime ( left )) left -- ; int right = n + 1 ; while ( ! is_prime ( right )) right ++ ; LL up = 1L L * ( left - 2 ) * right + 2L L * ( n - left + 1 ); LL down = 2L L * left * right ; LL g = gcd ( up , down ); up /= g ; down /= g ; printf ( \"%lld/%lld \\n \" , up , down ); } return 0 ; }","title":"Solution"},{"location":"competitive_programming/codeforces/398B/","text":"398B Description We choose a grid in a n\\times n n\\times n matrix with uniform probability. If the grid is already painted, we do nothing. Otherwise, we paint it. Repeat this operation until every row and every column has at least one painted grid. Output the expectation of the times to choose grid. ( 1 \\leq n \\leq 2000 1 \\leq n \\leq 2000 ) In addition, there are some already painted grids are given in the input. Tutorial f_{i,j} f_{i,j} means the expectation to paint the empty sub-matrix of i\\times j i\\times j (all other rows and columns have painted grids except these i i rows and j j columns) in a matrix of n\\times n n\\times n . Then f_{i,j} f_{i,j} can be calculated by its sub-problems according to which grid we choose as the next one to paint. f_{i,j}=1 +\\frac{i\\times j}{n\\times n}f_{i-1,j-1} +\\frac{i\\times (n - j)}{n\\times n}f_{i-1,j} +\\frac{(n-i)\\times j}{n\\times n}f_{i,j-1} +\\frac{(n-i)\\times (n-j)}{n\\times n}f_{i,j} f_{i,j}=1 +\\frac{i\\times j}{n\\times n}f_{i-1,j-1} +\\frac{i\\times (n - j)}{n\\times n}f_{i-1,j} +\\frac{(n-i)\\times j}{n\\times n}f_{i,j-1} +\\frac{(n-i)\\times (n-j)}{n\\times n}f_{i,j} Solve this equation, we can get another equation as follows, which is the status transition equation. f_{i,j}=\\frac{1 +\\frac{i\\times j}{n\\times n}f_{i-1,j-1} +\\frac{i\\times (n - j)}{n\\times n}f_{i-1,j} +\\frac{(n-i)\\times j}{n\\times n}f_{i,j-1}} {1-\\frac{(n-i)\\times (n-j)}{n\\times n}} f_{i,j}=\\frac{1 +\\frac{i\\times j}{n\\times n}f_{i-1,j-1} +\\frac{i\\times (n - j)}{n\\times n}f_{i-1,j} +\\frac{(n-i)\\times j}{n\\times n}f_{i,j-1}} {1-\\frac{(n-i)\\times (n-j)}{n\\times n}} Use it to solve this problem. From this problem, I learned that in dynamic programming, sometimes we need to solve a equation to get the status transition equation. In dynamic programming, the order of solving each sub-problem can be the same as it is in real life, however, it can also be reverse. For example, in this problem, the smallest sub-problem $f_{i,j} is the first to calculate in dynamic programming, but the last one to paint in real life. Solution #include <cstdio> using namespace std ; const int MAX_N = 2 * int ( 1e3 ) + 10 ; const int MAX_M = 2 * int ( 1e4 ) + 10 ; int n , m ; bool row_occupied [ MAX_N ], col_occupied [ MAX_N ]; int row_occupied_num , col_occupied_num ; double f [ MAX_N ][ MAX_N ]; void make ( bool * occupied , int & occupied_num , int x ) { if ( occupied [ x ]) { return ; } occupied [ x ] = true ; occupied_num ++ ; } int main () { //input scanf ( \"%d%d\" , & n , & m ); for ( int i = 0 ; i < m ; i ++ ) { int a , b ; scanf ( \"%d%d\" , & a , & b ); make ( row_occupied , row_occupied_num , a ); make ( col_occupied , col_occupied_num , b ); } f [ 0 ][ 0 ] = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { f [ i ][ 0 ] = f [ i - 1 ][ 0 ] + 1.0 * n / i ; f [ 0 ][ i ] = f [ 0 ][ i - 1 ] + 1.0 * n / i ; } for ( int i = 1 ; i <= n - row_occupied_num ; i ++ ) { for ( int j = 1 ; j <= n - col_occupied_num ; j ++ ) { f [ i ][ j ] = 1 ; f [ i ][ j ] += f [ i - 1 ][ j - 1 ] * i * j / n / n ; f [ i ][ j ] += f [ i - 1 ][ j ] * i * ( n - j ) / n / n ; f [ i ][ j ] += f [ i ][ j - 1 ] * ( n - i ) * j / n / n ; f [ i ][ j ] /= 1 - 1.0 * ( n - i ) * ( n - j ) / n / n ; } } printf ( \"%.12f \\n \" , f [ n - row_occupied_num ][ n - col_occupied_num ]); return 0 ; }","title":"398B"},{"location":"competitive_programming/codeforces/398B/#398b","text":"","title":"398B"},{"location":"competitive_programming/codeforces/398B/#description","text":"We choose a grid in a n\\times n n\\times n matrix with uniform probability. If the grid is already painted, we do nothing. Otherwise, we paint it. Repeat this operation until every row and every column has at least one painted grid. Output the expectation of the times to choose grid. ( 1 \\leq n \\leq 2000 1 \\leq n \\leq 2000 ) In addition, there are some already painted grids are given in the input.","title":"Description"},{"location":"competitive_programming/codeforces/398B/#tutorial","text":"f_{i,j} f_{i,j} means the expectation to paint the empty sub-matrix of i\\times j i\\times j (all other rows and columns have painted grids except these i i rows and j j columns) in a matrix of n\\times n n\\times n . Then f_{i,j} f_{i,j} can be calculated by its sub-problems according to which grid we choose as the next one to paint. f_{i,j}=1 +\\frac{i\\times j}{n\\times n}f_{i-1,j-1} +\\frac{i\\times (n - j)}{n\\times n}f_{i-1,j} +\\frac{(n-i)\\times j}{n\\times n}f_{i,j-1} +\\frac{(n-i)\\times (n-j)}{n\\times n}f_{i,j} f_{i,j}=1 +\\frac{i\\times j}{n\\times n}f_{i-1,j-1} +\\frac{i\\times (n - j)}{n\\times n}f_{i-1,j} +\\frac{(n-i)\\times j}{n\\times n}f_{i,j-1} +\\frac{(n-i)\\times (n-j)}{n\\times n}f_{i,j} Solve this equation, we can get another equation as follows, which is the status transition equation. f_{i,j}=\\frac{1 +\\frac{i\\times j}{n\\times n}f_{i-1,j-1} +\\frac{i\\times (n - j)}{n\\times n}f_{i-1,j} +\\frac{(n-i)\\times j}{n\\times n}f_{i,j-1}} {1-\\frac{(n-i)\\times (n-j)}{n\\times n}} f_{i,j}=\\frac{1 +\\frac{i\\times j}{n\\times n}f_{i-1,j-1} +\\frac{i\\times (n - j)}{n\\times n}f_{i-1,j} +\\frac{(n-i)\\times j}{n\\times n}f_{i,j-1}} {1-\\frac{(n-i)\\times (n-j)}{n\\times n}} Use it to solve this problem. From this problem, I learned that in dynamic programming, sometimes we need to solve a equation to get the status transition equation. In dynamic programming, the order of solving each sub-problem can be the same as it is in real life, however, it can also be reverse. For example, in this problem, the smallest sub-problem $f_{i,j} is the first to calculate in dynamic programming, but the last one to paint in real life.","title":"Tutorial"},{"location":"competitive_programming/codeforces/398B/#solution","text":"#include <cstdio> using namespace std ; const int MAX_N = 2 * int ( 1e3 ) + 10 ; const int MAX_M = 2 * int ( 1e4 ) + 10 ; int n , m ; bool row_occupied [ MAX_N ], col_occupied [ MAX_N ]; int row_occupied_num , col_occupied_num ; double f [ MAX_N ][ MAX_N ]; void make ( bool * occupied , int & occupied_num , int x ) { if ( occupied [ x ]) { return ; } occupied [ x ] = true ; occupied_num ++ ; } int main () { //input scanf ( \"%d%d\" , & n , & m ); for ( int i = 0 ; i < m ; i ++ ) { int a , b ; scanf ( \"%d%d\" , & a , & b ); make ( row_occupied , row_occupied_num , a ); make ( col_occupied , col_occupied_num , b ); } f [ 0 ][ 0 ] = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { f [ i ][ 0 ] = f [ i - 1 ][ 0 ] + 1.0 * n / i ; f [ 0 ][ i ] = f [ 0 ][ i - 1 ] + 1.0 * n / i ; } for ( int i = 1 ; i <= n - row_occupied_num ; i ++ ) { for ( int j = 1 ; j <= n - col_occupied_num ; j ++ ) { f [ i ][ j ] = 1 ; f [ i ][ j ] += f [ i - 1 ][ j - 1 ] * i * j / n / n ; f [ i ][ j ] += f [ i - 1 ][ j ] * i * ( n - j ) / n / n ; f [ i ][ j ] += f [ i ][ j - 1 ] * ( n - i ) * j / n / n ; f [ i ][ j ] /= 1 - 1.0 * ( n - i ) * ( n - j ) / n / n ; } } printf ( \"%.12f \\n \" , f [ n - row_occupied_num ][ n - col_occupied_num ]); return 0 ; }","title":"Solution"},{"location":"competitive_programming/codeforces/403B/","text":"403B Solution #include <cstdio> #include <algorithm> #include <cmath> #include <cstring> using namespace std ; #define D(x) const int MAX_N = int ( 1e4 ); const int MAX_M = int ( 1e4 ); int n , m ; int value [ MAX_M ]; int bad [ MAX_N ]; int gcd_array [ MAX_N ]; int gcd ( int a , int b ){ if ( a == 0 ) return 1 ; if ( a < 0 ) return gcd ( - a , b ); while ( b ){ int t = a % b ; a = b ; b = t ; } return a ; } bool is_bad ( int a ) { return a == * lower_bound ( bad , bad + m , a ); } int cal ( int a ) { D ( printf ( \"%d \" , a )); int ret = 0 ; for ( int i = 2 ; i * i <= a ; i ++ ) { while ( a % i == 0 ) { if ( is_bad ( i )) ret -- ; else ret ++ ; a /= i ; } } if ( a == 1 ) { D ( printf ( \"%d \\n \" , ret )); return ret ; } if ( is_bad ( a )) ret -- ; else ret ++ ; D ( printf ( \"%d \\n \" , ret )); return ret ; } int main () { //input scanf ( \"%d%d\" , & n , & m ); for ( int i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & value [ i ]); } for ( int i = 0 ; i < m ; i ++ ) { scanf ( \"%d\" , & bad [ i ]); } //work int temp = value [ 0 ]; for ( int i = 0 ; i < n ; i ++ ) { temp = gcd ( temp , value [ i ]); gcd_array [ i ] = temp ; } temp = 1 ; for ( int i = n - 1 ; i >= 0 ; i -- ) { if ( cal ( gcd_array [ i ] / temp ) < 0 ) { temp = gcd_array [ i ]; } value [ i ] /= temp ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { ans += cal ( value [ i ]); } printf ( \"%d \\n \" , ans ); return 0 ; }","title":"403B"},{"location":"competitive_programming/codeforces/403B/#403b","text":"","title":"403B"},{"location":"competitive_programming/codeforces/403B/#solution","text":"#include <cstdio> #include <algorithm> #include <cmath> #include <cstring> using namespace std ; #define D(x) const int MAX_N = int ( 1e4 ); const int MAX_M = int ( 1e4 ); int n , m ; int value [ MAX_M ]; int bad [ MAX_N ]; int gcd_array [ MAX_N ]; int gcd ( int a , int b ){ if ( a == 0 ) return 1 ; if ( a < 0 ) return gcd ( - a , b ); while ( b ){ int t = a % b ; a = b ; b = t ; } return a ; } bool is_bad ( int a ) { return a == * lower_bound ( bad , bad + m , a ); } int cal ( int a ) { D ( printf ( \"%d \" , a )); int ret = 0 ; for ( int i = 2 ; i * i <= a ; i ++ ) { while ( a % i == 0 ) { if ( is_bad ( i )) ret -- ; else ret ++ ; a /= i ; } } if ( a == 1 ) { D ( printf ( \"%d \\n \" , ret )); return ret ; } if ( is_bad ( a )) ret -- ; else ret ++ ; D ( printf ( \"%d \\n \" , ret )); return ret ; } int main () { //input scanf ( \"%d%d\" , & n , & m ); for ( int i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & value [ i ]); } for ( int i = 0 ; i < m ; i ++ ) { scanf ( \"%d\" , & bad [ i ]); } //work int temp = value [ 0 ]; for ( int i = 0 ; i < n ; i ++ ) { temp = gcd ( temp , value [ i ]); gcd_array [ i ] = temp ; } temp = 1 ; for ( int i = n - 1 ; i >= 0 ; i -- ) { if ( cal ( gcd_array [ i ] / temp ) < 0 ) { temp = gcd_array [ i ]; } value [ i ] /= temp ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { ans += cal ( value [ i ]); } printf ( \"%d \\n \" , ans ); return 0 ; }","title":"Solution"},{"location":"competitive_programming/codeforces/406B/","text":"406B Solution #include <cstdio> using namespace std ; const int MAX_S = int ( 1e6 ) + 20 ; const int s = int ( 1e6 ); bool f [ MAX_S ]; int ans [ MAX_S ]; int ans_num ; int add_num ; bool first = true ; int n ; void output ( int a ) { if ( first ) { first = false ; } else { putchar ( ' ' ); } printf ( \"%d\" , a ); } int main () { //input scanf ( \"%d\" , & n ); for ( int i = 0 ; i < n ; i ++ ) { int a ; scanf ( \"%d\" , & a ); f [ a ] = true ; } //work ans_num = 0 ; add_num = 0 ; for ( int i = 1 ; i <= ( s + 1 ) / 2 ; i ++ ) { int a = s - i + 1 ; if ( f [ i ] && f [ a ]) { add_num ++ ; } else if ( f [ i ] || f [ a ]) { if ( f [ i ]) { ans [ ans_num ++ ] = a ; } else { ans [ ans_num ++ ] = i ; } } } //output printf ( \"%d \\n \" , ans_num + add_num * 2 ); for ( int i = 1 ; i <= ( s + 1 ) / 2 && add_num ; i ++ ) { int a = s - i + 1 ; if ( ! f [ i ] && ! f [ a ]) { output ( i ); output ( a ); add_num -- ; } } for ( int i = 0 ; i < ans_num ; i ++ ) { output ( ans [ i ]); } return 0 ; }","title":"406B"},{"location":"competitive_programming/codeforces/406B/#406b","text":"","title":"406B"},{"location":"competitive_programming/codeforces/406B/#solution","text":"#include <cstdio> using namespace std ; const int MAX_S = int ( 1e6 ) + 20 ; const int s = int ( 1e6 ); bool f [ MAX_S ]; int ans [ MAX_S ]; int ans_num ; int add_num ; bool first = true ; int n ; void output ( int a ) { if ( first ) { first = false ; } else { putchar ( ' ' ); } printf ( \"%d\" , a ); } int main () { //input scanf ( \"%d\" , & n ); for ( int i = 0 ; i < n ; i ++ ) { int a ; scanf ( \"%d\" , & a ); f [ a ] = true ; } //work ans_num = 0 ; add_num = 0 ; for ( int i = 1 ; i <= ( s + 1 ) / 2 ; i ++ ) { int a = s - i + 1 ; if ( f [ i ] && f [ a ]) { add_num ++ ; } else if ( f [ i ] || f [ a ]) { if ( f [ i ]) { ans [ ans_num ++ ] = a ; } else { ans [ ans_num ++ ] = i ; } } } //output printf ( \"%d \\n \" , ans_num + add_num * 2 ); for ( int i = 1 ; i <= ( s + 1 ) / 2 && add_num ; i ++ ) { int a = s - i + 1 ; if ( ! f [ i ] && ! f [ a ]) { output ( i ); output ( a ); add_num -- ; } } for ( int i = 0 ; i < ans_num ; i ++ ) { output ( ans [ i ]); } return 0 ; }","title":"Solution"},{"location":"competitive_programming/codeforces/407B/","text":"407B Solution #include <cstdio> using namespace std ; const int MAX_N = 1010 ; const int MOD = int ( 1e9 ) + 7 ; int n ; int back [ MAX_N ]; int f [ MAX_N ][ MAX_N ]; int main () { //input scanf ( \"%d\" , & n ); for ( int i = 1 ; i <= n ; i ++ ) { scanf ( \"%d\" , & back [ i ]); } //work for ( int i = 2 ; i <= n + 1 ; i ++ ) { for ( int j = i - 1 ; j >= 1 ; j -- ) { f [ j ][ i ] = 0 ; f [ j ][ i ] = ( f [ j ][ i ] + f [ j ][ i - 1 ]) % MOD ; f [ j ][ i ] = ( f [ j ][ i ] + f [ back [ i - 1 ]][ i - 1 ]) % MOD ; f [ j ][ i ] = ( f [ j ][ i ] + 2 ) % MOD ; } } printf ( \"%d \\n \" , f [ 1 ][ n + 1 ]); return 0 ; }","title":"407B"},{"location":"competitive_programming/codeforces/407B/#407b","text":"","title":"407B"},{"location":"competitive_programming/codeforces/407B/#solution","text":"#include <cstdio> using namespace std ; const int MAX_N = 1010 ; const int MOD = int ( 1e9 ) + 7 ; int n ; int back [ MAX_N ]; int f [ MAX_N ][ MAX_N ]; int main () { //input scanf ( \"%d\" , & n ); for ( int i = 1 ; i <= n ; i ++ ) { scanf ( \"%d\" , & back [ i ]); } //work for ( int i = 2 ; i <= n + 1 ; i ++ ) { for ( int j = i - 1 ; j >= 1 ; j -- ) { f [ j ][ i ] = 0 ; f [ j ][ i ] = ( f [ j ][ i ] + f [ j ][ i - 1 ]) % MOD ; f [ j ][ i ] = ( f [ j ][ i ] + f [ back [ i - 1 ]][ i - 1 ]) % MOD ; f [ j ][ i ] = ( f [ j ][ i ] + 2 ) % MOD ; } } printf ( \"%d \\n \" , f [ 1 ][ n + 1 ]); return 0 ; }","title":"Solution"},{"location":"competitive_programming/codeforces/414B/","text":"414B Solution #include <cstdio> using namespace std ; const int MAX_N = 2020 ; const int MAX_M = 2020 ; const int MOD = int ( 1e9 ) + 7 ; int n , m ; int f [ MAX_M ][ MAX_N ]; int main () { //input scanf ( \"%d%d\" , & n , & m ); //work f [ 0 ][ 1 ] = 1 ; for ( int i = 0 ; i <= m ; i ++ ) { for ( int j = 1 ; j <= n ; j ++ ) { for ( int k = j ; k <= n ; k += j ) { f [ i + 1 ][ k ] = ( f [ i ][ j ] + f [ i + 1 ][ k ]) % MOD ; } } } int ans = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { ans = ( ans + f [ m ][ i ]) % MOD ; } printf ( \"%d \\n \" , ans ); return 0 ; }","title":"414B"},{"location":"competitive_programming/codeforces/414B/#414b","text":"","title":"414B"},{"location":"competitive_programming/codeforces/414B/#solution","text":"#include <cstdio> using namespace std ; const int MAX_N = 2020 ; const int MAX_M = 2020 ; const int MOD = int ( 1e9 ) + 7 ; int n , m ; int f [ MAX_M ][ MAX_N ]; int main () { //input scanf ( \"%d%d\" , & n , & m ); //work f [ 0 ][ 1 ] = 1 ; for ( int i = 0 ; i <= m ; i ++ ) { for ( int j = 1 ; j <= n ; j ++ ) { for ( int k = j ; k <= n ; k += j ) { f [ i + 1 ][ k ] = ( f [ i ][ j ] + f [ i + 1 ][ k ]) % MOD ; } } } int ans = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { ans = ( ans + f [ m ][ i ]) % MOD ; } printf ( \"%d \\n \" , ans ); return 0 ; }","title":"Solution"},{"location":"competitive_programming/codeforces/418B/","text":"418B Solution #include <cstdio> #include <algorithm> using namespace std ; const int MAX_N = 110 ; const int MAX_M = 20 ; const long long INF = ( 1L L << 60 ); struct Elem { Elem () {} Elem ( int ruble , int monitor , int prob ) : ruble ( ruble ), monitor ( monitor ), prob ( prob ) {} int ruble , monitor , prob ; bool operator < ( const Elem & b ) const { return monitor < b . monitor ; } } elem [ MAX_N ]; int n , m , price ; long long f [ 1 << MAX_M ]; int main () { //input scanf ( \"%d%d%d\" , & n , & m , & price ); for ( int i = 0 ; i < n ; i ++ ) { int a , b , c , d , e = 0 ; scanf ( \"%d%d%d\" , & a , & b , & c ); for ( int j = 0 ; j < c ; j ++ ) { scanf ( \"%d\" , & d ); d -- ; e = e | ( 1 << d ); } elem [ i ] = Elem ( a , b , e ); } //work long long ans = INF ; sort ( elem , elem + n ); fill ( f , f + ( 1 << m ), INF ); f [ 0 ] = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < ( 1 << m ); j ++ ) { f [ j | elem [ i ]. prob ] = min ( f [ j | elem [ i ]. prob ], f [ j ] + elem [ i ]. ruble ); } ans = min ( ans , f [( 1 << m ) - 1 ] + 1L L * price * elem [ i ]. monitor ); } if ( ans == INF ) puts ( \"-1\" ); else printf ( \"%I64d \\n \" , ans ); return 0 ; }","title":"418B"},{"location":"competitive_programming/codeforces/418B/#418b","text":"","title":"418B"},{"location":"competitive_programming/codeforces/418B/#solution","text":"#include <cstdio> #include <algorithm> using namespace std ; const int MAX_N = 110 ; const int MAX_M = 20 ; const long long INF = ( 1L L << 60 ); struct Elem { Elem () {} Elem ( int ruble , int monitor , int prob ) : ruble ( ruble ), monitor ( monitor ), prob ( prob ) {} int ruble , monitor , prob ; bool operator < ( const Elem & b ) const { return monitor < b . monitor ; } } elem [ MAX_N ]; int n , m , price ; long long f [ 1 << MAX_M ]; int main () { //input scanf ( \"%d%d%d\" , & n , & m , & price ); for ( int i = 0 ; i < n ; i ++ ) { int a , b , c , d , e = 0 ; scanf ( \"%d%d%d\" , & a , & b , & c ); for ( int j = 0 ; j < c ; j ++ ) { scanf ( \"%d\" , & d ); d -- ; e = e | ( 1 << d ); } elem [ i ] = Elem ( a , b , e ); } //work long long ans = INF ; sort ( elem , elem + n ); fill ( f , f + ( 1 << m ), INF ); f [ 0 ] = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < ( 1 << m ); j ++ ) { f [ j | elem [ i ]. prob ] = min ( f [ j | elem [ i ]. prob ], f [ j ] + elem [ i ]. ruble ); } ans = min ( ans , f [( 1 << m ) - 1 ] + 1L L * price * elem [ i ]. monitor ); } if ( ans == INF ) puts ( \"-1\" ); else printf ( \"%I64d \\n \" , ans ); return 0 ; }","title":"Solution"},{"location":"competitive_programming/codeforces/420B/","text":"420B Solution #include <cstdlib> #include <cstdio> #include <cstring> #include <iostream> using namespace std ; #define MAX_MSG_NUM 100005 #define MAX_PEOPEL_NUM 100005 #define D(x) struct Msg { int id ; bool on ; } msg [ MAX_MSG_NUM ]; int people_num , msg_num ; bool vis [ MAX_PEOPEL_NUM ]; bool wait [ MAX_PEOPEL_NUM ]; int init_num ; int ans [ MAX_PEOPEL_NUM ]; void input () { scanf ( \"%d%d\" , & people_num , & msg_num ); for ( int i = 0 ; i < msg_num ; i ++ ) { char st [ 2 ]; int a ; scanf ( \"%s%d\" , st , & a ); msg [ i ]. on = ( st [ 0 ] == '+' ); msg [ i ]. id = a - 1 ; } } void make_wait () { memset ( vis , 0 , sizeof ( vis )); memset ( wait , 0 , sizeof ( wait )); bool did = false ; init_num = 0 ; for ( int i = 0 ; i < msg_num ; i ++ ) { if ( vis [ msg [ i ]. id ]) { continue ; } if ( ! msg [ i ]. on ) { wait [ msg [ i ]. id ] = true ; init_num ++ ; did = true ; } vis [ msg [ i ]. id ] = true ; } if ( ! did ) { wait [ msg [ 0 ]. id ] = true ; } } void work () { int on_num = init_num ; for ( int i = 0 ; i < msg_num ; i ++ ) { D ( printf ( \"%d %d \\n \" , i , on_num );) if ( msg [ i ]. on ) { on_num ++ ; if ( on_num == 1 && ! wait [ msg [ i ]. id ]) { memset ( wait , 0 , sizeof ( wait )); } continue ; } on_num -- ; if ( ! wait [ msg [ i ]. id ]) { continue ; } if ( on_num > 0 ) { wait [ msg [ i ]. id ] = false ; } } } void output () { int ans_num = 0 ; for ( int i = 0 ; i < people_num ; i ++ ) { if ( wait [ i ] || ! vis [ i ]) { ans [ ans_num ++ ] = i + 1 ; D ( printf ( \"i = %d \\t ans = %d \\n \" , i , ans [ ans_num - 1 ]);) } } printf ( \"%d \\n \" , ans_num ); if ( ans_num == 0 ) return ; printf ( \"%d\" , ans [ 0 ]); for ( int i = 1 ; i < ans_num ; i ++ ) { printf ( \" %d\" , ans [ i ]); } puts ( \"\" ); } int main () { input (); make_wait (); work (); output (); return 0 ; }","title":"420B"},{"location":"competitive_programming/codeforces/420B/#420b","text":"","title":"420B"},{"location":"competitive_programming/codeforces/420B/#solution","text":"#include <cstdlib> #include <cstdio> #include <cstring> #include <iostream> using namespace std ; #define MAX_MSG_NUM 100005 #define MAX_PEOPEL_NUM 100005 #define D(x) struct Msg { int id ; bool on ; } msg [ MAX_MSG_NUM ]; int people_num , msg_num ; bool vis [ MAX_PEOPEL_NUM ]; bool wait [ MAX_PEOPEL_NUM ]; int init_num ; int ans [ MAX_PEOPEL_NUM ]; void input () { scanf ( \"%d%d\" , & people_num , & msg_num ); for ( int i = 0 ; i < msg_num ; i ++ ) { char st [ 2 ]; int a ; scanf ( \"%s%d\" , st , & a ); msg [ i ]. on = ( st [ 0 ] == '+' ); msg [ i ]. id = a - 1 ; } } void make_wait () { memset ( vis , 0 , sizeof ( vis )); memset ( wait , 0 , sizeof ( wait )); bool did = false ; init_num = 0 ; for ( int i = 0 ; i < msg_num ; i ++ ) { if ( vis [ msg [ i ]. id ]) { continue ; } if ( ! msg [ i ]. on ) { wait [ msg [ i ]. id ] = true ; init_num ++ ; did = true ; } vis [ msg [ i ]. id ] = true ; } if ( ! did ) { wait [ msg [ 0 ]. id ] = true ; } } void work () { int on_num = init_num ; for ( int i = 0 ; i < msg_num ; i ++ ) { D ( printf ( \"%d %d \\n \" , i , on_num );) if ( msg [ i ]. on ) { on_num ++ ; if ( on_num == 1 && ! wait [ msg [ i ]. id ]) { memset ( wait , 0 , sizeof ( wait )); } continue ; } on_num -- ; if ( ! wait [ msg [ i ]. id ]) { continue ; } if ( on_num > 0 ) { wait [ msg [ i ]. id ] = false ; } } } void output () { int ans_num = 0 ; for ( int i = 0 ; i < people_num ; i ++ ) { if ( wait [ i ] || ! vis [ i ]) { ans [ ans_num ++ ] = i + 1 ; D ( printf ( \"i = %d \\t ans = %d \\n \" , i , ans [ ans_num - 1 ]);) } } printf ( \"%d \\n \" , ans_num ); if ( ans_num == 0 ) return ; printf ( \"%d\" , ans [ 0 ]); for ( int i = 1 ; i < ans_num ; i ++ ) { printf ( \" %d\" , ans [ i ]); } puts ( \"\" ); } int main () { input (); make_wait (); work (); output (); return 0 ; }","title":"Solution"},{"location":"competitive_programming/codeforces/425B/","text":"425B Description A matrix with n n rows and m m columns consists of 1s and 0s. ( 1\\leq n,m \\leq 100 1\\leq n,m \\leq 100 ) We are asked to change the matrix with less than k k operations. ( 1\\leq k \\leq 10 1\\leq k \\leq 10 ) After the change, every connected region is a rectangle. Output the minimal number of operations needed. Tutorial The final matrix must look like a chess board but with rectangles of 1s and 0s instead of squares of black and white. So there is a vector x x has n n values can serve as a pattern of each column. Every column either the same as x x or different with x x in every value. If we found x x , we can easily use greedy to decide how many operations we need to change each column into x x or its counter part. Posit n \\leq m n \\leq m . There are two situations. The first is n > k n > k , which means some columns cannot be modified, since m > k m > k (because n \\leq m n \\leq m and n > k n > k ). If we modify each column, we must use more than k k operations which is not allowed. So we just enumerate each column as x x and calculate the answer. The second situation is n \\leq k n \\leq k . Since k \\leq 10 k \\leq 10 , we can just enumerate all the possible x x with O(2^n) O(2^n) , and use the same method to calculate the answer. Solution #include <cstdio> #include <algorithm> using namespace std ; const int MAX_N = 110 ; const int MAX_M = 110 ; int n , m , opr_num ; int f [ MAX_N ][ MAX_M ]; int vec [ MAX_N ]; void make ( int bits ) { int i = 0 ; while ( bits ) { vec [ i ++ ] = bits & 1 ; bits >>= 1 ; } } int work () { int ret = 0 ; for ( int i = 0 ; i < m ; i ++ ) { int same = 0 ; int diff = 0 ; for ( int j = 0 ; j < n ; j ++ ) { if ( vec [ j ] == f [ j ][ i ]) { same ++ ; } else { diff ++ ; } } ret += min ( same , diff ); } return ret ; } int main () { //input scanf ( \"%d%d%d\" , & n , & m , & opr_num ); for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < m ; j ++ ) { if ( m > n ) { scanf ( \"%d\" , & f [ i ][ j ]); } else { scanf ( \"%d\" , & f [ j ][ i ]); } } } if ( n > m ) { swap ( m , n ); } //work int ans = n * m ; if ( n <= opr_num ) { for ( int i = 0 ; i < ( 1 << n ); i ++ ) { make ( i ); ans = min ( ans , work ()); } } else { for ( int i = 0 ; i < m ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { vec [ j ] = f [ j ][ i ]; } ans = min ( ans , work ()); } } if ( ans > opr_num ) { puts ( \"-1\" ); } else { printf ( \"%d \\n \" , ans ); } return 0 ; }","title":"425B"},{"location":"competitive_programming/codeforces/425B/#425b","text":"","title":"425B"},{"location":"competitive_programming/codeforces/425B/#description","text":"A matrix with n n rows and m m columns consists of 1s and 0s. ( 1\\leq n,m \\leq 100 1\\leq n,m \\leq 100 ) We are asked to change the matrix with less than k k operations. ( 1\\leq k \\leq 10 1\\leq k \\leq 10 ) After the change, every connected region is a rectangle. Output the minimal number of operations needed.","title":"Description"},{"location":"competitive_programming/codeforces/425B/#tutorial","text":"The final matrix must look like a chess board but with rectangles of 1s and 0s instead of squares of black and white. So there is a vector x x has n n values can serve as a pattern of each column. Every column either the same as x x or different with x x in every value. If we found x x , we can easily use greedy to decide how many operations we need to change each column into x x or its counter part. Posit n \\leq m n \\leq m . There are two situations. The first is n > k n > k , which means some columns cannot be modified, since m > k m > k (because n \\leq m n \\leq m and n > k n > k ). If we modify each column, we must use more than k k operations which is not allowed. So we just enumerate each column as x x and calculate the answer. The second situation is n \\leq k n \\leq k . Since k \\leq 10 k \\leq 10 , we can just enumerate all the possible x x with O(2^n) O(2^n) , and use the same method to calculate the answer.","title":"Tutorial"},{"location":"competitive_programming/codeforces/425B/#solution","text":"#include <cstdio> #include <algorithm> using namespace std ; const int MAX_N = 110 ; const int MAX_M = 110 ; int n , m , opr_num ; int f [ MAX_N ][ MAX_M ]; int vec [ MAX_N ]; void make ( int bits ) { int i = 0 ; while ( bits ) { vec [ i ++ ] = bits & 1 ; bits >>= 1 ; } } int work () { int ret = 0 ; for ( int i = 0 ; i < m ; i ++ ) { int same = 0 ; int diff = 0 ; for ( int j = 0 ; j < n ; j ++ ) { if ( vec [ j ] == f [ j ][ i ]) { same ++ ; } else { diff ++ ; } } ret += min ( same , diff ); } return ret ; } int main () { //input scanf ( \"%d%d%d\" , & n , & m , & opr_num ); for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < m ; j ++ ) { if ( m > n ) { scanf ( \"%d\" , & f [ i ][ j ]); } else { scanf ( \"%d\" , & f [ j ][ i ]); } } } if ( n > m ) { swap ( m , n ); } //work int ans = n * m ; if ( n <= opr_num ) { for ( int i = 0 ; i < ( 1 << n ); i ++ ) { make ( i ); ans = min ( ans , work ()); } } else { for ( int i = 0 ; i < m ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { vec [ j ] = f [ j ][ i ]; } ans = min ( ans , work ()); } } if ( ans > opr_num ) { puts ( \"-1\" ); } else { printf ( \"%d \\n \" , ans ); } return 0 ; }","title":"Solution"},{"location":"competitive_programming/codeforces/429B/","text":"429B Solution #include <cstdio> #include <algorithm> using namespace std ; const int MAX_M = 1010 ; const int MAX_N = 1010 ; int n , m ; int gain [ MAX_N ][ MAX_M ]; int up_right [ MAX_N ][ MAX_M ]; int up_left [ MAX_N ][ MAX_M ]; int down_left [ MAX_N ][ MAX_M ]; int down_right [ MAX_N ][ MAX_M ]; void work ( int f [][ MAX_M ], int s1 , int e1 , int d1 , int s2 , int e2 , int d2 ) { for ( int i = s1 ; i != e1 + d1 ; i += d1 ) for ( int j = s2 ; j != e2 + d2 ; j += d2 ) f [ i ][ j ] = gain [ i ][ j ] + max ( f [ i - d1 ][ j ], f [ i ][ j - d2 ]); } int main () { //input scanf ( \"%d%d\" , & n , & m ); for ( int i = 1 ; i <= n ; i ++ ) for ( int j = 1 ; j <= m ; j ++ ) scanf ( \"%d\" , & gain [ i ][ j ]); //work work ( down_right , 1 , n , 1 , 1 , m , 1 ); work ( up_right , n , 1 , -1 , 1 , m , 1 ); work ( down_left , 1 , n , 1 , m , 1 , -1 ); work ( up_left , n , 1 , -1 , m , 1 , -1 ); int ans = 0 ; for ( int i = 2 ; i <= n - 1 ; i ++ ) { for ( int j = 2 ; j <= m - 1 ; j ++ ) { int temp_dr = down_right [ i - 1 ][ j ] + up_right [ i ][ j - 1 ] + down_left [ i ][ j + 1 ] + up_left [ i + 1 ][ j ]; int temp_ur = down_right [ i ][ j - 1 ] + up_right [ i + 1 ][ j ] + down_left [ i - 1 ][ j ] + up_left [ i ][ j + 1 ]; ans = max ( ans , temp_dr ); ans = max ( ans , temp_ur ); } } //output printf ( \"%d \\n \" , ans ); return 0 ; }","title":"429B"},{"location":"competitive_programming/codeforces/429B/#429b","text":"","title":"429B"},{"location":"competitive_programming/codeforces/429B/#solution","text":"#include <cstdio> #include <algorithm> using namespace std ; const int MAX_M = 1010 ; const int MAX_N = 1010 ; int n , m ; int gain [ MAX_N ][ MAX_M ]; int up_right [ MAX_N ][ MAX_M ]; int up_left [ MAX_N ][ MAX_M ]; int down_left [ MAX_N ][ MAX_M ]; int down_right [ MAX_N ][ MAX_M ]; void work ( int f [][ MAX_M ], int s1 , int e1 , int d1 , int s2 , int e2 , int d2 ) { for ( int i = s1 ; i != e1 + d1 ; i += d1 ) for ( int j = s2 ; j != e2 + d2 ; j += d2 ) f [ i ][ j ] = gain [ i ][ j ] + max ( f [ i - d1 ][ j ], f [ i ][ j - d2 ]); } int main () { //input scanf ( \"%d%d\" , & n , & m ); for ( int i = 1 ; i <= n ; i ++ ) for ( int j = 1 ; j <= m ; j ++ ) scanf ( \"%d\" , & gain [ i ][ j ]); //work work ( down_right , 1 , n , 1 , 1 , m , 1 ); work ( up_right , n , 1 , -1 , 1 , m , 1 ); work ( down_left , 1 , n , 1 , m , 1 , -1 ); work ( up_left , n , 1 , -1 , m , 1 , -1 ); int ans = 0 ; for ( int i = 2 ; i <= n - 1 ; i ++ ) { for ( int j = 2 ; j <= m - 1 ; j ++ ) { int temp_dr = down_right [ i - 1 ][ j ] + up_right [ i ][ j - 1 ] + down_left [ i ][ j + 1 ] + up_left [ i + 1 ][ j ]; int temp_ur = down_right [ i ][ j - 1 ] + up_right [ i + 1 ][ j ] + down_left [ i - 1 ][ j ] + up_left [ i ][ j + 1 ]; ans = max ( ans , temp_dr ); ans = max ( ans , temp_ur ); } } //output printf ( \"%d \\n \" , ans ); return 0 ; }","title":"Solution"},{"location":"competitive_programming/codeforces/434B/","text":"434B Description A matrix with n n rows and m m columns consists of 1s and 0s. ( 1 \\leq n,m \\leq 10^3 1 \\leq n,m \\leq 10^3 ) Now, we have q q ( 1 \\leq q \\leq 10^3 1 \\leq q \\leq 10^3 ) operations. There are two kinds of operations. First is to change the value of one point in the matrix (1 to 0 or 0 to 1). Second is to query what is the largest space of a rectangle with point ( x,y x,y ) on its edge. The rectangle must be filled with 1s. Tutorial We calculate l[i][j] l[i][j] which is the length of the longest chain of 1s on the right of point ( i,j i,j ). It can be done with O(n^2) O(n^2) or O(nm) O(nm) . For each change we can change l l in O(n) O(n) . For each query we can calculate largest rectangle with the point on its right side in O(n) O(n) . If the point is ( x,y x,y ), we start from the rectangle of a single line from ( x-l[x][y],y x-l[x][y],y ) to ( x,y x,y ). Then we strech it up and down one unit at a time. Of course the left side of the rectangle may be pushed right during the strech. In each strech, we choose up if l[x-1][y] l[x-1][y] is larger than l[x+1][y] l[x+1][y] . Otherwise, we strech down. Each time we calculate the space of the rectangle and update the answer. It is the same when the point is on the left, up and down side of the rectangle. Solution #include <cstdio> #include <algorithm> using namespace std; #define D(x) x const int MAX_N = 1050; const int MAX_M = 1050; int n, m, q; int matrix[MAX_N][MAX_M]; int l[MAX_M][MAX_N]; int r[MAX_M][MAX_N]; int u[MAX_N][MAX_M]; int d[MAX_N][MAX_M]; void modify(int x, int y) { matrix[x][y] ^= 1; for (int j = 1; j <= m; j++) { if (matrix[x][j] == 1) { l[j][x] = l[j - 1][x] + 1; }else { l[j][x] = 0; } } for (int j = m; j >= 1; j--) { if (matrix[x][j] == 1) { r[j][x] = r[j + 1][x] + 1; }else { r[j][x] = 0; } } for (int i = 1; i <= n; i++) { if (matrix[i][y] == 1) { u[i][y] = u[i - 1][y] + 1; }else { u[i][y] = 0; } } for (int i = n; i >= 1; i--) { if (matrix[i][y] == 1) { d[i][y] = d[i + 1][y] + 1; }else { d[i][y] = 0; } } } int query(int f[], int pos, int bound) { int l = pos; int r = pos; int ret = f[pos]; int min_height = f[pos]; while (l > 1 || r < bound) { if (r == bound || f[l - 1] > f[r + 1]) { l--; min_height = min(min_height, f[l]); }else { r++; min_height = min(min_height, f[r]); } ret = max(ret, (r - l + 1) * min_height); } return ret; } int main() { //input scanf(\"%d%d%d\", &n, &m, &q); for (int i = 1; i <= n; i++) for (int j = 1; j <= m; j++) scanf(\"%d\", matrix[i] + j); //prework for (int i = 1; i <= n; i++) for (int j = 1; j <= m; j++) { if (matrix[i][j] == 1) { l[j][i] = l[j - 1][i] + 1; u[i][j] = u[i - 1][j] + 1; }else { l[j][i] = u[i][j] = 0; } } for (int i = n; i >= 1; i--) for (int j = m; j >= 1; j--) { if (matrix[i][j] == 1) { r[j][i] = r[j + 1][i] + 1; d[i][j] = d[i + 1][j] + 1; }else { d[i][j] = r[j][i] = 0; } } //work while (q--) { int a, x, y; scanf(\"%d%d%d\", &a, &x, &y); if (a == 1) { modify(x, y); continue; } int ans = 0; ans = max(ans, query(l[y], x, n)); ans = max(ans, query(r[y], x, n)); ans = max(ans, query(u[x], y, m)); ans = max(ans, query(d[x], y, m)); printf(\"%d\\n\", ans); } return 0; }","title":"434B"},{"location":"competitive_programming/codeforces/434B/#434b","text":"","title":"434B"},{"location":"competitive_programming/codeforces/434B/#description","text":"A matrix with n n rows and m m columns consists of 1s and 0s. ( 1 \\leq n,m \\leq 10^3 1 \\leq n,m \\leq 10^3 ) Now, we have q q ( 1 \\leq q \\leq 10^3 1 \\leq q \\leq 10^3 ) operations. There are two kinds of operations. First is to change the value of one point in the matrix (1 to 0 or 0 to 1). Second is to query what is the largest space of a rectangle with point ( x,y x,y ) on its edge. The rectangle must be filled with 1s.","title":"Description"},{"location":"competitive_programming/codeforces/434B/#tutorial","text":"We calculate l[i][j] l[i][j] which is the length of the longest chain of 1s on the right of point ( i,j i,j ). It can be done with O(n^2) O(n^2) or O(nm) O(nm) . For each change we can change l l in O(n) O(n) . For each query we can calculate largest rectangle with the point on its right side in O(n) O(n) . If the point is ( x,y x,y ), we start from the rectangle of a single line from ( x-l[x][y],y x-l[x][y],y ) to ( x,y x,y ). Then we strech it up and down one unit at a time. Of course the left side of the rectangle may be pushed right during the strech. In each strech, we choose up if l[x-1][y] l[x-1][y] is larger than l[x+1][y] l[x+1][y] . Otherwise, we strech down. Each time we calculate the space of the rectangle and update the answer. It is the same when the point is on the left, up and down side of the rectangle.","title":"Tutorial"},{"location":"competitive_programming/codeforces/434B/#solution","text":"#include <cstdio> #include <algorithm> using namespace std; #define D(x) x const int MAX_N = 1050; const int MAX_M = 1050; int n, m, q; int matrix[MAX_N][MAX_M]; int l[MAX_M][MAX_N]; int r[MAX_M][MAX_N]; int u[MAX_N][MAX_M]; int d[MAX_N][MAX_M]; void modify(int x, int y) { matrix[x][y] ^= 1; for (int j = 1; j <= m; j++) { if (matrix[x][j] == 1) { l[j][x] = l[j - 1][x] + 1; }else { l[j][x] = 0; } } for (int j = m; j >= 1; j--) { if (matrix[x][j] == 1) { r[j][x] = r[j + 1][x] + 1; }else { r[j][x] = 0; } } for (int i = 1; i <= n; i++) { if (matrix[i][y] == 1) { u[i][y] = u[i - 1][y] + 1; }else { u[i][y] = 0; } } for (int i = n; i >= 1; i--) { if (matrix[i][y] == 1) { d[i][y] = d[i + 1][y] + 1; }else { d[i][y] = 0; } } } int query(int f[], int pos, int bound) { int l = pos; int r = pos; int ret = f[pos]; int min_height = f[pos]; while (l > 1 || r < bound) { if (r == bound || f[l - 1] > f[r + 1]) { l--; min_height = min(min_height, f[l]); }else { r++; min_height = min(min_height, f[r]); } ret = max(ret, (r - l + 1) * min_height); } return ret; } int main() { //input scanf(\"%d%d%d\", &n, &m, &q); for (int i = 1; i <= n; i++) for (int j = 1; j <= m; j++) scanf(\"%d\", matrix[i] + j); //prework for (int i = 1; i <= n; i++) for (int j = 1; j <= m; j++) { if (matrix[i][j] == 1) { l[j][i] = l[j - 1][i] + 1; u[i][j] = u[i - 1][j] + 1; }else { l[j][i] = u[i][j] = 0; } } for (int i = n; i >= 1; i--) for (int j = m; j >= 1; j--) { if (matrix[i][j] == 1) { r[j][i] = r[j + 1][i] + 1; d[i][j] = d[i + 1][j] + 1; }else { d[i][j] = r[j][i] = 0; } } //work while (q--) { int a, x, y; scanf(\"%d%d%d\", &a, &x, &y); if (a == 1) { modify(x, y); continue; } int ans = 0; ans = max(ans, query(l[y], x, n)); ans = max(ans, query(r[y], x, n)); ans = max(ans, query(u[x], y, m)); ans = max(ans, query(d[x], y, m)); printf(\"%d\\n\", ans); } return 0; }","title":"Solution"},{"location":"competitive_programming/codeforces/438B/","text":"438B Description Here is a undirected graph with n n <span><span class=\"MathJax_Preview\">n</span><script type=\"math/tex\">n nodes and m m <span><span class=\"MathJax_Preview\">m</span><script type=\"math/tex\">m edges. ( 2 \\leq n, m \\leq 10^5 2 \\leq n, m \\leq 10^5 <span><span class=\"MathJax_Preview\">2 \\leq n, m \\leq 10^5</span><script type=\"math/tex\">2 \\leq n, m \\leq 10^5 ) Each node has a weight a_i a_i <span><span class=\"MathJax_Preview\">a_i</span><script type=\"math/tex\">a_i . f(p, q) f(p, q) <span><span class=\"MathJax_Preview\">f(p, q)</span><script type=\"math/tex\">f(p, q) defines the simple route from p p <span><span class=\"MathJax_Preview\">p</span><script type=\"math/tex\">p to q q <span><span class=\"MathJax_Preview\">q</span><script type=\"math/tex\">q with the largest g(x_1~x_t) g(x_1~x_t) <span><span class=\"MathJax_Preview\">g(x_1~x_t)</span><script type=\"math/tex\">g(x_1~x_t) . g(x_1~x_t) g(x_1~x_t) <span><span class=\"MathJax_Preview\">g(x_1~x_t)</span><script type=\"math/tex\">g(x_1~x_t) defines the weight of the node with the least weight on that simple route. Output the average of f(p,q) f(p,q) <span><span class=\"MathJax_Preview\">f(p,q)</span><script type=\"math/tex\">f(p,q) of all possible pairs of nodes on the graph. Tutorial Sort the nodes with their weights in decreasing order. Starting from an empty graph, add the nodes to the graph one by one. Each time some components may become connected by the new node added. f(p, q) f(p, q) <span><span class=\"MathJax_Preview\">f(p, q)</span><script type=\"math/tex\">f(p, q) where p p <span><span class=\"MathJax_Preview\">p</span><script type=\"math/tex\">p and q q <span><span class=\"MathJax_Preview\">q</span><script type=\"math/tex\">q are in two different components that to be connected by the new node, equals to the weight of the new node. Use disjoint sets to work it out. Join the components to that new node one by one. Add the sum of the f(p,q) f(p,q) <span><span class=\"MathJax_Preview\">f(p,q)</span><script type=\"math/tex\">f(p,q) s to the answer during each joint. Solution #include <vector> #include <cstdio> #include <algorithm> using namespace std ; const int MAX_N = int ( 1e5 ) + 10 ; int n , m ; vector < int > edge [ MAX_N ]; pair < int , int > animal [ MAX_N ]; bool vis [ MAX_N ]; struct Disjoint_sets { int father [ MAX_N ]; int num [ MAX_N ]; Disjoint_sets () {} Disjoint_sets ( int n ) { for ( int i = 0 ; i < n ; i ++ ) { father [ i ] = i ; num [ i ] = 1 ; } } int root ( int a ) { int ret = a ; while ( father [ ret ] != ret ) ret = father [ ret ]; while ( father [ a ] != a ) { int b = a ; a = father [ a ]; father [ b ] = ret ; } return ret ; } void join ( int a , int b ) // b is the root then { int num_a = num [ root ( a )]; father [ root ( a )] = father [ root ( b )]; num [ root ( b )] += num_a ; } }; int main () { //input scanf ( \"%d%d\" , & n , & m ); for ( int i = 0 ; i < n ; i ++ ) { int a ; scanf ( \"%d\" , & a ); animal [ i ] = make_pair ( a , i ); } for ( int i = 0 ; i < m ; i ++ ) { int a , b ; scanf ( \"%d%d\" , & a , & b ); a -- ; b -- ; edge [ a ]. push_back ( b ); edge [ b ]. push_back ( a ); } //work Disjoint_sets d_sets ( n ); fill ( vis , vis + n , 0 ); sort ( animal , animal + n ); long long ans = 0 ; for ( int i = n - 1 ; i >= 0 ; i -- ) { int u = animal [ i ]. second ; int min_num = animal [ i ]. first ; vis [ u ] = true ; for ( int j = 0 ; j < ( int ) edge [ u ]. size (); j ++ ) { int v = edge [ u ][ j ]; if ( ! vis [ v ]) continue ; if ( d_sets . root ( v ) != d_sets . root ( u )) { ans += 1L L * min_num * d_sets . num [ d_sets . root ( v )] * d_sets . num [ d_sets . root ( u )]; d_sets . join ( v , u ); } } } double final_ans = ans * 2.0 / n / ( n - 1 ); printf ( \"%.12f \\n \" , final_ans ); return 0 ; }","title":"438B"},{"location":"competitive_programming/codeforces/438B/#438b","text":"","title":"438B"},{"location":"competitive_programming/codeforces/438B/#description","text":"Here is a undirected graph with n n <span><span class=\"MathJax_Preview\">n</span><script type=\"math/tex\">n nodes and m m <span><span class=\"MathJax_Preview\">m</span><script type=\"math/tex\">m edges. ( 2 \\leq n, m \\leq 10^5 2 \\leq n, m \\leq 10^5 <span><span class=\"MathJax_Preview\">2 \\leq n, m \\leq 10^5</span><script type=\"math/tex\">2 \\leq n, m \\leq 10^5 ) Each node has a weight a_i a_i <span><span class=\"MathJax_Preview\">a_i</span><script type=\"math/tex\">a_i . f(p, q) f(p, q) <span><span class=\"MathJax_Preview\">f(p, q)</span><script type=\"math/tex\">f(p, q) defines the simple route from p p <span><span class=\"MathJax_Preview\">p</span><script type=\"math/tex\">p to q q <span><span class=\"MathJax_Preview\">q</span><script type=\"math/tex\">q with the largest g(x_1~x_t) g(x_1~x_t) <span><span class=\"MathJax_Preview\">g(x_1~x_t)</span><script type=\"math/tex\">g(x_1~x_t) . g(x_1~x_t) g(x_1~x_t) <span><span class=\"MathJax_Preview\">g(x_1~x_t)</span><script type=\"math/tex\">g(x_1~x_t) defines the weight of the node with the least weight on that simple route. Output the average of f(p,q) f(p,q) <span><span class=\"MathJax_Preview\">f(p,q)</span><script type=\"math/tex\">f(p,q) of all possible pairs of nodes on the graph.","title":"Description"},{"location":"competitive_programming/codeforces/438B/#tutorial","text":"Sort the nodes with their weights in decreasing order. Starting from an empty graph, add the nodes to the graph one by one. Each time some components may become connected by the new node added. f(p, q) f(p, q) <span><span class=\"MathJax_Preview\">f(p, q)</span><script type=\"math/tex\">f(p, q) where p p <span><span class=\"MathJax_Preview\">p</span><script type=\"math/tex\">p and q q <span><span class=\"MathJax_Preview\">q</span><script type=\"math/tex\">q are in two different components that to be connected by the new node, equals to the weight of the new node. Use disjoint sets to work it out. Join the components to that new node one by one. Add the sum of the f(p,q) f(p,q) <span><span class=\"MathJax_Preview\">f(p,q)</span><script type=\"math/tex\">f(p,q) s to the answer during each joint.","title":"Tutorial"},{"location":"competitive_programming/codeforces/438B/#solution","text":"#include <vector> #include <cstdio> #include <algorithm> using namespace std ; const int MAX_N = int ( 1e5 ) + 10 ; int n , m ; vector < int > edge [ MAX_N ]; pair < int , int > animal [ MAX_N ]; bool vis [ MAX_N ]; struct Disjoint_sets { int father [ MAX_N ]; int num [ MAX_N ]; Disjoint_sets () {} Disjoint_sets ( int n ) { for ( int i = 0 ; i < n ; i ++ ) { father [ i ] = i ; num [ i ] = 1 ; } } int root ( int a ) { int ret = a ; while ( father [ ret ] != ret ) ret = father [ ret ]; while ( father [ a ] != a ) { int b = a ; a = father [ a ]; father [ b ] = ret ; } return ret ; } void join ( int a , int b ) // b is the root then { int num_a = num [ root ( a )]; father [ root ( a )] = father [ root ( b )]; num [ root ( b )] += num_a ; } }; int main () { //input scanf ( \"%d%d\" , & n , & m ); for ( int i = 0 ; i < n ; i ++ ) { int a ; scanf ( \"%d\" , & a ); animal [ i ] = make_pair ( a , i ); } for ( int i = 0 ; i < m ; i ++ ) { int a , b ; scanf ( \"%d%d\" , & a , & b ); a -- ; b -- ; edge [ a ]. push_back ( b ); edge [ b ]. push_back ( a ); } //work Disjoint_sets d_sets ( n ); fill ( vis , vis + n , 0 ); sort ( animal , animal + n ); long long ans = 0 ; for ( int i = n - 1 ; i >= 0 ; i -- ) { int u = animal [ i ]. second ; int min_num = animal [ i ]. first ; vis [ u ] = true ; for ( int j = 0 ; j < ( int ) edge [ u ]. size (); j ++ ) { int v = edge [ u ][ j ]; if ( ! vis [ v ]) continue ; if ( d_sets . root ( v ) != d_sets . root ( u )) { ans += 1L L * min_num * d_sets . num [ d_sets . root ( v )] * d_sets . num [ d_sets . root ( u )]; d_sets . join ( v , u ); } } } double final_ans = ans * 2.0 / n / ( n - 1 ); printf ( \"%.12f \\n \" , final_ans ); return 0 ; }","title":"Solution"},{"location":"competitive_programming/codeforces/442B/","text":"442B Description Give the probabilities of each one in n n friends to come up with exactly one problem. We should invite a group of friends so that the probability for them to up exactly one problem in total is maximized. Tutorial The math deduction process is very complex. The easiest way to find the solution to this problem is to use brute force for to discover the patterns in the answer, if you cannot discover the pattern by hand. The pattern is as follows. We should sort the friends by their probabilites from the lowest to the highest. The group we choose is always the suffix of this probability array. By the way, the formula for the probability for a group to come up with exactly one problem is P=(\\prod\\limits_{i=1}^{n}(1-p_i))\\times(\\sum\\limits_{i=1}^{n}\\frac{p_i}{1-p_i}) P=(\\prod\\limits_{i=1}^{n}(1-p_i))\\times(\\sum\\limits_{i=1}^{n}\\frac{p_i}{1-p_i}) . Solution #include <cstdio> #include <algorithm> using namespace std ; const int MAX_N = 105 ; int n ; double f [ MAX_N ]; void input () { scanf ( \"%d\" , & n ); for ( int i = 0 ; i < n ; i ++ ) { scanf ( \"%lf\" , & f [ i ]); } } void work () { double ans = 0 ; double sum = 0 ; double product = 1 ; for ( int i = 0 ; i < n ; i ++ ) { sum *= 1 - f [ i ]; sum += product * f [ i ]; product *= 1 - f [ i ]; if ( sum > ans ) { ans = sum ; } } printf ( \"%.12f \\n \" , ans ); } int main () { input (); sort ( f , f + n ); reverse ( f , f + n ); work (); return 0 ; }","title":"442B"},{"location":"competitive_programming/codeforces/442B/#442b","text":"","title":"442B"},{"location":"competitive_programming/codeforces/442B/#description","text":"Give the probabilities of each one in n n friends to come up with exactly one problem. We should invite a group of friends so that the probability for them to up exactly one problem in total is maximized.","title":"Description"},{"location":"competitive_programming/codeforces/442B/#tutorial","text":"The math deduction process is very complex. The easiest way to find the solution to this problem is to use brute force for to discover the patterns in the answer, if you cannot discover the pattern by hand. The pattern is as follows. We should sort the friends by their probabilites from the lowest to the highest. The group we choose is always the suffix of this probability array. By the way, the formula for the probability for a group to come up with exactly one problem is P=(\\prod\\limits_{i=1}^{n}(1-p_i))\\times(\\sum\\limits_{i=1}^{n}\\frac{p_i}{1-p_i}) P=(\\prod\\limits_{i=1}^{n}(1-p_i))\\times(\\sum\\limits_{i=1}^{n}\\frac{p_i}{1-p_i}) .","title":"Tutorial"},{"location":"competitive_programming/codeforces/442B/#solution","text":"#include <cstdio> #include <algorithm> using namespace std ; const int MAX_N = 105 ; int n ; double f [ MAX_N ]; void input () { scanf ( \"%d\" , & n ); for ( int i = 0 ; i < n ; i ++ ) { scanf ( \"%lf\" , & f [ i ]); } } void work () { double ans = 0 ; double sum = 0 ; double product = 1 ; for ( int i = 0 ; i < n ; i ++ ) { sum *= 1 - f [ i ]; sum += product * f [ i ]; product *= 1 - f [ i ]; if ( sum > ans ) { ans = sum ; } } printf ( \"%.12f \\n \" , ans ); } int main () { input (); sort ( f , f + n ); reverse ( f , f + n ); work (); return 0 ; }","title":"Solution"},{"location":"competitive_programming/codeforces/444B/","text":"444B Description There are two sequences called a a and b b of length n n . a a is a permutation of 1~ n n . b b have d d ones and n-d n-d zeros. c_i=max(a_{i-j}b_j) c_i=max(a_{i-j}b_j) , (0\\leq j\\leq i) (0\\leq j\\leq i) . Tutorial Set an value to s s . ( 1 \\leq s \\leq n 1 \\leq s \\leq n ) For each c_i c_i , we try the answer x x from n n to s s . We can know whether c_i = x c_i = x in O(1) O(1) with a preprocessing of recording the position of each number in a a . If the answer is not found with the operations above, we calculated with brute force. But we first record the position of each \"1\" in b b , and we only check the \"1\"s to accelerate the brute force process. Solution #include <cstdio> #include <cstring> #include <cstdlib> #include <algorithm> using namespace std ; #define MAX_N 100005 #define D(x) int a [ MAX_N ], b [ MAX_N ]; int n , d ; long long x ; int one_num , one_pos [ MAX_N ]; int pos_a [ MAX_N ]; int ans [ MAX_N ]; void output ( int ans []) { for ( int i = 0 ; i < n ; i ++ ) { printf ( \"%d \\n \" , ans [ i ]); } } int getNextX () { x = ( x * 37 + 10007 ) % 1000000007 ; return x ; } void initAB () { int i ; for ( i = 0 ; i < n ; i = i + 1 ){ a [ i ] = i + 1 ; } for ( i = 0 ; i < n ; i = i + 1 ){ swap ( a [ i ], a [ getNextX () % ( i + 1 )]); } for ( i = 0 ; i < n ; i = i + 1 ){ if ( i < d ) b [ i ] = 1 ; else b [ i ] = 0 ; } for ( i = 0 ; i < n ; i = i + 1 ){ int y ; swap ( b [ i ], b [ y = getNextX () % ( i + 1 )]); D ( printf ( \"%d%d \\n \" , i , y )); D ( output ( b )); D ( puts ( \"\" )); } } void work () { int s = 30 ; for ( int i = 0 ; i < n ; i ++ ) { if ( b [ i ] == 1 ) { one_pos [ one_num ++ ] = i ; } } for ( int i = 0 ; i < n ; i ++ ) { a [ i ] -- ; pos_a [ a [ i ]] = i ; } memset ( ans , 0 , sizeof ( ans )); for ( int i = n - 1 ; i >= 0 ; i -- ) { for ( int j = n - 1 ; j >= n - s && j >= 0 ; j -- ) { if ( pos_a [ j ] <= i && b [ i - pos_a [ j ]] == 1 ) { ans [ i ] = j + 1 ; break ; } } if ( ans [ i ] != 0 ) { continue ; } for ( int j = 0 ; j < one_num ; j ++ ) { if ( i - one_pos [ j ] < 0 ) { break ; } ans [ i ] = max ( ans [ i ], a [ i - one_pos [ j ]] + 1 ); } } } void input () { int xx ; scanf ( \"%d%d%d\" , & n , & d , & xx ); x = xx ; } int main () { input (); initAB (); work (); output ( ans ); return 0 ; }","title":"444B"},{"location":"competitive_programming/codeforces/444B/#444b","text":"","title":"444B"},{"location":"competitive_programming/codeforces/444B/#description","text":"There are two sequences called a a and b b of length n n . a a is a permutation of 1~ n n . b b have d d ones and n-d n-d zeros. c_i=max(a_{i-j}b_j) c_i=max(a_{i-j}b_j) , (0\\leq j\\leq i) (0\\leq j\\leq i) .","title":"Description"},{"location":"competitive_programming/codeforces/444B/#tutorial","text":"Set an value to s s . ( 1 \\leq s \\leq n 1 \\leq s \\leq n ) For each c_i c_i , we try the answer x x from n n to s s . We can know whether c_i = x c_i = x in O(1) O(1) with a preprocessing of recording the position of each number in a a . If the answer is not found with the operations above, we calculated with brute force. But we first record the position of each \"1\" in b b , and we only check the \"1\"s to accelerate the brute force process.","title":"Tutorial"},{"location":"competitive_programming/codeforces/444B/#solution","text":"#include <cstdio> #include <cstring> #include <cstdlib> #include <algorithm> using namespace std ; #define MAX_N 100005 #define D(x) int a [ MAX_N ], b [ MAX_N ]; int n , d ; long long x ; int one_num , one_pos [ MAX_N ]; int pos_a [ MAX_N ]; int ans [ MAX_N ]; void output ( int ans []) { for ( int i = 0 ; i < n ; i ++ ) { printf ( \"%d \\n \" , ans [ i ]); } } int getNextX () { x = ( x * 37 + 10007 ) % 1000000007 ; return x ; } void initAB () { int i ; for ( i = 0 ; i < n ; i = i + 1 ){ a [ i ] = i + 1 ; } for ( i = 0 ; i < n ; i = i + 1 ){ swap ( a [ i ], a [ getNextX () % ( i + 1 )]); } for ( i = 0 ; i < n ; i = i + 1 ){ if ( i < d ) b [ i ] = 1 ; else b [ i ] = 0 ; } for ( i = 0 ; i < n ; i = i + 1 ){ int y ; swap ( b [ i ], b [ y = getNextX () % ( i + 1 )]); D ( printf ( \"%d%d \\n \" , i , y )); D ( output ( b )); D ( puts ( \"\" )); } } void work () { int s = 30 ; for ( int i = 0 ; i < n ; i ++ ) { if ( b [ i ] == 1 ) { one_pos [ one_num ++ ] = i ; } } for ( int i = 0 ; i < n ; i ++ ) { a [ i ] -- ; pos_a [ a [ i ]] = i ; } memset ( ans , 0 , sizeof ( ans )); for ( int i = n - 1 ; i >= 0 ; i -- ) { for ( int j = n - 1 ; j >= n - s && j >= 0 ; j -- ) { if ( pos_a [ j ] <= i && b [ i - pos_a [ j ]] == 1 ) { ans [ i ] = j + 1 ; break ; } } if ( ans [ i ] != 0 ) { continue ; } for ( int j = 0 ; j < one_num ; j ++ ) { if ( i - one_pos [ j ] < 0 ) { break ; } ans [ i ] = max ( ans [ i ], a [ i - one_pos [ j ]] + 1 ); } } } void input () { int xx ; scanf ( \"%d%d%d\" , & n , & d , & xx ); x = xx ; } int main () { input (); initAB (); work (); output ( ans ); return 0 ; }","title":"Solution"},{"location":"competitive_programming/codeforces/446B/","text":"446B Solution #include <cstdlib> #include <cstdio> #include <cstring> #include <algorithm> #include <queue> using namespace std ; #define MAX_ROW_NUM 1005 #define MAX_COL_NUM MAX_ROW_NUM #define D(x) #define MAX_K 1000005 int row_num , col_num ; int operation_num ; int decrease_value ; int matrix [ MAX_ROW_NUM ][ MAX_COL_NUM ]; int row_sum [ MAX_ROW_NUM ]; int col_sum [ MAX_COL_NUM ]; long long row_ans [ MAX_K ]; long long col_ans [ MAX_K ]; void input () { scanf ( \"%d%d\" , & row_num , & col_num ); scanf ( \"%d%d\" , & operation_num , & decrease_value ); for ( int i = 0 ; i < row_num ; i ++ ) { for ( int j = 0 ; j < col_num ; j ++ ) { int a ; scanf ( \"%d\" , & a ); matrix [ i ][ j ] = a ; row_sum [ i ] += a ; col_sum [ j ] += a ; } } } void make ( priority_queue < int > & pq , int multi ) { int top = pq . top (); pq . pop (); top -= decrease_value * multi ; pq . push ( top ); } long long work () { priority_queue < int > pq_row ; priority_queue < int > pq_col ; for ( int i = 0 ; i < row_num ; i ++ ) { pq_row . push ( row_sum [ i ]); } for ( int i = 0 ; i < col_num ; i ++ ) { pq_col . push ( col_sum [ i ]); } col_ans [ 0 ] = row_ans [ 0 ] = 0 ; for ( int i = 1 ; i <= operation_num ; i ++ ) { row_ans [ i ] = pq_row . top () + row_ans [ i - 1 ]; make ( pq_row , col_num ); } for ( int i = 1 ; i <= operation_num ; i ++ ) { col_ans [ i ] = pq_col . top () + col_ans [ i - 1 ]; make ( pq_col , row_num ); } long long ret = - ( 1L L << 50 ); for ( int i = 0 ; i <= operation_num ; i ++ ) { long long temp = col_ans [ i ] + row_ans [ operation_num - i ]; long long total_decrease = decrease_value ; total_decrease *= i ; total_decrease *= operation_num - i ; temp -= total_decrease ; ret = max ( ret , temp ); } return ret ; } int main () { input (); printf ( \"%I64d \\n \" , work ()); return 0 ; }","title":"446B"},{"location":"competitive_programming/codeforces/446B/#446b","text":"","title":"446B"},{"location":"competitive_programming/codeforces/446B/#solution","text":"#include <cstdlib> #include <cstdio> #include <cstring> #include <algorithm> #include <queue> using namespace std ; #define MAX_ROW_NUM 1005 #define MAX_COL_NUM MAX_ROW_NUM #define D(x) #define MAX_K 1000005 int row_num , col_num ; int operation_num ; int decrease_value ; int matrix [ MAX_ROW_NUM ][ MAX_COL_NUM ]; int row_sum [ MAX_ROW_NUM ]; int col_sum [ MAX_COL_NUM ]; long long row_ans [ MAX_K ]; long long col_ans [ MAX_K ]; void input () { scanf ( \"%d%d\" , & row_num , & col_num ); scanf ( \"%d%d\" , & operation_num , & decrease_value ); for ( int i = 0 ; i < row_num ; i ++ ) { for ( int j = 0 ; j < col_num ; j ++ ) { int a ; scanf ( \"%d\" , & a ); matrix [ i ][ j ] = a ; row_sum [ i ] += a ; col_sum [ j ] += a ; } } } void make ( priority_queue < int > & pq , int multi ) { int top = pq . top (); pq . pop (); top -= decrease_value * multi ; pq . push ( top ); } long long work () { priority_queue < int > pq_row ; priority_queue < int > pq_col ; for ( int i = 0 ; i < row_num ; i ++ ) { pq_row . push ( row_sum [ i ]); } for ( int i = 0 ; i < col_num ; i ++ ) { pq_col . push ( col_sum [ i ]); } col_ans [ 0 ] = row_ans [ 0 ] = 0 ; for ( int i = 1 ; i <= operation_num ; i ++ ) { row_ans [ i ] = pq_row . top () + row_ans [ i - 1 ]; make ( pq_row , col_num ); } for ( int i = 1 ; i <= operation_num ; i ++ ) { col_ans [ i ] = pq_col . top () + col_ans [ i - 1 ]; make ( pq_col , row_num ); } long long ret = - ( 1L L << 50 ); for ( int i = 0 ; i <= operation_num ; i ++ ) { long long temp = col_ans [ i ] + row_ans [ operation_num - i ]; long long total_decrease = decrease_value ; total_decrease *= i ; total_decrease *= operation_num - i ; temp -= total_decrease ; ret = max ( ret , temp ); } return ret ; } int main () { input (); printf ( \"%I64d \\n \" , work ()); return 0 ; }","title":"Solution"},{"location":"competitive_programming/codeforces/449B/","text":"449B Description The first node of a undirected graph is the capital, whose edges are normal roads. In addition, there are some train routes connecting the capital and other cities. Output how many train routes can be closed without affecting the shortest distance between the capital and each city. There are n n cities ( 1 \\leq n \\leq 10^5) and m m roads ( roads ( 1 \\leq n \\leq 10^5) and <span><span class=\"MathJax_Preview\">m</span><script type=\"math/tex\">m roads ( roads ( 1 \\leq m \\leq 3 \\times 10^5). Tutorial We initially set the shortest distance to each city by its train route. Then start the Dijkstra algorithm. When updating the distance of a node, if the new distance is less than or equal to the original distance, it means that the train route to that node is not necessary (we find another shortest path other than the train route). I learned how to define a graph by vector. vector < pair < int , int > > edge [ MAX_NODE_NUM ] ; edge [ u ] . push_back ( make_pair ( v , w )); I also updated the template for Dijkstra. Solution #include <cstdio> #include <cstdlib> #include <cstring> #include <algorithm> #include <queue> using namespace std ; #define MAX_EDGE_NUM 300005 * 2 #define MAX_NODE_NUM 100005 #define INF (1LL << 60) #define D(x) int node_num , edge_num , route_num ; long long dist [ MAX_NODE_NUM ]; bool train [ MAX_NODE_NUM ]; vector < pair < int , int > > edge [ MAX_NODE_NUM ]; void input () { scanf ( \"%d%d\" , & node_num , & edge_num ); scanf ( \"%d\" , & route_num ); for ( int i = 0 ; i < edge_num ; i ++ ) { int u , v , w ; scanf ( \"%d%d%d\" , & u , & v , & w ); v -- ; u -- ; edge [ u ]. push_back ( make_pair ( v , w )); edge [ v ]. push_back ( make_pair ( u , w )); } fill ( dist , dist + node_num , INF ); fill ( train , train + node_num , false ); for ( int i = 0 ; i < route_num ; i ++ ) { int v , w ; scanf ( \"%d%d\" , & v , & w ); v -- ; dist [ v ] = min ( dist [ v ], ( long long ) w ); train [ v ] = true ; } } priority_queue < pair < long long , int > > pq ; void dijkstra ( int source ) { dist [ source ] = 0 ; pq . push ( make_pair ( 0L L , 0 )); for ( int i = 0 ; i < node_num ; i ++ ) if ( train [ i ]) { pq . push ( make_pair ( - dist [ i ], i )); } while ( ! pq . empty ()) { int u = pq . top (). second ; long long w = - pq . top (). first ; pq . pop (); if ( dist [ u ] != w ) continue ; for ( int i = 0 ; i < ( int ) edge [ u ]. size (); i ++ ) { int v = edge [ u ][ i ]. first ; long long new_w = edge [ u ][ i ]. second + w ; if ( dist [ v ] >= new_w && train [ v ]) { train [ v ] = false ; } if ( dist [ v ] > new_w ) { dist [ v ] = new_w ; pq . push ( make_pair ( - dist [ v ], v )); } } } } int work () { int ret = route_num ; for ( int i = 0 ; i < node_num ; i ++ ) { if ( train [ i ]) { ret -- ; } } return ret ; } int main () { input (); dijkstra ( 0 ); printf ( \"%d \\n \" , work ()); return 0 ; }","title":"449B"},{"location":"competitive_programming/codeforces/449B/#449b","text":"","title":"449B"},{"location":"competitive_programming/codeforces/449B/#description","text":"The first node of a undirected graph is the capital, whose edges are normal roads. In addition, there are some train routes connecting the capital and other cities. Output how many train routes can be closed without affecting the shortest distance between the capital and each city. There are n n cities ( 1 \\leq n \\leq 10^5) and m m roads ( roads ( 1 \\leq n \\leq 10^5) and <span><span class=\"MathJax_Preview\">m</span><script type=\"math/tex\">m roads ( roads ( 1 \\leq m \\leq 3 \\times 10^5).","title":"Description"},{"location":"competitive_programming/codeforces/449B/#tutorial","text":"We initially set the shortest distance to each city by its train route. Then start the Dijkstra algorithm. When updating the distance of a node, if the new distance is less than or equal to the original distance, it means that the train route to that node is not necessary (we find another shortest path other than the train route). I learned how to define a graph by vector. vector < pair < int , int > > edge [ MAX_NODE_NUM ] ; edge [ u ] . push_back ( make_pair ( v , w )); I also updated the template for Dijkstra.","title":"Tutorial"},{"location":"competitive_programming/codeforces/449B/#solution","text":"#include <cstdio> #include <cstdlib> #include <cstring> #include <algorithm> #include <queue> using namespace std ; #define MAX_EDGE_NUM 300005 * 2 #define MAX_NODE_NUM 100005 #define INF (1LL << 60) #define D(x) int node_num , edge_num , route_num ; long long dist [ MAX_NODE_NUM ]; bool train [ MAX_NODE_NUM ]; vector < pair < int , int > > edge [ MAX_NODE_NUM ]; void input () { scanf ( \"%d%d\" , & node_num , & edge_num ); scanf ( \"%d\" , & route_num ); for ( int i = 0 ; i < edge_num ; i ++ ) { int u , v , w ; scanf ( \"%d%d%d\" , & u , & v , & w ); v -- ; u -- ; edge [ u ]. push_back ( make_pair ( v , w )); edge [ v ]. push_back ( make_pair ( u , w )); } fill ( dist , dist + node_num , INF ); fill ( train , train + node_num , false ); for ( int i = 0 ; i < route_num ; i ++ ) { int v , w ; scanf ( \"%d%d\" , & v , & w ); v -- ; dist [ v ] = min ( dist [ v ], ( long long ) w ); train [ v ] = true ; } } priority_queue < pair < long long , int > > pq ; void dijkstra ( int source ) { dist [ source ] = 0 ; pq . push ( make_pair ( 0L L , 0 )); for ( int i = 0 ; i < node_num ; i ++ ) if ( train [ i ]) { pq . push ( make_pair ( - dist [ i ], i )); } while ( ! pq . empty ()) { int u = pq . top (). second ; long long w = - pq . top (). first ; pq . pop (); if ( dist [ u ] != w ) continue ; for ( int i = 0 ; i < ( int ) edge [ u ]. size (); i ++ ) { int v = edge [ u ][ i ]. first ; long long new_w = edge [ u ][ i ]. second + w ; if ( dist [ v ] >= new_w && train [ v ]) { train [ v ] = false ; } if ( dist [ v ] > new_w ) { dist [ v ] = new_w ; pq . push ( make_pair ( - dist [ v ], v )); } } } } int work () { int ret = route_num ; for ( int i = 0 ; i < node_num ; i ++ ) { if ( train [ i ]) { ret -- ; } } return ret ; } int main () { input (); dijkstra ( 0 ); printf ( \"%d \\n \" , work ()); return 0 ; }","title":"Solution"},{"location":"competitive_programming/codeforces/453B/","text":"453B Solution #include <cstdio> #include <cmath> #include <algorithm> #include <cstring> using namespace std ; #define D(x) const int MAX_N = 120 ; const int MAX_A = 65 ; const int INF = 0x3f3f3f3f ; int seq_a [ MAX_N ]; int seq_b [ MAX_N ]; int f [ MAX_N ][ 1 << 18 ]; int path [ MAX_N ][ 1 << 18 ]; int prime [ 20 ]; int factor_bits [ MAX_A ]; int num ; int n ; bool is_prime ( int a ) { for ( int i = 2 ; i <= a / 2 ; i ++ ) { if ( a % i == 0 ) { return false ; } } return true ; } int make_factor ( int a ) { int ret = 0 ; for ( int i = 0 ; i < num ; i ++ ) { ret <<= 1 ; if ( a % prime [ i ] == 0 ) { ret = ret | 1 ; } } return ret ; } void init () { num = 0 ; for ( int i = 2 ; i <= 60 ; i ++ ) { if ( is_prime ( i )) { prime [ num ++ ] = i ; } } for ( int i = 1 ; i < 60 ; i ++ ) { factor_bits [ i ] = make_factor ( i ); } } void input () { scanf ( \"%d\" , & n ); for ( int i = 1 ; i <= n ; i ++ ) { scanf ( \"%d\" , & seq_a [ i ]); } } void work () { memset ( f , -1 , sizeof ( f )); f [ 0 ][ 0 ] = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < ( 1 << num ); j ++ ) { if ( f [ i ][ j ] == -1 ) continue ; for ( int k = 1 ; k < 60 ; k ++ ) { if (( j & factor_bits [ k ]) != 0 ) continue ; if ( f [ i + 1 ][ j | factor_bits [ k ]] == -1 || f [ i + 1 ][ j | factor_bits [ k ]] > f [ i ][ j ] + abs ( seq_a [ i + 1 ] - k )) { f [ i + 1 ][ j | factor_bits [ k ]] = f [ i ][ j ] + abs ( seq_a [ i + 1 ] - k ); path [ i + 1 ][ j | factor_bits [ k ]] = k ; } } } } int ans = INF ; int temp ; for ( int i = 0 ; i < ( 1 << num ); i ++ ) { if ( f [ n ][ i ] == -1 ) continue ; if ( ans > f [ n ][ i ]) { ans = f [ n ][ i ]; temp = i ; } } for ( int i = n ; i > 0 ; i -- ) { seq_b [ i ] = path [ i ][ temp ]; temp -= factor_bits [ path [ i ][ temp ]]; } for ( int i = 1 ; i <= n ; i ++ ) { if ( i != 1 ) putchar ( ' ' ); printf ( \"%d\" , seq_b [ i ]); } } int main () { init (); input (); work (); return 0 ; }","title":"453B"},{"location":"competitive_programming/codeforces/453B/#453b","text":"","title":"453B"},{"location":"competitive_programming/codeforces/453B/#solution","text":"#include <cstdio> #include <cmath> #include <algorithm> #include <cstring> using namespace std ; #define D(x) const int MAX_N = 120 ; const int MAX_A = 65 ; const int INF = 0x3f3f3f3f ; int seq_a [ MAX_N ]; int seq_b [ MAX_N ]; int f [ MAX_N ][ 1 << 18 ]; int path [ MAX_N ][ 1 << 18 ]; int prime [ 20 ]; int factor_bits [ MAX_A ]; int num ; int n ; bool is_prime ( int a ) { for ( int i = 2 ; i <= a / 2 ; i ++ ) { if ( a % i == 0 ) { return false ; } } return true ; } int make_factor ( int a ) { int ret = 0 ; for ( int i = 0 ; i < num ; i ++ ) { ret <<= 1 ; if ( a % prime [ i ] == 0 ) { ret = ret | 1 ; } } return ret ; } void init () { num = 0 ; for ( int i = 2 ; i <= 60 ; i ++ ) { if ( is_prime ( i )) { prime [ num ++ ] = i ; } } for ( int i = 1 ; i < 60 ; i ++ ) { factor_bits [ i ] = make_factor ( i ); } } void input () { scanf ( \"%d\" , & n ); for ( int i = 1 ; i <= n ; i ++ ) { scanf ( \"%d\" , & seq_a [ i ]); } } void work () { memset ( f , -1 , sizeof ( f )); f [ 0 ][ 0 ] = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < ( 1 << num ); j ++ ) { if ( f [ i ][ j ] == -1 ) continue ; for ( int k = 1 ; k < 60 ; k ++ ) { if (( j & factor_bits [ k ]) != 0 ) continue ; if ( f [ i + 1 ][ j | factor_bits [ k ]] == -1 || f [ i + 1 ][ j | factor_bits [ k ]] > f [ i ][ j ] + abs ( seq_a [ i + 1 ] - k )) { f [ i + 1 ][ j | factor_bits [ k ]] = f [ i ][ j ] + abs ( seq_a [ i + 1 ] - k ); path [ i + 1 ][ j | factor_bits [ k ]] = k ; } } } } int ans = INF ; int temp ; for ( int i = 0 ; i < ( 1 << num ); i ++ ) { if ( f [ n ][ i ] == -1 ) continue ; if ( ans > f [ n ][ i ]) { ans = f [ n ][ i ]; temp = i ; } } for ( int i = n ; i > 0 ; i -- ) { seq_b [ i ] = path [ i ][ temp ]; temp -= factor_bits [ path [ i ][ temp ]]; } for ( int i = 1 ; i <= n ; i ++ ) { if ( i != 1 ) putchar ( ' ' ); printf ( \"%d\" , seq_b [ i ]); } } int main () { init (); input (); work (); return 0 ; }","title":"Solution"},{"location":"competitive_programming/codeforces/455B/","text":"455B Tutorial Trie can be implemented with a two dimentional array. Solution #include <cstdio> #include <cstdlib> #include <cstring> using namespace std ; #define D(x) x const int MAX_CHAR_NUM = 30 ; const int MAX_N = int ( 1e5 ) + 10 ; const int MAX_NODE_NUM = MAX_N ; int trie [ MAX_NODE_NUM ][ MAX_CHAR_NUM ]; int node_num ; int n , round_num ; char st [ MAX_N ]; bool leaf ; void trie_init () { memset ( trie , -1 , sizeof ( trie )); node_num = 1 ; } int convert ( char ch ) { return ch - 'a' ; } void add ( char * st ) { int u = 0 ; for ( int i = 0 ; st [ i ]; i ++ ) { int index = convert ( st [ i ]); if ( trie [ u ][ index ] == -1 ) { trie [ u ][ index ] = node_num ++ ; } u = trie [ u ][ index ]; } } void input () { scanf ( \"%d%d\" , & n , & round_num ); for ( int i = 0 ; i < n ; i ++ ) { scanf ( \"%s\" , st ); add ( st ); } } bool dfs ( int u ) { bool have_child = false ; bool ret = false ; for ( int i = 0 ; i < 26 ; i ++ ) { if ( trie [ u ][ i ] != -1 ) { have_child = true ; ret = ret || ! dfs ( trie [ u ][ i ]); } } if ( have_child ) return ret ; return leaf ; } void output () { for ( int i = 0 ; i < 24 ; i ++ ) { for ( int j = 0 ; j < 26 ; j ++ ) { printf ( \"%d \" , trie [ i ][ j ]); } puts ( \"\" ); } } int main () { trie_init (); input (); leaf = false ; bool win = dfs ( 0 ); leaf = true ; bool lose = dfs ( 0 ); if ( win && lose ) { puts ( \"First\" ); } else if ( win && ! lose ) { if ( round_num & 1 ) puts ( \"First\" ); else puts ( \"Second\" ); } else if ( ! win ) { puts ( \"Second\" ); } return 0 ; }","title":"455B"},{"location":"competitive_programming/codeforces/455B/#455b","text":"","title":"455B"},{"location":"competitive_programming/codeforces/455B/#tutorial","text":"Trie can be implemented with a two dimentional array.","title":"Tutorial"},{"location":"competitive_programming/codeforces/455B/#solution","text":"#include <cstdio> #include <cstdlib> #include <cstring> using namespace std ; #define D(x) x const int MAX_CHAR_NUM = 30 ; const int MAX_N = int ( 1e5 ) + 10 ; const int MAX_NODE_NUM = MAX_N ; int trie [ MAX_NODE_NUM ][ MAX_CHAR_NUM ]; int node_num ; int n , round_num ; char st [ MAX_N ]; bool leaf ; void trie_init () { memset ( trie , -1 , sizeof ( trie )); node_num = 1 ; } int convert ( char ch ) { return ch - 'a' ; } void add ( char * st ) { int u = 0 ; for ( int i = 0 ; st [ i ]; i ++ ) { int index = convert ( st [ i ]); if ( trie [ u ][ index ] == -1 ) { trie [ u ][ index ] = node_num ++ ; } u = trie [ u ][ index ]; } } void input () { scanf ( \"%d%d\" , & n , & round_num ); for ( int i = 0 ; i < n ; i ++ ) { scanf ( \"%s\" , st ); add ( st ); } } bool dfs ( int u ) { bool have_child = false ; bool ret = false ; for ( int i = 0 ; i < 26 ; i ++ ) { if ( trie [ u ][ i ] != -1 ) { have_child = true ; ret = ret || ! dfs ( trie [ u ][ i ]); } } if ( have_child ) return ret ; return leaf ; } void output () { for ( int i = 0 ; i < 24 ; i ++ ) { for ( int j = 0 ; j < 26 ; j ++ ) { printf ( \"%d \" , trie [ i ][ j ]); } puts ( \"\" ); } } int main () { trie_init (); input (); leaf = false ; bool win = dfs ( 0 ); leaf = true ; bool lose = dfs ( 0 ); if ( win && lose ) { puts ( \"First\" ); } else if ( win && ! lose ) { if ( round_num & 1 ) puts ( \"First\" ); else puts ( \"Second\" ); } else if ( ! win ) { puts ( \"Second\" ); } return 0 ; }","title":"Solution"},{"location":"competitive_programming/codeforces/461B/","text":"461B Description A tree has n n ($1 \\leq n \\leq 10^5 $) vertices, the color of each of which is either black or white. Now, we need to split the tree into many parts, each of which has exactly one black vertex. Output how many ways to split the tree. Tutorial This is a dynamic programming problem on a tree. Define dp[i][j][0] as the number of ways to split the subtree whose root is i i , and only have its first j j subtrees (the subtrees whose roots are i i 's direct children), just take the other children as not exist, and all the vertices in the part which contains vertex i i is white. (all the other parts in this subtree has exactly one black vertex.) Define dp[i][j][1] is the same. The only difference is that there is exactly one black vertex in the part contains vertex i i is white. (all the parts in this subtree has exactly one black vertex.) dp[i][0][0]=1 and dp[i][0][1]=0 if the root is white, otherwise their values are opposite. dp[i][j][0] = dp[i][j - 1][0] * dp[v][n_v][0]; dp[i][j][1] = dp[i][j - 1][0] * dp[v][n_v][1] + dp[i][j - 1][1] * dp[v][n_v][0]; The two equation above means do not split i i and v v . ( v v is i i 's j j th child. n_v n_v is the number of children v v has.) dp[i][j][0] += dp[i][j - 1][0] * dp[v][n_v][1]; dp[i][j][1] += dp[i][j - 1][1] * dp[v][n_v][1]; The two addition above means we split i i and v v . When calculating dp[x][j][y], we need dp[x][j - 1][y]. We can delete the second dimension, just replace the old value with the new as j j increases is ok. There are many things I learned from this problem. About the defining the max value of n. const int MAX_N = int ( 1e5 ) + 10 ; Iterating all the scenarios and use conditions to control what to do. The following state transition controll is a good example. for ( int i = 0 ; i < 2 ; i ++ ) { for ( int j = 0 ; j < 2 ; j ++ ) { if ( i + j < 2 ) cur [ i + j ] = ( cur [ i + j ] + 1 LL * last [ i ] * dp [ v ][ j ] % MOD ) % MOD ; if ( j == 1 ) cur [ i ] = ( cur [ i ] + 1 LL * last [ i ] * dp [ v ][ j ] % MOD ) % MOD ; } } A way to controll DFS. DFS() { for (all the children) { DFS(); } do the work(); } The connection of dynamic programming of two different data structures of storing trees. One is as a graph. The other is \"left son right brother\". The thought of going through the children one by one and see the past children as a whole is very similar with the thought of DP on \"left son right brother\". Solution #include <cstdio> #include <vector> using namespace std ; const int MAX_N = int ( 1e5 ) + 10 ; const int MOD = int ( 1e9 ) + 7 ; int n ; vector < int > edge [ MAX_N ]; int color [ MAX_N ]; int dp [ MAX_N ][ 2 ]; //0 white, 1 black void input () { scanf ( \"%d\" , & n ); for ( int i = 0 ; i < n - 1 ; i ++ ) { int p ; scanf ( \"%d\" , & p ); edge [ i + 1 ]. push_back ( p ); edge [ p ]. push_back ( i + 1 ); } for ( int i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & color [ i ]); } } void dfs ( int u , int parent ) { for ( vector < int >:: iterator it = edge [ u ]. begin (); it != edge [ u ]. end (); it ++ ) { int v = * it ; if ( v == parent ) continue ; dfs ( v , u ); } vector < int > last ( 2 , 0 ); last [ color [ u ]] = 1 ; for ( vector < int >:: iterator it = edge [ u ]. begin (); it != edge [ u ]. end (); it ++ ) { int v = * it ; if ( v == parent ) continue ; vector < int > cur ( 2 , 0 ); for ( int i = 0 ; i < 2 ; i ++ ) { for ( int j = 0 ; j < 2 ; j ++ ) { if ( i + j < 2 ) cur [ i + j ] = ( cur [ i + j ] + 1L L * last [ i ] * dp [ v ][ j ] % MOD ) % MOD ; if ( j == 1 ) cur [ i ] = ( cur [ i ] + 1L L * last [ i ] * dp [ v ][ j ] % MOD ) % MOD ; } } last = cur ; } for ( int i = 0 ; i < 2 ; i ++ ) { dp [ u ][ i ] = last [ i ]; } } int main () { input (); dfs ( 0 , -1 ); printf ( \"%d \\n \" , dp [ 0 ][ 1 ]); return 0 ; }","title":"461B"},{"location":"competitive_programming/codeforces/461B/#461b","text":"","title":"461B"},{"location":"competitive_programming/codeforces/461B/#description","text":"A tree has n n ($1 \\leq n \\leq 10^5 $) vertices, the color of each of which is either black or white. Now, we need to split the tree into many parts, each of which has exactly one black vertex. Output how many ways to split the tree.","title":"Description"},{"location":"competitive_programming/codeforces/461B/#tutorial","text":"This is a dynamic programming problem on a tree. Define dp[i][j][0] as the number of ways to split the subtree whose root is i i , and only have its first j j subtrees (the subtrees whose roots are i i 's direct children), just take the other children as not exist, and all the vertices in the part which contains vertex i i is white. (all the other parts in this subtree has exactly one black vertex.) Define dp[i][j][1] is the same. The only difference is that there is exactly one black vertex in the part contains vertex i i is white. (all the parts in this subtree has exactly one black vertex.) dp[i][0][0]=1 and dp[i][0][1]=0 if the root is white, otherwise their values are opposite. dp[i][j][0] = dp[i][j - 1][0] * dp[v][n_v][0]; dp[i][j][1] = dp[i][j - 1][0] * dp[v][n_v][1] + dp[i][j - 1][1] * dp[v][n_v][0]; The two equation above means do not split i i and v v . ( v v is i i 's j j th child. n_v n_v is the number of children v v has.) dp[i][j][0] += dp[i][j - 1][0] * dp[v][n_v][1]; dp[i][j][1] += dp[i][j - 1][1] * dp[v][n_v][1]; The two addition above means we split i i and v v . When calculating dp[x][j][y], we need dp[x][j - 1][y]. We can delete the second dimension, just replace the old value with the new as j j increases is ok. There are many things I learned from this problem. About the defining the max value of n. const int MAX_N = int ( 1e5 ) + 10 ; Iterating all the scenarios and use conditions to control what to do. The following state transition controll is a good example. for ( int i = 0 ; i < 2 ; i ++ ) { for ( int j = 0 ; j < 2 ; j ++ ) { if ( i + j < 2 ) cur [ i + j ] = ( cur [ i + j ] + 1 LL * last [ i ] * dp [ v ][ j ] % MOD ) % MOD ; if ( j == 1 ) cur [ i ] = ( cur [ i ] + 1 LL * last [ i ] * dp [ v ][ j ] % MOD ) % MOD ; } } A way to controll DFS. DFS() { for (all the children) { DFS(); } do the work(); } The connection of dynamic programming of two different data structures of storing trees. One is as a graph. The other is \"left son right brother\". The thought of going through the children one by one and see the past children as a whole is very similar with the thought of DP on \"left son right brother\".","title":"Tutorial"},{"location":"competitive_programming/codeforces/461B/#solution","text":"#include <cstdio> #include <vector> using namespace std ; const int MAX_N = int ( 1e5 ) + 10 ; const int MOD = int ( 1e9 ) + 7 ; int n ; vector < int > edge [ MAX_N ]; int color [ MAX_N ]; int dp [ MAX_N ][ 2 ]; //0 white, 1 black void input () { scanf ( \"%d\" , & n ); for ( int i = 0 ; i < n - 1 ; i ++ ) { int p ; scanf ( \"%d\" , & p ); edge [ i + 1 ]. push_back ( p ); edge [ p ]. push_back ( i + 1 ); } for ( int i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & color [ i ]); } } void dfs ( int u , int parent ) { for ( vector < int >:: iterator it = edge [ u ]. begin (); it != edge [ u ]. end (); it ++ ) { int v = * it ; if ( v == parent ) continue ; dfs ( v , u ); } vector < int > last ( 2 , 0 ); last [ color [ u ]] = 1 ; for ( vector < int >:: iterator it = edge [ u ]. begin (); it != edge [ u ]. end (); it ++ ) { int v = * it ; if ( v == parent ) continue ; vector < int > cur ( 2 , 0 ); for ( int i = 0 ; i < 2 ; i ++ ) { for ( int j = 0 ; j < 2 ; j ++ ) { if ( i + j < 2 ) cur [ i + j ] = ( cur [ i + j ] + 1L L * last [ i ] * dp [ v ][ j ] % MOD ) % MOD ; if ( j == 1 ) cur [ i ] = ( cur [ i ] + 1L L * last [ i ] * dp [ v ][ j ] % MOD ) % MOD ; } } last = cur ; } for ( int i = 0 ; i < 2 ; i ++ ) { dp [ u ][ i ] = last [ i ]; } } int main () { input (); dfs ( 0 , -1 ); printf ( \"%d \\n \" , dp [ 0 ][ 1 ]); return 0 ; }","title":"Solution"},{"location":"competitive_programming/codeforces/464B/","text":"464B Tutorial We can use the following code to go through all the permutations of an array. sort(array, array + n); do {} while (next_permutation(array, array + n)); Solution #include <cstdio> #include <cstdlib> #include <algorithm> using namespace std ; #define zero(x) (((x)>0?(x):-(x))<eps) #define eps 1.0E-8 #define MAX_POINT_NUM 0 #define D(x) struct Point { int x , y , z ; Point () { x = y = z = 0 ; } Point ( int x , int y , int z ) : x ( x ), y ( y ), z ( z ) {} Point operator - ( const Point & a ) const { return Point ( x - a . x , y - a . y , z - a . z ); } Point operator + ( const Point & a ) const { return Point ( x + a . x , y + a . y , z + a . z ); } bool operator == ( const Point & a ) const { return x == a . x && y == a . y && z == a . z ; } } point [ 10 ]; long long dot_product ( Point a , Point b ) { return 1L L * a . x * b . x + 1L L * a . y * b . y + 1L L * a . z * b . z ; } void input () { for ( int i = 0 ; i < 8 ; i ++ ) { int a , b , c ; scanf ( \"%d%d%d\" , & a , & b , & c ); point [ i ] = Point ( a , b , c ); } } long long point_dist ( Point a ) { return 1L L * a . x * a . x + 1L L * a . y * a . y + 1L L * a . z * a . z ; } bool perpendicular ( Point a , Point b ) { return ( dot_product ( a , b )) == 0 ; } bool exist ( Point a ) { for ( int i = 0 ; i < 8 ; i ++ ) { if ( point [ i ] == a ) { return true ; } } return false ; } bool is_cube () { int num = 0 ; long long min_val = point_dist ( point [ 0 ] - point [ 1 ]); long long dist_array [ 10 ]; Point vec [ 10 ]; for ( int i = 1 ; i < 8 ; i ++ ) { double temp = point_dist ( point [ 0 ] - point [ i ]); dist_array [ i ] = temp ; if (( temp - min_val ) < 0 ) { min_val = temp ; } } for ( int i = 1 ; i < 8 ; i ++ ) { if (( dist_array [ i ] - min_val ) == 0 && ! ( point [ 0 ] == point [ i ])) { vec [ num ++ ] = point [ i ] - point [ 0 ]; } } if ( num != 3 ) { return false ; } if ( ! perpendicular ( vec [ 0 ], vec [ 1 ])) { return false ; } if ( ! perpendicular ( vec [ 0 ], vec [ 2 ])) { return false ; } if ( ! perpendicular ( vec [ 2 ], vec [ 1 ])) { return false ; } if ( ! exist ( point [ 0 ] + vec [ 0 ] + vec [ 1 ])) { return false ; } if ( ! exist ( point [ 0 ] + vec [ 0 ] + vec [ 2 ])) { return false ; } if ( ! exist ( point [ 0 ] + vec [ 2 ] + vec [ 1 ])) { return false ; } if ( ! exist ( point [ 0 ] + vec [ 0 ] + vec [ 1 ] + vec [ 2 ])) { return false ; } return true ; } void output () { puts ( \"YES\" ); for ( int i = 0 ; i < 8 ; i ++ ) { int a = point [ i ]. x ; int b = point [ i ]. y ; int c = point [ i ]. z ; printf ( \"%d %d %d \\n \" , a , b , c ); } } void dfs ( int depth ) { if ( depth == 8 ) { if ( is_cube ()) { output (); exit ( 0 ); } return ; } int value [ 10 ]; Point temp = point [ depth ]; value [ 0 ] = point [ depth ]. x ; value [ 1 ] = point [ depth ]. y ; value [ 2 ] = point [ depth ]. z ; sort ( value , value + 3 ); while ( true ) { point [ depth ]. x = value [ 0 ]; point [ depth ]. y = value [ 1 ]; point [ depth ]. z = value [ 2 ]; dfs ( depth + 1 ); if ( ! next_permutation ( value , value + 3 )) { break ; } } point [ depth ] = temp ; } int main () { input (); dfs ( 1 ); puts ( \"NO\" ); return 0 ; }","title":"464B"},{"location":"competitive_programming/codeforces/464B/#464b","text":"","title":"464B"},{"location":"competitive_programming/codeforces/464B/#tutorial","text":"We can use the following code to go through all the permutations of an array. sort(array, array + n); do {} while (next_permutation(array, array + n));","title":"Tutorial"},{"location":"competitive_programming/codeforces/464B/#solution","text":"#include <cstdio> #include <cstdlib> #include <algorithm> using namespace std ; #define zero(x) (((x)>0?(x):-(x))<eps) #define eps 1.0E-8 #define MAX_POINT_NUM 0 #define D(x) struct Point { int x , y , z ; Point () { x = y = z = 0 ; } Point ( int x , int y , int z ) : x ( x ), y ( y ), z ( z ) {} Point operator - ( const Point & a ) const { return Point ( x - a . x , y - a . y , z - a . z ); } Point operator + ( const Point & a ) const { return Point ( x + a . x , y + a . y , z + a . z ); } bool operator == ( const Point & a ) const { return x == a . x && y == a . y && z == a . z ; } } point [ 10 ]; long long dot_product ( Point a , Point b ) { return 1L L * a . x * b . x + 1L L * a . y * b . y + 1L L * a . z * b . z ; } void input () { for ( int i = 0 ; i < 8 ; i ++ ) { int a , b , c ; scanf ( \"%d%d%d\" , & a , & b , & c ); point [ i ] = Point ( a , b , c ); } } long long point_dist ( Point a ) { return 1L L * a . x * a . x + 1L L * a . y * a . y + 1L L * a . z * a . z ; } bool perpendicular ( Point a , Point b ) { return ( dot_product ( a , b )) == 0 ; } bool exist ( Point a ) { for ( int i = 0 ; i < 8 ; i ++ ) { if ( point [ i ] == a ) { return true ; } } return false ; } bool is_cube () { int num = 0 ; long long min_val = point_dist ( point [ 0 ] - point [ 1 ]); long long dist_array [ 10 ]; Point vec [ 10 ]; for ( int i = 1 ; i < 8 ; i ++ ) { double temp = point_dist ( point [ 0 ] - point [ i ]); dist_array [ i ] = temp ; if (( temp - min_val ) < 0 ) { min_val = temp ; } } for ( int i = 1 ; i < 8 ; i ++ ) { if (( dist_array [ i ] - min_val ) == 0 && ! ( point [ 0 ] == point [ i ])) { vec [ num ++ ] = point [ i ] - point [ 0 ]; } } if ( num != 3 ) { return false ; } if ( ! perpendicular ( vec [ 0 ], vec [ 1 ])) { return false ; } if ( ! perpendicular ( vec [ 0 ], vec [ 2 ])) { return false ; } if ( ! perpendicular ( vec [ 2 ], vec [ 1 ])) { return false ; } if ( ! exist ( point [ 0 ] + vec [ 0 ] + vec [ 1 ])) { return false ; } if ( ! exist ( point [ 0 ] + vec [ 0 ] + vec [ 2 ])) { return false ; } if ( ! exist ( point [ 0 ] + vec [ 2 ] + vec [ 1 ])) { return false ; } if ( ! exist ( point [ 0 ] + vec [ 0 ] + vec [ 1 ] + vec [ 2 ])) { return false ; } return true ; } void output () { puts ( \"YES\" ); for ( int i = 0 ; i < 8 ; i ++ ) { int a = point [ i ]. x ; int b = point [ i ]. y ; int c = point [ i ]. z ; printf ( \"%d %d %d \\n \" , a , b , c ); } } void dfs ( int depth ) { if ( depth == 8 ) { if ( is_cube ()) { output (); exit ( 0 ); } return ; } int value [ 10 ]; Point temp = point [ depth ]; value [ 0 ] = point [ depth ]. x ; value [ 1 ] = point [ depth ]. y ; value [ 2 ] = point [ depth ]. z ; sort ( value , value + 3 ); while ( true ) { point [ depth ]. x = value [ 0 ]; point [ depth ]. y = value [ 1 ]; point [ depth ]. z = value [ 2 ]; dfs ( depth + 1 ); if ( ! next_permutation ( value , value + 3 )) { break ; } } point [ depth ] = temp ; } int main () { input (); dfs ( 1 ); puts ( \"NO\" ); return 0 ; }","title":"Solution"},{"location":"competitive_programming/codeforces/468B/","text":"468B Description We have n n ( 1 \\leq n \\leq 10^5 1 \\leq n \\leq 10^5 ) distinct integers q_1~q_n q_1~q_n , a a and b b . There are two sets A A and B B . If x x belongs to A A , A A must also contains a-x a-x . It is the same with B B and b b . Output how q q s can be divided into the two sets. Each q q belongs and only belongs to one set. Tutorial If we have number x x and a-x a-x , they should be in the same set. If x x belongs to A A , it is obvious that a-x a-x belongs to A A . If x x is not in A A , then a-x a-x cannot find its partner in A A , so they it cannot be in A A any more. Therefore, they can only all be in B B . It is the same as the number x,\u2009b\u2009-\u2009x. In additon, we should also know that if a-x a-x does not exist, x x can only belong to B B . It is the same as A A . So we can use Disjoint Sets to solve this problem. Join the q q s that must belongs to one set. Join those who must belong to A A with a special node. Join those who must belong to B B with another special node. Finally, if the two special nodes are in joined, there is no solution. Otherwise, solution exists. Use STL map to get the positions of a-x a-x and b-x b-x . Solution #include <cstdio> #include <map> #include <algorithm> using namespace std ; #define D(x) #define MAX_N 100005 int sum_a , sum_b ; int f [ MAX_N ]; int n ; struct Disjoint_sets { int father [ MAX_N ]; Disjoint_sets () {} Disjoint_sets ( int n ) { for ( int i = 0 ; i < n ; i ++ ) { father [ i ] = i ; } } int root ( int a ) { int ret = a ; while ( father [ ret ] != ret ) ret = father [ ret ]; while ( father [ a ] != a ) { int b = a ; a = father [ a ]; father [ b ] = ret ; } return ret ; } void join ( int a , int b ) { father [ root ( a )] = father [ root ( b )]; } } d_set ; void input () { scanf ( \"%d%d%d\" , & n , & sum_a , & sum_b ); for ( int i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & f [ i ]); } } bool work () { d_set = Disjoint_sets ( n + 2 ); map < int , int > pos ; for ( int i = 0 ; i < n ; i ++ ) { pos [ f [ i ]] = i ; } for ( int i = 0 ; i < n ; i ++ ) { if ( pos . find ( sum_a - f [ i ]) != pos . end ()) { d_set . join ( i , pos [ sum_a - f [ i ]]); } else { d_set . join ( i , n ); } if ( pos . find ( sum_b - f [ i ]) != pos . end ()) { d_set . join ( i , pos [ sum_b - f [ i ]]); } else { d_set . join ( i , n + 1 ); } } return d_set . root ( n ) != d_set . root ( n + 1 ); } void output () { puts ( \"YES\" ); for ( int i = 0 ; i < n ; i ++ ) { if ( i != 0 ) { putchar ( ' ' ); } if ( d_set . root ( i ) == d_set . root ( n )) { putchar ( '1' ); } else { putchar ( '0' ); } } } int main () { input (); if ( ! work ()) { puts ( \"NO\" ); } else { output (); } return 0 ; }","title":"468B"},{"location":"competitive_programming/codeforces/468B/#468b","text":"","title":"468B"},{"location":"competitive_programming/codeforces/468B/#description","text":"We have n n ( 1 \\leq n \\leq 10^5 1 \\leq n \\leq 10^5 ) distinct integers q_1~q_n q_1~q_n , a a and b b . There are two sets A A and B B . If x x belongs to A A , A A must also contains a-x a-x . It is the same with B B and b b . Output how q q s can be divided into the two sets. Each q q belongs and only belongs to one set.","title":"Description"},{"location":"competitive_programming/codeforces/468B/#tutorial","text":"If we have number x x and a-x a-x , they should be in the same set. If x x belongs to A A , it is obvious that a-x a-x belongs to A A . If x x is not in A A , then a-x a-x cannot find its partner in A A , so they it cannot be in A A any more. Therefore, they can only all be in B B . It is the same as the number x,\u2009b\u2009-\u2009x. In additon, we should also know that if a-x a-x does not exist, x x can only belong to B B . It is the same as A A . So we can use Disjoint Sets to solve this problem. Join the q q s that must belongs to one set. Join those who must belong to A A with a special node. Join those who must belong to B B with another special node. Finally, if the two special nodes are in joined, there is no solution. Otherwise, solution exists. Use STL map to get the positions of a-x a-x and b-x b-x .","title":"Tutorial"},{"location":"competitive_programming/codeforces/468B/#solution","text":"#include <cstdio> #include <map> #include <algorithm> using namespace std ; #define D(x) #define MAX_N 100005 int sum_a , sum_b ; int f [ MAX_N ]; int n ; struct Disjoint_sets { int father [ MAX_N ]; Disjoint_sets () {} Disjoint_sets ( int n ) { for ( int i = 0 ; i < n ; i ++ ) { father [ i ] = i ; } } int root ( int a ) { int ret = a ; while ( father [ ret ] != ret ) ret = father [ ret ]; while ( father [ a ] != a ) { int b = a ; a = father [ a ]; father [ b ] = ret ; } return ret ; } void join ( int a , int b ) { father [ root ( a )] = father [ root ( b )]; } } d_set ; void input () { scanf ( \"%d%d%d\" , & n , & sum_a , & sum_b ); for ( int i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & f [ i ]); } } bool work () { d_set = Disjoint_sets ( n + 2 ); map < int , int > pos ; for ( int i = 0 ; i < n ; i ++ ) { pos [ f [ i ]] = i ; } for ( int i = 0 ; i < n ; i ++ ) { if ( pos . find ( sum_a - f [ i ]) != pos . end ()) { d_set . join ( i , pos [ sum_a - f [ i ]]); } else { d_set . join ( i , n ); } if ( pos . find ( sum_b - f [ i ]) != pos . end ()) { d_set . join ( i , pos [ sum_b - f [ i ]]); } else { d_set . join ( i , n + 1 ); } } return d_set . root ( n ) != d_set . root ( n + 1 ); } void output () { puts ( \"YES\" ); for ( int i = 0 ; i < n ; i ++ ) { if ( i != 0 ) { putchar ( ' ' ); } if ( d_set . root ( i ) == d_set . root ( n )) { putchar ( '1' ); } else { putchar ( '0' ); } } } int main () { input (); if ( ! work ()) { puts ( \"NO\" ); } else { output (); } return 0 ; }","title":"Solution"},{"location":"competitive_programming/codeforces/477B/","text":"477B Solution #include <cstdio> using namespace std ; int f [] = { 1 , 2 , 3 , 5 }; int n , k ; void input () { scanf ( \"%d%d\" , & n , & k ); } void output () { printf ( \"%d \\n \" , ( f [ 3 ] + ( n - 1 ) * 6 ) * k ); for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < 4 ; j ++ ) { if ( j != 0 ) { putchar ( ' ' ); } printf ( \"%d\" , ( f [ j ] + i * 6 ) * k ); } puts ( \"\" ); } } int main () { input (); output (); return 0 ; }","title":"477B"},{"location":"competitive_programming/codeforces/477B/#477b","text":"","title":"477B"},{"location":"competitive_programming/codeforces/477B/#solution","text":"#include <cstdio> using namespace std ; int f [] = { 1 , 2 , 3 , 5 }; int n , k ; void input () { scanf ( \"%d%d\" , & n , & k ); } void output () { printf ( \"%d \\n \" , ( f [ 3 ] + ( n - 1 ) * 6 ) * k ); for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < 4 ; j ++ ) { if ( j != 0 ) { putchar ( ' ' ); } printf ( \"%d\" , ( f [ j ] + i * 6 ) * k ); } puts ( \"\" ); } } int main () { input (); output (); return 0 ; }","title":"Solution"},{"location":"competitive_programming/codeforces/480B/","text":"480B Tutorial Function \"find\" in STL set and map can be used to find a element in them in O(logN) O(logN) . It made them can be used as a hashtable whose query complexity is O(logN) O(logN) instead of O(1) O(1) . Solution #include <cstdio> #include <algorithm> using namespace std ; #define MAX_N 100005 int n , mark_len , girl , boy ; int mark [ MAX_N ]; void input () { scanf ( \"%d%d%d%d\" , & n , & mark_len , & girl , & boy ); for ( int i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & mark [ i ]); } } bool find ( int a ) { int * p = lower_bound ( mark , mark + n , a ); if ( p == mark + n ) return false ; return a == * p ; } void work () { bool found_boy = false ; bool found_girl = false ; for ( int i = 0 ; i < n ; i ++ ) { found_boy = found_boy || find ( mark [ i ] + boy ); found_girl = found_girl || find ( mark [ i ] + girl ); } if ( found_boy && found_girl ) { puts ( \"0\" ); return ; } if ( found_boy ) { puts ( \"1\" ); printf ( \"%d \\n \" , girl ); return ; } if ( found_girl ) { puts ( \"1\" ); printf ( \"%d \\n \" , boy ); return ; } for ( int i = 0 ; i < n ; i ++ ) { if (( find ( mark [ i ] + girl - boy ) && mark [ i ] + girl <= mark_len ) || find ( mark [ i ] + girl + boy )) { printf ( \"1 \\n %d \\n \" , mark [ i ] + girl ); return ; } if ( find ( mark [ i ] - girl + boy ) && mark [ i ] - girl >= 0 ) { printf ( \"1 \\n %d \\n \" , mark [ i ] - girl ); return ; } } printf ( \"2 \\n %d %d \\n \" , girl , boy ); } int main () { input (); work (); return 0 ; }","title":"480B"},{"location":"competitive_programming/codeforces/480B/#480b","text":"","title":"480B"},{"location":"competitive_programming/codeforces/480B/#tutorial","text":"Function \"find\" in STL set and map can be used to find a element in them in O(logN) O(logN) . It made them can be used as a hashtable whose query complexity is O(logN) O(logN) instead of O(1) O(1) .","title":"Tutorial"},{"location":"competitive_programming/codeforces/480B/#solution","text":"#include <cstdio> #include <algorithm> using namespace std ; #define MAX_N 100005 int n , mark_len , girl , boy ; int mark [ MAX_N ]; void input () { scanf ( \"%d%d%d%d\" , & n , & mark_len , & girl , & boy ); for ( int i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & mark [ i ]); } } bool find ( int a ) { int * p = lower_bound ( mark , mark + n , a ); if ( p == mark + n ) return false ; return a == * p ; } void work () { bool found_boy = false ; bool found_girl = false ; for ( int i = 0 ; i < n ; i ++ ) { found_boy = found_boy || find ( mark [ i ] + boy ); found_girl = found_girl || find ( mark [ i ] + girl ); } if ( found_boy && found_girl ) { puts ( \"0\" ); return ; } if ( found_boy ) { puts ( \"1\" ); printf ( \"%d \\n \" , girl ); return ; } if ( found_girl ) { puts ( \"1\" ); printf ( \"%d \\n \" , boy ); return ; } for ( int i = 0 ; i < n ; i ++ ) { if (( find ( mark [ i ] + girl - boy ) && mark [ i ] + girl <= mark_len ) || find ( mark [ i ] + girl + boy )) { printf ( \"1 \\n %d \\n \" , mark [ i ] + girl ); return ; } if ( find ( mark [ i ] - girl + boy ) && mark [ i ] - girl >= 0 ) { printf ( \"1 \\n %d \\n \" , mark [ i ] - girl ); return ; } } printf ( \"2 \\n %d %d \\n \" , girl , boy ); } int main () { input (); work (); return 0 ; }","title":"Solution"},{"location":"competitive_programming/codeforces/482B/","text":"482B Solution #include <cstdio> #include <algorithm> using namespace std ; #define MAX_M 100005 #define MAX_N 100005 #define MAX_BIT_NUM 40 #define D(x) x struct Condition { int l , r , q ; } condition [ MAX_M ]; int n , m ; int seq [ MAX_N ][ MAX_BIT_NUM ]; int delta [ MAX_N ][ MAX_BIT_NUM ]; int sum [ MAX_N ][ MAX_BIT_NUM ]; void input () { scanf ( \"%d%d\" , & n , & m ); for ( int i = 0 ; i < m ; i ++ ) { int a , b , c ; scanf ( \"%d%d%d\" , & a , & b , & c ); condition [ i ]. l = a ; condition [ i ]. r = b ; condition [ i ]. q = c ; } } int get_bit ( int l , int r , int pos ) { int temp = sum [ r ][ pos ] - sum [ l - 1 ][ pos ] - ( r - l + 1 ); if ( temp == 0 ) return 1 ; return 0 ; } int work () { for ( int i = 0 ; i < m ; i ++ ) { int q = condition [ i ]. q ; for ( int j = 0 ; q ; q >>= 1 , j ++ ) { if ( q & 1 ) { delta [ condition [ i ]. l ][ j ] += 1 ; delta [ condition [ i ]. r + 1 ][ j ] += -1 ; } } } int temp [ MAX_BIT_NUM ]; fill ( temp , temp + MAX_BIT_NUM , 0 ); for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 0 ; j < MAX_BIT_NUM ; j ++ ) { temp [ j ] += delta [ i ][ j ]; if ( temp [ j ]) { seq [ i ][ j ] = 1 ; } sum [ i ][ j ] = sum [ i - 1 ][ j ] + seq [ i ][ j ]; } } for ( int i = 0 ; i < m ; i ++ ) { int q = condition [ i ]. q ; for ( int j = 0 ; j <= 30 ; j ++ , q >>= 1 ) { if ( get_bit ( condition [ i ]. l , condition [ i ]. r , j ) != ( q & 1 )) { return false ; } } } return true ; } int get_value ( int pos ) { int ret = 0 ; for ( int i = 30 ; i >= 0 ; i -- ) { ret = ( ret << 1 ) + seq [ pos ][ i ]; } return ret ; } void output () { printf ( \"%d\" , get_value ( 1 )); for ( int i = 2 ; i <= n ; i ++ ) { printf ( \" %d\" , get_value ( i )); } puts ( \"\" ); } int main () { input (); if ( work ()) { puts ( \"YES\" ); output (); } else { puts ( \"NO\" ); } return 0 ; }","title":"482B"},{"location":"competitive_programming/codeforces/482B/#482b","text":"","title":"482B"},{"location":"competitive_programming/codeforces/482B/#solution","text":"#include <cstdio> #include <algorithm> using namespace std ; #define MAX_M 100005 #define MAX_N 100005 #define MAX_BIT_NUM 40 #define D(x) x struct Condition { int l , r , q ; } condition [ MAX_M ]; int n , m ; int seq [ MAX_N ][ MAX_BIT_NUM ]; int delta [ MAX_N ][ MAX_BIT_NUM ]; int sum [ MAX_N ][ MAX_BIT_NUM ]; void input () { scanf ( \"%d%d\" , & n , & m ); for ( int i = 0 ; i < m ; i ++ ) { int a , b , c ; scanf ( \"%d%d%d\" , & a , & b , & c ); condition [ i ]. l = a ; condition [ i ]. r = b ; condition [ i ]. q = c ; } } int get_bit ( int l , int r , int pos ) { int temp = sum [ r ][ pos ] - sum [ l - 1 ][ pos ] - ( r - l + 1 ); if ( temp == 0 ) return 1 ; return 0 ; } int work () { for ( int i = 0 ; i < m ; i ++ ) { int q = condition [ i ]. q ; for ( int j = 0 ; q ; q >>= 1 , j ++ ) { if ( q & 1 ) { delta [ condition [ i ]. l ][ j ] += 1 ; delta [ condition [ i ]. r + 1 ][ j ] += -1 ; } } } int temp [ MAX_BIT_NUM ]; fill ( temp , temp + MAX_BIT_NUM , 0 ); for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 0 ; j < MAX_BIT_NUM ; j ++ ) { temp [ j ] += delta [ i ][ j ]; if ( temp [ j ]) { seq [ i ][ j ] = 1 ; } sum [ i ][ j ] = sum [ i - 1 ][ j ] + seq [ i ][ j ]; } } for ( int i = 0 ; i < m ; i ++ ) { int q = condition [ i ]. q ; for ( int j = 0 ; j <= 30 ; j ++ , q >>= 1 ) { if ( get_bit ( condition [ i ]. l , condition [ i ]. r , j ) != ( q & 1 )) { return false ; } } } return true ; } int get_value ( int pos ) { int ret = 0 ; for ( int i = 30 ; i >= 0 ; i -- ) { ret = ( ret << 1 ) + seq [ pos ][ i ]; } return ret ; } void output () { printf ( \"%d\" , get_value ( 1 )); for ( int i = 2 ; i <= n ; i ++ ) { printf ( \" %d\" , get_value ( i )); } puts ( \"\" ); } int main () { input (); if ( work ()) { puts ( \"YES\" ); output (); } else { puts ( \"NO\" ); } return 0 ; }","title":"Solution"},{"location":"competitive_programming/codeforces/484B/","text":"484B Description You are given a sequence a consisting of n n integers. Find the maximum possible value of a_i a_i mod a_j a_j , where 1\u2009\\leq\u2009i,\u2009j\u2009\\leq\u2009n 1\u2009\\leq\u2009i,\u2009j\u2009\\leq\u2009n and a_i\u2009\\geq\u2009a_j a_i\u2009\\geq\u2009a_j . ( n \\leq 2 \\times 10^5 n \\leq 2 \\times 10^5 ) Tutorial Sort the sequence first. Let us iterate over all different a_j a_j . Since we need to maximize, then iterate all integer x x (such x x divisible by a_j a_j ) in range from 2 \\times a_j 2 \\times a_j to M M , where M M is the sum of the max value in the sequence and a_j a_j . For each such x x we need to find maximum a_i a_i , such a_i\u2009<\u2009x a_i\u2009<\u2009x . You can do this in time O(1) O(1) with preprocess the answers for 1 to 10^6 10^6 . But I would rather directly use lower_bound, the time of which is O(logN) O(logN) . After that, update answer by a_i a_i mod a_j a_j . Notably, the total time complexity is O(NlogN\u2009+\u2009MlogMlogN) O(NlogN\u2009+\u2009MlogMlogN) . The iteration for all the a_j a_j and x x is O(MlogM) O(MlogM) . Because \\sum\\limits_{i=1}^{M} \\frac{M}{i} \\approx O(MlogM) \\sum\\limits_{i=1}^{M} \\frac{M}{i} \\approx O(MlogM) which can be deducted from Euler-Mascheroni constant. Solution #include <cstring> #include <cstdio> #include <algorithm> #include <cstdlib> using namespace std ; #define MAX_N 200005 #define D(x) int n ; int f [ MAX_N ]; void input () { scanf ( \"%d\" , & n ); for ( int i = 0 ; i < n ; i ++ ) scanf ( \"%d\" , & f [ i ]); } int work () { int ret = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 2 ; j * f [ i ] <= f [ n - 1 ] + f [ i ]; j ++ ) { int temp = * ( lower_bound ( f , f + n , f [ i ] * j ) - 1 ); ret = max ( ret , temp % f [ i ]); } } return ret ; } int main () { input (); sort ( f , f + n ); n = unique ( f , f + n ) - f ; printf ( \"%d \\n \" , work ()); return 0 ; }","title":"484B"},{"location":"competitive_programming/codeforces/484B/#484b","text":"","title":"484B"},{"location":"competitive_programming/codeforces/484B/#description","text":"You are given a sequence a consisting of n n integers. Find the maximum possible value of a_i a_i mod a_j a_j , where 1\u2009\\leq\u2009i,\u2009j\u2009\\leq\u2009n 1\u2009\\leq\u2009i,\u2009j\u2009\\leq\u2009n and a_i\u2009\\geq\u2009a_j a_i\u2009\\geq\u2009a_j . ( n \\leq 2 \\times 10^5 n \\leq 2 \\times 10^5 )","title":"Description"},{"location":"competitive_programming/codeforces/484B/#tutorial","text":"Sort the sequence first. Let us iterate over all different a_j a_j . Since we need to maximize, then iterate all integer x x (such x x divisible by a_j a_j ) in range from 2 \\times a_j 2 \\times a_j to M M , where M M is the sum of the max value in the sequence and a_j a_j . For each such x x we need to find maximum a_i a_i , such a_i\u2009<\u2009x a_i\u2009<\u2009x . You can do this in time O(1) O(1) with preprocess the answers for 1 to 10^6 10^6 . But I would rather directly use lower_bound, the time of which is O(logN) O(logN) . After that, update answer by a_i a_i mod a_j a_j . Notably, the total time complexity is O(NlogN\u2009+\u2009MlogMlogN) O(NlogN\u2009+\u2009MlogMlogN) . The iteration for all the a_j a_j and x x is O(MlogM) O(MlogM) . Because \\sum\\limits_{i=1}^{M} \\frac{M}{i} \\approx O(MlogM) \\sum\\limits_{i=1}^{M} \\frac{M}{i} \\approx O(MlogM) which can be deducted from Euler-Mascheroni constant.","title":"Tutorial"},{"location":"competitive_programming/codeforces/484B/#solution","text":"#include <cstring> #include <cstdio> #include <algorithm> #include <cstdlib> using namespace std ; #define MAX_N 200005 #define D(x) int n ; int f [ MAX_N ]; void input () { scanf ( \"%d\" , & n ); for ( int i = 0 ; i < n ; i ++ ) scanf ( \"%d\" , & f [ i ]); } int work () { int ret = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 2 ; j * f [ i ] <= f [ n - 1 ] + f [ i ]; j ++ ) { int temp = * ( lower_bound ( f , f + n , f [ i ] * j ) - 1 ); ret = max ( ret , temp % f [ i ]); } } return ret ; } int main () { input (); sort ( f , f + n ); n = unique ( f , f + n ) - f ; printf ( \"%d \\n \" , work ()); return 0 ; }","title":"Solution"},{"location":"competitive_programming/codeforces/487B/","text":"487B Description Given a sequence of numbers of length n n . ( 1 \\leq n \\leq 10^5 1 \\leq n \\leq 10^5 ) It require us to split the sequence into several substrip, and the difference between the maximum value and minimum value in each strip is no greater than l l , and the length of each substrip must be greater than s s . Output the minimal number of strip it could be divided into. Tutorial Use dynamic programming to solve the problem. Let f[i] f[i] denote the minimal number of pieces that the first i i numbers can be split into. g[i] g[i] denote the least possible left boarder of substrip whose right border is i i which satisfies the condition. Then f[i]\u2009=\u2009min(f[k])\u2009+\u20091 f[i]\u2009=\u2009min(f[k])\u2009+\u20091 , where g[i]\u2009\u2264\u2009k\u2009\u2264\u2009i\u2009-\u2009l g[i]\u2009\u2264\u2009k\u2009\u2264\u2009i\u2009-\u2009l . One possible way to calculate g[i] g[i] is to use monotonic queue which can be done in O(n) O(n) . But it is hard to implement, since we need to maintain 2 monotonic queues to for the maximal and minimal value, especially when it comes to the pop operation. Here we have a alternative way to do this, multiset. Multiset is a STL container which have the same function of STL set, however, it can store multiple items of the same value. We can insert and erase a element by O(logN) O(logN) , which is slower than the push and pop of monotonic queue which is O(1) O(1) . Quest any element in multiset (e.g. maximum, minimum) in O(1) O(1) . (I cannot believe that) It can be used as follows. multiset<E> m; m.insert(a); //insert a into the multiset m.erase(m.lower_bound(a)); //delete a from the multiset *m.begin(); //the minimum element *(--m.end()); //the maximum element With so easy to access the maximum and minimum, we can finish the task of calculating g[i] g[i] with a process of two pointers, which is to push the right boarder by 1 and to push the left boarder until it satisfies the condition. We can also use either monotonic queue or multiset to calculate f[i] f[i] , because its also a task of finding the minimal between the two pointers. Solution #include <cstdio> #include <cmath> #include <set> using namespace std ; #define MAX_N 100005 #define D(x) #define INF 0x3f3f3f3f int n , s , max_diff ; int seq [ MAX_N ]; int f [ MAX_N ], g [ MAX_N ]; void input () { scanf ( \"%d%d%d\" , & n , & max_diff , & s ); for ( int i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & seq [ i ]); } } int work () { multiset < int > multi_set ; int left = 0 ; for ( int i = 0 ; i < n ; i ++ ) { multi_set . insert ( seq [ i ]); while ( ! multi_set . empty ()) { int min_val = * multi_set . begin (); int max_val = * ( -- multi_set . end ()); D ( printf ( \" min=%d \\n \" , min_val )); D ( printf ( \" max=%d \\n \" , max_val )); if ( max_val - min_val <= max_diff ) { break ; } D ( printf ( \" left=%d \\n \" , left )); multi_set . erase ( multi_set . lower_bound ( seq [ left ])); left ++ ; } g [ i ] = left ; D ( printf ( \"g[%d]=%d \\n \" , i , g [ i ])); } multi_set . clear (); f [ 0 ] = 0 ; for ( int i = 0 ; i < s - 1 ; i ++ ) { f [ i + 1 ] = INF ; } left = -1 ; for ( int i = s - 1 ; i < n ; i ++ ) { D ( printf ( \"f[i]=%d \\n \" , f [ i ])); D ( printf ( \"%d \\n \" , i )); D ( printf ( \" in:%d \\n \" , i - s )); multi_set . insert ( f [ i - s + 1 ]); while ( left < g [ i ] - 1 && left <= i - s ) { D ( printf ( \" out:%d \\n \" , left )); multi_set . erase ( multi_set . lower_bound ( f [ left + 1 ])); left ++ ; } if ( multi_set . empty ()) { f [ i + 1 ] = INF ; continue ; } f [ i + 1 ] = * multi_set . begin () + 1 ; } if ( f [ n ] >= INF ) { return -1 ; } return f [ n ]; } int main () { input (); printf ( \"%d \\n \" , work ()); return 0 ; }","title":"487B"},{"location":"competitive_programming/codeforces/487B/#487b","text":"","title":"487B"},{"location":"competitive_programming/codeforces/487B/#description","text":"Given a sequence of numbers of length n n . ( 1 \\leq n \\leq 10^5 1 \\leq n \\leq 10^5 ) It require us to split the sequence into several substrip, and the difference between the maximum value and minimum value in each strip is no greater than l l , and the length of each substrip must be greater than s s . Output the minimal number of strip it could be divided into.","title":"Description"},{"location":"competitive_programming/codeforces/487B/#tutorial","text":"Use dynamic programming to solve the problem. Let f[i] f[i] denote the minimal number of pieces that the first i i numbers can be split into. g[i] g[i] denote the least possible left boarder of substrip whose right border is i i which satisfies the condition. Then f[i]\u2009=\u2009min(f[k])\u2009+\u20091 f[i]\u2009=\u2009min(f[k])\u2009+\u20091 , where g[i]\u2009\u2264\u2009k\u2009\u2264\u2009i\u2009-\u2009l g[i]\u2009\u2264\u2009k\u2009\u2264\u2009i\u2009-\u2009l . One possible way to calculate g[i] g[i] is to use monotonic queue which can be done in O(n) O(n) . But it is hard to implement, since we need to maintain 2 monotonic queues to for the maximal and minimal value, especially when it comes to the pop operation. Here we have a alternative way to do this, multiset. Multiset is a STL container which have the same function of STL set, however, it can store multiple items of the same value. We can insert and erase a element by O(logN) O(logN) , which is slower than the push and pop of monotonic queue which is O(1) O(1) . Quest any element in multiset (e.g. maximum, minimum) in O(1) O(1) . (I cannot believe that) It can be used as follows. multiset<E> m; m.insert(a); //insert a into the multiset m.erase(m.lower_bound(a)); //delete a from the multiset *m.begin(); //the minimum element *(--m.end()); //the maximum element With so easy to access the maximum and minimum, we can finish the task of calculating g[i] g[i] with a process of two pointers, which is to push the right boarder by 1 and to push the left boarder until it satisfies the condition. We can also use either monotonic queue or multiset to calculate f[i] f[i] , because its also a task of finding the minimal between the two pointers.","title":"Tutorial"},{"location":"competitive_programming/codeforces/487B/#solution","text":"#include <cstdio> #include <cmath> #include <set> using namespace std ; #define MAX_N 100005 #define D(x) #define INF 0x3f3f3f3f int n , s , max_diff ; int seq [ MAX_N ]; int f [ MAX_N ], g [ MAX_N ]; void input () { scanf ( \"%d%d%d\" , & n , & max_diff , & s ); for ( int i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & seq [ i ]); } } int work () { multiset < int > multi_set ; int left = 0 ; for ( int i = 0 ; i < n ; i ++ ) { multi_set . insert ( seq [ i ]); while ( ! multi_set . empty ()) { int min_val = * multi_set . begin (); int max_val = * ( -- multi_set . end ()); D ( printf ( \" min=%d \\n \" , min_val )); D ( printf ( \" max=%d \\n \" , max_val )); if ( max_val - min_val <= max_diff ) { break ; } D ( printf ( \" left=%d \\n \" , left )); multi_set . erase ( multi_set . lower_bound ( seq [ left ])); left ++ ; } g [ i ] = left ; D ( printf ( \"g[%d]=%d \\n \" , i , g [ i ])); } multi_set . clear (); f [ 0 ] = 0 ; for ( int i = 0 ; i < s - 1 ; i ++ ) { f [ i + 1 ] = INF ; } left = -1 ; for ( int i = s - 1 ; i < n ; i ++ ) { D ( printf ( \"f[i]=%d \\n \" , f [ i ])); D ( printf ( \"%d \\n \" , i )); D ( printf ( \" in:%d \\n \" , i - s )); multi_set . insert ( f [ i - s + 1 ]); while ( left < g [ i ] - 1 && left <= i - s ) { D ( printf ( \" out:%d \\n \" , left )); multi_set . erase ( multi_set . lower_bound ( f [ left + 1 ])); left ++ ; } if ( multi_set . empty ()) { f [ i + 1 ] = INF ; continue ; } f [ i + 1 ] = * multi_set . begin () + 1 ; } if ( f [ n ] >= INF ) { return -1 ; } return f [ n ]; } int main () { input (); printf ( \"%d \\n \" , work ()); return 0 ; }","title":"Solution"},{"location":"competitive_programming/codeforces/489C/","text":"489C Description Given two set of integers. Totally, n n integers. There are m m edges connecting some integers from one set to the other. ( 1 \\leq n,m \\leq 100 1 \\leq n,m \\leq 100 ) One operation could reduce two integers which have a edge between them by a common factor. Output the maximum number of operations could be performed. Tutorial It is easy to know that each operation should use a prime factor, so that the answer could be maximized. For each prime number which is a factor of any of the integer in the set, we perform a maxflow. Each integer is a vertex in the network flow graph. In the time of prime p p , we add edges from the source to the integers in the first set with capacity of the number of p p s that the integer contains. Likely, we add edges from the integers in the second set to the terminal. Finally, we add up each maxflow which is the answer of the problem. Solution #include <cstdio> #include <algorithm> #include <queue> #include <set> using namespace std ; const int MAX_N = 105 ; #define REP(i,n) for((i)=0;(i)<(int)(n);(i)++) #define snuke(c,itr) for(__typeof((c).begin()) itr=(c).begin();itr!=(c).end();itr++) typedef int F ; #define F_INF (1<<29) #define MAXV 1000 #define MAXE 1000 // E*2! F cap [ MAXE ], flow [ MAXE ]; int to [ MAXE ], _prev [ MAXE ], last [ MAXV ], used [ MAXV ], level [ MAXV ]; struct MaxFlow { int V , E ; MaxFlow ( int n ){ int i ; V = n ; E = 0 ; REP ( i , V ) last [ i ] = -1 ; } void add_edge ( int x , int y , F f ){ cap [ E ] = f ; flow [ E ] = 0 ; to [ E ] = y ; _prev [ E ] = last [ x ]; last [ x ] = E ; E ++ ; cap [ E ] = 0 ; flow [ E ] = 0 ; to [ E ] = x ; _prev [ E ] = last [ y ]; last [ y ] = E ; E ++ ; } bool bfs ( int s , int t ){ int i ; REP ( i , V ) level [ i ] = -1 ; queue < int > q ; q . push ( s ); level [ s ] = 0 ; while ( ! q . empty ()){ int x = q . front (); q . pop (); for ( i = last [ x ]; i >= 0 ; i = _prev [ i ]) if ( level [ to [ i ]] == -1 && cap [ i ] > flow [ i ]) { q . push ( to [ i ]); level [ to [ i ]] = level [ x ] + 1 ;} } return ( level [ t ] != -1 ); } F dfs ( int v , int t , F f ){ int i ; if ( v == t ) return f ; for ( i = used [ v ]; i >= 0 ; used [ v ] = i = _prev [ i ]) if ( level [ to [ i ]] > level [ v ] && cap [ i ] > flow [ i ]){ F tmp = dfs ( to [ i ], t , min ( f , cap [ i ] - flow [ i ])); if ( tmp > 0 ) { flow [ i ] += tmp ; flow [ i ^ 1 ] -= tmp ; return tmp ;} } return 0 ; } F maxflow ( int s , int t ){ int i ; while ( bfs ( s , t )){ REP ( i , V ) used [ i ] = last [ i ]; while ( dfs ( s , t , F_INF ) != 0 ); } F ans = 0 ; for ( i = last [ s ]; i >= 0 ; i = _prev [ i ]) ans += flow [ i ]; return ans ; } }; int n , m ; int f [ MAX_N ]; int odd [ MAX_N ], even [ MAX_N ]; int main () { //input scanf ( \"%d%d\" , & n , & m ); for ( int i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , f + i ); } for ( int i = 0 ; i < m ; i ++ ) { int a , b ; scanf ( \"%d%d\" , & a , & b ); a -- ; b -- ; if ( b & 1 ) { swap ( a , b ); } odd [ i ] = a ; even [ i ] = b ; } //work set < int > s ; for ( int i = 0 ; i < n ; i ++ ) { int temp = f [ i ]; for ( int j = 2 ; j * j <= temp ; j ++ ) { if ( temp % j == 0 ) { s . insert ( j ); } while ( temp % j == 0 ) { temp /= j ; } } if ( temp > 1 ) { s . insert ( temp ); } } //flow int ans = 0 ; for ( typeof ( s . begin ()) itr = s . begin (); itr != s . end (); itr ++ ) { int factor = * itr ; MaxFlow net = MaxFlow ( n + 2 ); for ( int i = 0 ; i < n ; i ++ ) { int cnt = 0 ; int temp = f [ i ]; while ( temp % factor == 0 ) { temp /= factor ; cnt ++ ; } if ( i & 1 ) { net . add_edge ( n , i , cnt ); } else { net . add_edge ( i , n + 1 , cnt ); } } for ( int i = 0 ; i < m ; i ++ ) { net . add_edge ( odd [ i ], even [ i ], F_INF ); } ans += net . maxflow ( n , n + 1 ); } printf ( \"%d \\n \" , ans ); return 0 ; }","title":"489C"},{"location":"competitive_programming/codeforces/489C/#489c","text":"","title":"489C"},{"location":"competitive_programming/codeforces/489C/#description","text":"Given two set of integers. Totally, n n integers. There are m m edges connecting some integers from one set to the other. ( 1 \\leq n,m \\leq 100 1 \\leq n,m \\leq 100 ) One operation could reduce two integers which have a edge between them by a common factor. Output the maximum number of operations could be performed.","title":"Description"},{"location":"competitive_programming/codeforces/489C/#tutorial","text":"It is easy to know that each operation should use a prime factor, so that the answer could be maximized. For each prime number which is a factor of any of the integer in the set, we perform a maxflow. Each integer is a vertex in the network flow graph. In the time of prime p p , we add edges from the source to the integers in the first set with capacity of the number of p p s that the integer contains. Likely, we add edges from the integers in the second set to the terminal. Finally, we add up each maxflow which is the answer of the problem.","title":"Tutorial"},{"location":"competitive_programming/codeforces/489C/#solution","text":"#include <cstdio> #include <algorithm> #include <queue> #include <set> using namespace std ; const int MAX_N = 105 ; #define REP(i,n) for((i)=0;(i)<(int)(n);(i)++) #define snuke(c,itr) for(__typeof((c).begin()) itr=(c).begin();itr!=(c).end();itr++) typedef int F ; #define F_INF (1<<29) #define MAXV 1000 #define MAXE 1000 // E*2! F cap [ MAXE ], flow [ MAXE ]; int to [ MAXE ], _prev [ MAXE ], last [ MAXV ], used [ MAXV ], level [ MAXV ]; struct MaxFlow { int V , E ; MaxFlow ( int n ){ int i ; V = n ; E = 0 ; REP ( i , V ) last [ i ] = -1 ; } void add_edge ( int x , int y , F f ){ cap [ E ] = f ; flow [ E ] = 0 ; to [ E ] = y ; _prev [ E ] = last [ x ]; last [ x ] = E ; E ++ ; cap [ E ] = 0 ; flow [ E ] = 0 ; to [ E ] = x ; _prev [ E ] = last [ y ]; last [ y ] = E ; E ++ ; } bool bfs ( int s , int t ){ int i ; REP ( i , V ) level [ i ] = -1 ; queue < int > q ; q . push ( s ); level [ s ] = 0 ; while ( ! q . empty ()){ int x = q . front (); q . pop (); for ( i = last [ x ]; i >= 0 ; i = _prev [ i ]) if ( level [ to [ i ]] == -1 && cap [ i ] > flow [ i ]) { q . push ( to [ i ]); level [ to [ i ]] = level [ x ] + 1 ;} } return ( level [ t ] != -1 ); } F dfs ( int v , int t , F f ){ int i ; if ( v == t ) return f ; for ( i = used [ v ]; i >= 0 ; used [ v ] = i = _prev [ i ]) if ( level [ to [ i ]] > level [ v ] && cap [ i ] > flow [ i ]){ F tmp = dfs ( to [ i ], t , min ( f , cap [ i ] - flow [ i ])); if ( tmp > 0 ) { flow [ i ] += tmp ; flow [ i ^ 1 ] -= tmp ; return tmp ;} } return 0 ; } F maxflow ( int s , int t ){ int i ; while ( bfs ( s , t )){ REP ( i , V ) used [ i ] = last [ i ]; while ( dfs ( s , t , F_INF ) != 0 ); } F ans = 0 ; for ( i = last [ s ]; i >= 0 ; i = _prev [ i ]) ans += flow [ i ]; return ans ; } }; int n , m ; int f [ MAX_N ]; int odd [ MAX_N ], even [ MAX_N ]; int main () { //input scanf ( \"%d%d\" , & n , & m ); for ( int i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , f + i ); } for ( int i = 0 ; i < m ; i ++ ) { int a , b ; scanf ( \"%d%d\" , & a , & b ); a -- ; b -- ; if ( b & 1 ) { swap ( a , b ); } odd [ i ] = a ; even [ i ] = b ; } //work set < int > s ; for ( int i = 0 ; i < n ; i ++ ) { int temp = f [ i ]; for ( int j = 2 ; j * j <= temp ; j ++ ) { if ( temp % j == 0 ) { s . insert ( j ); } while ( temp % j == 0 ) { temp /= j ; } } if ( temp > 1 ) { s . insert ( temp ); } } //flow int ans = 0 ; for ( typeof ( s . begin ()) itr = s . begin (); itr != s . end (); itr ++ ) { int factor = * itr ; MaxFlow net = MaxFlow ( n + 2 ); for ( int i = 0 ; i < n ; i ++ ) { int cnt = 0 ; int temp = f [ i ]; while ( temp % factor == 0 ) { temp /= factor ; cnt ++ ; } if ( i & 1 ) { net . add_edge ( n , i , cnt ); } else { net . add_edge ( i , n + 1 , cnt ); } } for ( int i = 0 ; i < m ; i ++ ) { net . add_edge ( odd [ i ], even [ i ], F_INF ); } ans += net . maxflow ( n , n + 1 ); } printf ( \"%d \\n \" , ans ); return 0 ; }","title":"Solution"},{"location":"competitive_programming/codeforces/504B/","text":"504B Description Give you two permutations of n n integers of 0 0 to n - 1 n - 1 . ( 1 \\leq n \\leq 2\\times 10^5 1 \\leq n \\leq 2\\times 10^5 ). Posit they are the a a th and b b th permutation. Output the (a + b) \\% n (a + b) \\% n th permutation. Tutorial With the thought of dynamic programming, we can come up with the formula of calculating the rank of a permutation, which is as follows. rank = \\sum\\limits_{i=1}^{n}{less(p_i) \\times (n - i)!} rank = \\sum\\limits_{i=1}^{n}{less(p_i) \\times (n - i)!} . p_i p_i is the i i th number in the permutation. less(p_i) less(p_i) means the number of p_j p_j which is less than p_i p_i and j j is greater than i i , which can be calculated by binary indexed tree. With this formula we can calculate a+b a+b like we add two big integers. less(p_i) less(p_i) s are the digits of the big integers. We need to do the carry bit. After that we have the a+b a+b and we need to transform it back to the a + b a + b th permutation, which can be done by binary indexed tree and binary search. Solution #include <cstdio> #include <algorithm> using namespace std ; #define D(x) const int MAX_N = ( int )( 1e5 ) * 2 + 10 ; int n ; int a [ MAX_N ]; int b [ MAX_N ]; int sum_b [ MAX_N ]; int sum_a [ MAX_N ]; int c [ MAX_N ]; int sum_c [ MAX_N ]; int binary_indexed_tree [ MAX_N ]; int low_bit ( int x ) { return x & ( - x ); } void add ( int pos , int val ) { for ( int i = pos ; i < MAX_N ; i += low_bit ( i )) { binary_indexed_tree [ i ] += val ; } } int sum ( int pos ) { int ret = 0 ; for ( int i = pos ; i > 0 ; i -= low_bit ( i )) { ret += binary_indexed_tree [ i ]; } return ret ; } void input ( int a []) { for ( int i = 1 ; i <= n ; i ++ ) { scanf ( \"%d\" , & a [ i ]); a [ i ] ++ ; } } void work ( int sum_a [], int a []) { fill ( binary_indexed_tree , binary_indexed_tree + n + 1 , 0 ); for ( int i = n ; i ; i -- ) { sum_a [ i ] = sum ( a [ i ]); add ( a [ i ], 1 ); } } bool ok ( int mid , int a ) { return sum ( mid ) >= a ; } int binary_search ( int start , int end , int a ) { int l = start ; int r = end ; while ( l < r ) { int mid = ( l + r ) / 2 ; if ( ok ( mid , a )) r = mid ; else l = mid + 1 ; } return l ; } int main () { //input scanf ( \"%d\" , & n ); input ( a ); input ( b ); //work work ( sum_a , a ); work ( sum_b , b ); for ( int i = 1 ; i <= n ; i ++ ) { sum_c [ i ] = sum_a [ i ] + sum_b [ i ]; } for ( int i = n ; i ; i -- ) { if ( sum_c [ i ] > n - i ) { sum_c [ i ] -= n - i + 1 ; sum_c [ i - 1 ] += 1 ; } } fill ( binary_indexed_tree , binary_indexed_tree + n + 1 , 0 ); for ( int i = 1 ; i <= n ; i ++ ) add ( i , 1 ); for ( int i = 1 ; i <= n ; i ++ ) { c [ i ] = binary_search ( 1 , n , sum_c [ i ] + 1 ); add ( c [ i ], -1 ); } D ( for ( int i = 1 ; i < 4 ; i ++ ) printf ( \"%d \\n \" , sum_c [ i ])); //output for ( int i = 1 ; i <= n ; i ++ ) { printf ( \"%d\" , c [ i ] - 1 ); if ( i != n ) putchar ( ' ' ); } puts ( \"\" ); return 0 ; }","title":"504B"},{"location":"competitive_programming/codeforces/504B/#504b","text":"","title":"504B"},{"location":"competitive_programming/codeforces/504B/#description","text":"Give you two permutations of n n integers of 0 0 to n - 1 n - 1 . ( 1 \\leq n \\leq 2\\times 10^5 1 \\leq n \\leq 2\\times 10^5 ). Posit they are the a a th and b b th permutation. Output the (a + b) \\% n (a + b) \\% n th permutation.","title":"Description"},{"location":"competitive_programming/codeforces/504B/#tutorial","text":"With the thought of dynamic programming, we can come up with the formula of calculating the rank of a permutation, which is as follows. rank = \\sum\\limits_{i=1}^{n}{less(p_i) \\times (n - i)!} rank = \\sum\\limits_{i=1}^{n}{less(p_i) \\times (n - i)!} . p_i p_i is the i i th number in the permutation. less(p_i) less(p_i) means the number of p_j p_j which is less than p_i p_i and j j is greater than i i , which can be calculated by binary indexed tree. With this formula we can calculate a+b a+b like we add two big integers. less(p_i) less(p_i) s are the digits of the big integers. We need to do the carry bit. After that we have the a+b a+b and we need to transform it back to the a + b a + b th permutation, which can be done by binary indexed tree and binary search.","title":"Tutorial"},{"location":"competitive_programming/codeforces/504B/#solution","text":"#include <cstdio> #include <algorithm> using namespace std ; #define D(x) const int MAX_N = ( int )( 1e5 ) * 2 + 10 ; int n ; int a [ MAX_N ]; int b [ MAX_N ]; int sum_b [ MAX_N ]; int sum_a [ MAX_N ]; int c [ MAX_N ]; int sum_c [ MAX_N ]; int binary_indexed_tree [ MAX_N ]; int low_bit ( int x ) { return x & ( - x ); } void add ( int pos , int val ) { for ( int i = pos ; i < MAX_N ; i += low_bit ( i )) { binary_indexed_tree [ i ] += val ; } } int sum ( int pos ) { int ret = 0 ; for ( int i = pos ; i > 0 ; i -= low_bit ( i )) { ret += binary_indexed_tree [ i ]; } return ret ; } void input ( int a []) { for ( int i = 1 ; i <= n ; i ++ ) { scanf ( \"%d\" , & a [ i ]); a [ i ] ++ ; } } void work ( int sum_a [], int a []) { fill ( binary_indexed_tree , binary_indexed_tree + n + 1 , 0 ); for ( int i = n ; i ; i -- ) { sum_a [ i ] = sum ( a [ i ]); add ( a [ i ], 1 ); } } bool ok ( int mid , int a ) { return sum ( mid ) >= a ; } int binary_search ( int start , int end , int a ) { int l = start ; int r = end ; while ( l < r ) { int mid = ( l + r ) / 2 ; if ( ok ( mid , a )) r = mid ; else l = mid + 1 ; } return l ; } int main () { //input scanf ( \"%d\" , & n ); input ( a ); input ( b ); //work work ( sum_a , a ); work ( sum_b , b ); for ( int i = 1 ; i <= n ; i ++ ) { sum_c [ i ] = sum_a [ i ] + sum_b [ i ]; } for ( int i = n ; i ; i -- ) { if ( sum_c [ i ] > n - i ) { sum_c [ i ] -= n - i + 1 ; sum_c [ i - 1 ] += 1 ; } } fill ( binary_indexed_tree , binary_indexed_tree + n + 1 , 0 ); for ( int i = 1 ; i <= n ; i ++ ) add ( i , 1 ); for ( int i = 1 ; i <= n ; i ++ ) { c [ i ] = binary_search ( 1 , n , sum_c [ i ] + 1 ); add ( c [ i ], -1 ); } D ( for ( int i = 1 ; i < 4 ; i ++ ) printf ( \"%d \\n \" , sum_c [ i ])); //output for ( int i = 1 ; i <= n ; i ++ ) { printf ( \"%d\" , c [ i ] - 1 ); if ( i != n ) putchar ( ' ' ); } puts ( \"\" ); return 0 ; }","title":"Solution"},{"location":"competitive_programming/codeforces/506B/","text":"506B Description There are n n vertexes in the graph. Now we need to add some unidirected edges to it. To make sure that we can go from a a to b b in each pair (a,b) (a,b) among the m m pairs given below. ( 1 \\leq n,m \\leq 10^5 1 \\leq n,m \\leq 10^5 ) Output the minimum number of edges to be added. Tutorial First we add all the edges and use Disjoint Set Union to see the connected components. In a component without circles, we can construct the edges like this. We arrange all the points in a line, and connect them into a chain. There must exist a chain can fulfill the condition in the description. For those component contain circles, we just form a big circle which every vertex can go to every vertex. Topological order can be used for circle detection. If after the BFS, there still some vertex's degree is not zero, it must contain cricle. Solution #include <cstdio> #include <vector> #include <queue> using namespace std ; #define D(x) x const int MAX_N = ( int )( 1e5 ) + 10 ; struct DSU { int father [ MAX_N ]; DSU () {} DSU ( int n ) { for ( int i = 0 ; i < n ; i ++ ) { father [ i ] = i ; } } int find ( int a ) { int ret = a ; while ( father [ ret ] != ret ) ret = father [ ret ]; while ( father [ a ] != a ) { int b = a ; a = father [ a ]; father [ b ] = ret ; } return ret ; } void merge ( int a , int b ) { father [ find ( a )] = father [ find ( b )]; } }; int n , m ; bool circle [ MAX_N ]; vector < int > edge [ MAX_N ]; int degree [ MAX_N ]; void add_edge ( int a , int b ) { edge [ a ]. push_back ( b ); degree [ b ] ++ ; } void bfs ( int node_num , vector < int > edge []) { //indexes start from 0 queue < int > q ; for ( int i = 0 ; i < node_num ; i ++ ) { if ( degree [ i ] == 0 ) { q . push ( i ); } } while ( ! q . empty ()) { int u = q . front (); q . pop (); //push u into an array to get the topological order sequence for ( int i = 0 ; i < ( int ) edge [ u ]. size (); i ++ ) { int v = edge [ u ][ i ]; if ( degree [ v ] == 0 ) { continue ; } degree [ v ] -- ; if ( degree [ v ] == 0 ) { q . push ( v ); } } } //if degree[i] != 0 now, it means there is a circle on the connected component with vertex i. } int main () { //input scanf ( \"%d%d\" , & n , & m ); DSU dsu = DSU ( n ); for ( int i = 0 ; i < m ; i ++ ) { int a , b ; scanf ( \"%d%d\" , & a , & b ); a -- ; b -- ; add_edge ( a , b ); dsu . merge ( a , b ); } bfs ( n , edge ); for ( int i = 0 ; i < n ; i ++ ) { if ( degree [ i ]) { circle [ dsu . find ( i )] = true ; } } int ans = n ; for ( int i = 0 ; i < n ; i ++ ) { if ( dsu . father [ i ] == i && ! circle [ i ]) { ans -- ; } } printf ( \"%d \\n \" , ans ); return 0 ; }","title":"506B"},{"location":"competitive_programming/codeforces/506B/#506b","text":"","title":"506B"},{"location":"competitive_programming/codeforces/506B/#description","text":"There are n n vertexes in the graph. Now we need to add some unidirected edges to it. To make sure that we can go from a a to b b in each pair (a,b) (a,b) among the m m pairs given below. ( 1 \\leq n,m \\leq 10^5 1 \\leq n,m \\leq 10^5 ) Output the minimum number of edges to be added.","title":"Description"},{"location":"competitive_programming/codeforces/506B/#tutorial","text":"First we add all the edges and use Disjoint Set Union to see the connected components. In a component without circles, we can construct the edges like this. We arrange all the points in a line, and connect them into a chain. There must exist a chain can fulfill the condition in the description. For those component contain circles, we just form a big circle which every vertex can go to every vertex. Topological order can be used for circle detection. If after the BFS, there still some vertex's degree is not zero, it must contain cricle.","title":"Tutorial"},{"location":"competitive_programming/codeforces/506B/#solution","text":"#include <cstdio> #include <vector> #include <queue> using namespace std ; #define D(x) x const int MAX_N = ( int )( 1e5 ) + 10 ; struct DSU { int father [ MAX_N ]; DSU () {} DSU ( int n ) { for ( int i = 0 ; i < n ; i ++ ) { father [ i ] = i ; } } int find ( int a ) { int ret = a ; while ( father [ ret ] != ret ) ret = father [ ret ]; while ( father [ a ] != a ) { int b = a ; a = father [ a ]; father [ b ] = ret ; } return ret ; } void merge ( int a , int b ) { father [ find ( a )] = father [ find ( b )]; } }; int n , m ; bool circle [ MAX_N ]; vector < int > edge [ MAX_N ]; int degree [ MAX_N ]; void add_edge ( int a , int b ) { edge [ a ]. push_back ( b ); degree [ b ] ++ ; } void bfs ( int node_num , vector < int > edge []) { //indexes start from 0 queue < int > q ; for ( int i = 0 ; i < node_num ; i ++ ) { if ( degree [ i ] == 0 ) { q . push ( i ); } } while ( ! q . empty ()) { int u = q . front (); q . pop (); //push u into an array to get the topological order sequence for ( int i = 0 ; i < ( int ) edge [ u ]. size (); i ++ ) { int v = edge [ u ][ i ]; if ( degree [ v ] == 0 ) { continue ; } degree [ v ] -- ; if ( degree [ v ] == 0 ) { q . push ( v ); } } } //if degree[i] != 0 now, it means there is a circle on the connected component with vertex i. } int main () { //input scanf ( \"%d%d\" , & n , & m ); DSU dsu = DSU ( n ); for ( int i = 0 ; i < m ; i ++ ) { int a , b ; scanf ( \"%d%d\" , & a , & b ); a -- ; b -- ; add_edge ( a , b ); dsu . merge ( a , b ); } bfs ( n , edge ); for ( int i = 0 ; i < n ; i ++ ) { if ( degree [ i ]) { circle [ dsu . find ( i )] = true ; } } int ans = n ; for ( int i = 0 ; i < n ; i ++ ) { if ( dsu . father [ i ] == i && ! circle [ i ]) { ans -- ; } } printf ( \"%d \\n \" , ans ); return 0 ; }","title":"Solution"},{"location":"competitive_programming/leetcode/126/","text":"126. Word Ladder II Problem Link Tutorial Use two way BFS. Careful with the graph building process. Enumerate the variations of each word, and check whether the variation is in the dictionary or not. Do not use O(n^2) O(n^2) to try each pair of words, which would cause TLE. Solution class Tree : def __init__ ( self , word_list , start_word , mark , vis , adj ): self . word_list = word_list self . start_word = start_word index = word_list . index ( start_word ) self . layer = [[( index , - 1 )]] self . vis = vis self . vis [ index ] = mark self . mark = mark self . finish = False self . adj = adj def expand ( self ): last_layer = self . layer [ - 1 ] new_layer = [] ret = False for i , ( u , x ) in enumerate ( last_layer ): for v in self . adj [ u ]: if self . vis [ v ] != self . mark : new_layer . append (( v , i )) if self . vis [ v ] != 0 : ret = True if not new_layer : self . finish = True for v , father in new_layer : self . vis [ v ] = self . mark self . layer . append ( new_layer ) return ret def find ( self , index , a ): ret = [] for i in reversed ( range ( index )): ret . append ( self . word_list [ self . layer [ i ][ a ][ 0 ]]); a = self . layer [ i ][ a ][ 1 ]; return ret def connect ( a , b ): if len ( a ) != len ( b ): return False cnt = 0 for i in range ( len ( a )): if a [ i ] != b [ i ]: cnt += 1 return cnt == 1 def construct ( a , b ): ret = [] for ( u , fu ) in a . layer [ - 1 ]: for ( v , fv ) in b . layer [ - 1 ]: if u == v : a_list = a . find ( len ( a . layer ) - 1 , fu ) b_list = b . find ( len ( b . layer ) - 1 , fv ) a_list . reverse () a_list . append ( a . word_list [ u ]) ret . append ( a_list + b_list ) return ret class Solution ( object ): def findLadders ( self , beginWord , endWord , wordList ): \"\"\" :type beginWord: str :type endWord: str :type wordList: List[str] :rtype: List[List[str]] \"\"\" wordList = list ( set ( wordList )) if endWord not in wordList : return [] if endWord == beginWord : return [[ endWord ]] if connect ( beginWord , endWord ): return [[ beginWord , endWord ]] if beginWord not in wordList : wordList . append ( beginWord ) dictionary = {} for i , word in enumerate ( wordList ): dictionary [ word ] = i self . total_len = len ( wordList ) self . adj = [[] for i in range ( self . total_len )] for word in wordList : temp = list ( word ) for i in range ( len ( temp )): for j in 'abcdefghijklmnopqrstuvwxyz' : if temp [ i ] != j : x = temp [ i ] temp [ i ] = j new_word = '' . join ( temp ) if new_word in dictionary : self . adj [ dictionary [ word ]] . append ( dictionary [ new_word ]) temp [ i ] = x vis = [ 0 ] * len ( wordList ) tree_top = Tree ( wordList , beginWord , 1 , vis , self . adj ) tree_bottom = Tree ( wordList , endWord , 2 , vis , self . adj ) while True : if tree_top . expand (): return construct ( tree_top , tree_bottom ) if tree_bottom . expand (): return construct ( tree_top , tree_bottom ) if tree_top . finish and tree_bottom . finish : return [] return []","title":"126. Word Ladder II"},{"location":"competitive_programming/leetcode/126/#126-word-ladder-ii","text":"","title":"126. Word Ladder II"},{"location":"competitive_programming/leetcode/126/#problem-link","text":"","title":"Problem Link"},{"location":"competitive_programming/leetcode/126/#tutorial","text":"Use two way BFS. Careful with the graph building process. Enumerate the variations of each word, and check whether the variation is in the dictionary or not. Do not use O(n^2) O(n^2) to try each pair of words, which would cause TLE.","title":"Tutorial"},{"location":"competitive_programming/leetcode/126/#solution","text":"class Tree : def __init__ ( self , word_list , start_word , mark , vis , adj ): self . word_list = word_list self . start_word = start_word index = word_list . index ( start_word ) self . layer = [[( index , - 1 )]] self . vis = vis self . vis [ index ] = mark self . mark = mark self . finish = False self . adj = adj def expand ( self ): last_layer = self . layer [ - 1 ] new_layer = [] ret = False for i , ( u , x ) in enumerate ( last_layer ): for v in self . adj [ u ]: if self . vis [ v ] != self . mark : new_layer . append (( v , i )) if self . vis [ v ] != 0 : ret = True if not new_layer : self . finish = True for v , father in new_layer : self . vis [ v ] = self . mark self . layer . append ( new_layer ) return ret def find ( self , index , a ): ret = [] for i in reversed ( range ( index )): ret . append ( self . word_list [ self . layer [ i ][ a ][ 0 ]]); a = self . layer [ i ][ a ][ 1 ]; return ret def connect ( a , b ): if len ( a ) != len ( b ): return False cnt = 0 for i in range ( len ( a )): if a [ i ] != b [ i ]: cnt += 1 return cnt == 1 def construct ( a , b ): ret = [] for ( u , fu ) in a . layer [ - 1 ]: for ( v , fv ) in b . layer [ - 1 ]: if u == v : a_list = a . find ( len ( a . layer ) - 1 , fu ) b_list = b . find ( len ( b . layer ) - 1 , fv ) a_list . reverse () a_list . append ( a . word_list [ u ]) ret . append ( a_list + b_list ) return ret class Solution ( object ): def findLadders ( self , beginWord , endWord , wordList ): \"\"\" :type beginWord: str :type endWord: str :type wordList: List[str] :rtype: List[List[str]] \"\"\" wordList = list ( set ( wordList )) if endWord not in wordList : return [] if endWord == beginWord : return [[ endWord ]] if connect ( beginWord , endWord ): return [[ beginWord , endWord ]] if beginWord not in wordList : wordList . append ( beginWord ) dictionary = {} for i , word in enumerate ( wordList ): dictionary [ word ] = i self . total_len = len ( wordList ) self . adj = [[] for i in range ( self . total_len )] for word in wordList : temp = list ( word ) for i in range ( len ( temp )): for j in 'abcdefghijklmnopqrstuvwxyz' : if temp [ i ] != j : x = temp [ i ] temp [ i ] = j new_word = '' . join ( temp ) if new_word in dictionary : self . adj [ dictionary [ word ]] . append ( dictionary [ new_word ]) temp [ i ] = x vis = [ 0 ] * len ( wordList ) tree_top = Tree ( wordList , beginWord , 1 , vis , self . adj ) tree_bottom = Tree ( wordList , endWord , 2 , vis , self . adj ) while True : if tree_top . expand (): return construct ( tree_top , tree_bottom ) if tree_bottom . expand (): return construct ( tree_top , tree_bottom ) if tree_top . finish and tree_bottom . finish : return [] return []","title":"Solution"},{"location":"competitive_programming/leetcode/174/","text":"174. Dungeon Game Problem Link Tutorial The knight should at least have 1 health and can only move to right and down. dp[i][j] means how many points are needed in order to rescue the princess from grid[i][j]. dp[i][j] = min(max(1, dp[i + 1][j] - dungeon[i][j]), max(1, dp[i][j + 1] - dungeon[i][j])) Solution class Solution ( object ): def calculateMinimumHP ( self , dungeon ): \"\"\" :type dungeon: List[List[int]] :rtype: int \"\"\" row_num = len ( dungeon ) col_num = len ( dungeon [ 0 ]) dp = [[ 0 ] * col_num for i in range ( row_num )] dp [ row_num - 1 ][ col_num - 1 ] = max ( 1 , - dungeon [ row_num - 1 ][ col_num - 1 ] + 1 ) for i in range ( row_num - 1 )[:: - 1 ]: dp [ i ][ col_num - 1 ] = max ( 1 , dp [ i + 1 ][ col_num - 1 ] - dungeon [ i ][ col_num - 1 ]) for i in range ( col_num - 1 )[:: - 1 ]: dp [ row_num - 1 ][ i ] = max ( 1 , dp [ row_num - 1 ][ i + 1 ] - dungeon [ row_num - 1 ][ i ]) for i in range ( row_num - 1 )[:: - 1 ]: for j in range ( col_num - 1 )[:: - 1 ]: a = max ( 1 , dp [ i + 1 ][ j ] - dungeon [ i ][ j ]) b = max ( 1 , dp [ i ][ j + 1 ] - dungeon [ i ][ j ]) dp [ i ][ j ] = min ( a , b ) return dp [ 0 ][ 0 ]","title":"174. Dungeon Game"},{"location":"competitive_programming/leetcode/174/#174-dungeon-game","text":"","title":"174. Dungeon Game"},{"location":"competitive_programming/leetcode/174/#problem-link","text":"","title":"Problem Link"},{"location":"competitive_programming/leetcode/174/#tutorial","text":"The knight should at least have 1 health and can only move to right and down. dp[i][j] means how many points are needed in order to rescue the princess from grid[i][j]. dp[i][j] = min(max(1, dp[i + 1][j] - dungeon[i][j]), max(1, dp[i][j + 1] - dungeon[i][j]))","title":"Tutorial"},{"location":"competitive_programming/leetcode/174/#solution","text":"class Solution ( object ): def calculateMinimumHP ( self , dungeon ): \"\"\" :type dungeon: List[List[int]] :rtype: int \"\"\" row_num = len ( dungeon ) col_num = len ( dungeon [ 0 ]) dp = [[ 0 ] * col_num for i in range ( row_num )] dp [ row_num - 1 ][ col_num - 1 ] = max ( 1 , - dungeon [ row_num - 1 ][ col_num - 1 ] + 1 ) for i in range ( row_num - 1 )[:: - 1 ]: dp [ i ][ col_num - 1 ] = max ( 1 , dp [ i + 1 ][ col_num - 1 ] - dungeon [ i ][ col_num - 1 ]) for i in range ( col_num - 1 )[:: - 1 ]: dp [ row_num - 1 ][ i ] = max ( 1 , dp [ row_num - 1 ][ i + 1 ] - dungeon [ row_num - 1 ][ i ]) for i in range ( row_num - 1 )[:: - 1 ]: for j in range ( col_num - 1 )[:: - 1 ]: a = max ( 1 , dp [ i + 1 ][ j ] - dungeon [ i ][ j ]) b = max ( 1 , dp [ i ][ j + 1 ] - dungeon [ i ][ j ]) dp [ i ][ j ] = min ( a , b ) return dp [ 0 ][ 0 ]","title":"Solution"},{"location":"competitive_programming/leetcode/212/","text":"212. Word Search II Problem Link Tutorial Use trie to store all the words. Then we do a DFS on the board, at each step of which we check whether the current path is a prefix of some words using the trie as a prunning method. Solution class TrieNode : def __init__ ( self ): self . isEnd = False self . children = {} def insert ( self , word ): cur = self for i in word : if i not in cur . children : cur . children [ i ] = TrieNode () cur = cur . children [ i ] cur . isEnd = True class Solution ( object ): def findWords ( self , board , words ): \"\"\" :type board: List[List[str]] :type words: List[str] :rtype: List[str] \"\"\" trie = TrieNode () for word in words : trie . insert ( word ) n = len ( board ) m = len ( board [ 0 ]) self . vis = [[ False for i in range ( m )] for x in range ( n )] self . ans = [] for i in range ( n ): for j in range ( m ): self . dfs ( board , i , j , [], trie ) return list ( set ( self . ans )) def dfs ( self , board , sx , sy , st , trie ): if sx < 0 or sx >= len ( board ) or sy < 0 or sy >= len ( board [ 0 ]): return if self . vis [ sx ][ sy ]: return if board [ sx ][ sy ] not in trie . children : return trie = trie . children [ board [ sx ][ sy ]] st . append ( board [ sx ][ sy ]) if trie . isEnd : self . ans . append ( '' . join ( st )) self . vis [ sx ][ sy ] = True self . dfs ( board , sx + 1 , sy , st , trie ) self . dfs ( board , sx - 1 , sy , st , trie ) self . dfs ( board , sx , sy + 1 , st , trie ) self . dfs ( board , sx , sy - 1 , st , trie ) self . vis [ sx ][ sy ] = False st . pop ()","title":"212. Word Search II"},{"location":"competitive_programming/leetcode/212/#212-word-search-ii","text":"","title":"212. Word Search II"},{"location":"competitive_programming/leetcode/212/#problem-link","text":"","title":"Problem Link"},{"location":"competitive_programming/leetcode/212/#tutorial","text":"Use trie to store all the words. Then we do a DFS on the board, at each step of which we check whether the current path is a prefix of some words using the trie as a prunning method.","title":"Tutorial"},{"location":"competitive_programming/leetcode/212/#solution","text":"class TrieNode : def __init__ ( self ): self . isEnd = False self . children = {} def insert ( self , word ): cur = self for i in word : if i not in cur . children : cur . children [ i ] = TrieNode () cur = cur . children [ i ] cur . isEnd = True class Solution ( object ): def findWords ( self , board , words ): \"\"\" :type board: List[List[str]] :type words: List[str] :rtype: List[str] \"\"\" trie = TrieNode () for word in words : trie . insert ( word ) n = len ( board ) m = len ( board [ 0 ]) self . vis = [[ False for i in range ( m )] for x in range ( n )] self . ans = [] for i in range ( n ): for j in range ( m ): self . dfs ( board , i , j , [], trie ) return list ( set ( self . ans )) def dfs ( self , board , sx , sy , st , trie ): if sx < 0 or sx >= len ( board ) or sy < 0 or sy >= len ( board [ 0 ]): return if self . vis [ sx ][ sy ]: return if board [ sx ][ sy ] not in trie . children : return trie = trie . children [ board [ sx ][ sy ]] st . append ( board [ sx ][ sy ]) if trie . isEnd : self . ans . append ( '' . join ( st )) self . vis [ sx ][ sy ] = True self . dfs ( board , sx + 1 , sy , st , trie ) self . dfs ( board , sx - 1 , sy , st , trie ) self . dfs ( board , sx , sy + 1 , st , trie ) self . dfs ( board , sx , sy - 1 , st , trie ) self . vis [ sx ][ sy ] = False st . pop ()","title":"Solution"},{"location":"competitive_programming/leetcode/215/","text":"215. Kth Largest Element in an Array Problem Link Tutorial Using an algorithm like quick sort, except that it do not recursively search both half of the array, but only one half. Because the kth element could only be on one of the two halves of the array. It would make the complexity from O(N log N) O(N log N) to O(N + N/2 + N/4 + ...) O(N + N/2 + N/4 + ...) = O(N) O(N) . This algorithm is called quick selector. Solution class Solution ( object ): def findKthLargest ( self , nums , k ): \"\"\" :type nums: List[int] :type k: int :rtype: int \"\"\" return qsort ( nums , k - 1 ) def qsort ( nums , k ): x = nums [ 0 ] l = 0 r = len ( nums ) - 1 while l < r : while l < r and nums [ r ] <= x : r -= 1 nums [ l ] = nums [ r ] while l < r and nums [ l ] >= x : l += 1 nums [ r ] = nums [ l ] nums [ l ] = x if l == k : return nums [ l ] if l > k : return qsort ( nums [: l ], k ) return qsort ( nums [ l + 1 :], k - l - 1 )","title":"215. Kth Largest Element in an Array"},{"location":"competitive_programming/leetcode/215/#215-kth-largest-element-in-an-array","text":"","title":"215. Kth Largest Element in an Array"},{"location":"competitive_programming/leetcode/215/#problem-link","text":"","title":"Problem Link"},{"location":"competitive_programming/leetcode/215/#tutorial","text":"Using an algorithm like quick sort, except that it do not recursively search both half of the array, but only one half. Because the kth element could only be on one of the two halves of the array. It would make the complexity from O(N log N) O(N log N) to O(N + N/2 + N/4 + ...) O(N + N/2 + N/4 + ...) = O(N) O(N) . This algorithm is called quick selector.","title":"Tutorial"},{"location":"competitive_programming/leetcode/215/#solution","text":"class Solution ( object ): def findKthLargest ( self , nums , k ): \"\"\" :type nums: List[int] :type k: int :rtype: int \"\"\" return qsort ( nums , k - 1 ) def qsort ( nums , k ): x = nums [ 0 ] l = 0 r = len ( nums ) - 1 while l < r : while l < r and nums [ r ] <= x : r -= 1 nums [ l ] = nums [ r ] while l < r and nums [ l ] >= x : l += 1 nums [ r ] = nums [ l ] nums [ l ] = x if l == k : return nums [ l ] if l > k : return qsort ( nums [: l ], k ) return qsort ( nums [ l + 1 :], k - l - 1 )","title":"Solution"},{"location":"competitive_programming/leetcode/220/","text":"220. Contains Duplicate III Problem Link Tutorial We can use multiset and binary search. But remember to user the member function lower bound instead of the independent function lower bound. The best solution is bucketing with O(n) complexity. We slide a window of length k. We just bucket all the nums by dividing t + 1. So each time if the new element falls in the same bucket with another value means true. If not, check its neighbour bucket's value. If satisfy the limits return true. Remember that at most one element in one neighbour bucket, otherwise it would return true earlier. Solution class Solution : def containsNearbyAlmostDuplicate ( self , nums , k , t ): if t < 0 : return False if k < 0 : return False n = len ( nums ) my_dict = {} for i in range ( n ): temp = nums [ i ] / ( t + 1 ) if temp in my_dict : return True if temp - 1 in my_dict and abs ( nums [ i ] - my_dict [ temp - 1 ]) <= t : return True if temp + 1 in my_dict and abs ( nums [ i ] - my_dict [ temp + 1 ]) <= t : return True my_dict [ temp ] = nums [ i ] if i >= k : my_dict . pop ( nums [ i - k ] / ( t + 1 )) return False","title":"220. Contains Duplicate III"},{"location":"competitive_programming/leetcode/220/#220-contains-duplicate-iii","text":"","title":"220. Contains Duplicate III"},{"location":"competitive_programming/leetcode/220/#problem-link","text":"","title":"Problem Link"},{"location":"competitive_programming/leetcode/220/#tutorial","text":"We can use multiset and binary search. But remember to user the member function lower bound instead of the independent function lower bound. The best solution is bucketing with O(n) complexity. We slide a window of length k. We just bucket all the nums by dividing t + 1. So each time if the new element falls in the same bucket with another value means true. If not, check its neighbour bucket's value. If satisfy the limits return true. Remember that at most one element in one neighbour bucket, otherwise it would return true earlier.","title":"Tutorial"},{"location":"competitive_programming/leetcode/220/#solution","text":"class Solution : def containsNearbyAlmostDuplicate ( self , nums , k , t ): if t < 0 : return False if k < 0 : return False n = len ( nums ) my_dict = {} for i in range ( n ): temp = nums [ i ] / ( t + 1 ) if temp in my_dict : return True if temp - 1 in my_dict and abs ( nums [ i ] - my_dict [ temp - 1 ]) <= t : return True if temp + 1 in my_dict and abs ( nums [ i ] - my_dict [ temp + 1 ]) <= t : return True my_dict [ temp ] = nums [ i ] if i >= k : my_dict . pop ( nums [ i - k ] / ( t + 1 )) return False","title":"Solution"},{"location":"competitive_programming/leetcode/23/","text":"23. Merge K sorted Lists Problem Link Tutorial Use priority queue to store the first element of each list. Then every time in a loop, pop one and push in the next one in the list. In python, priority queue is defaultly to pop the smallest element. If you want to pop the largest, just insert the negative value. If the comparing is complicated, just push in ((keys in order), elem), so that we not only have the entire element, but also the keys to compare with in a tuple. Solution # Definition for singly-linked list. # class ListNode(object): # def __init__(self, x): # self.val = x # self.next = None from Queue import PriorityQueue class Solution ( object ): def mergeKLists ( self , lists ): \"\"\" :type lists: List[ListNode] :rtype: ListNode \"\"\" q = PriorityQueue () for node in lists : if node : q . put (( node . val , node )) ret = p = ListNode ( None ) while q . qsize () > 0 : ( val , node ) = q . get () if node . next : q . put (( node . next . val , node . next )) p . next = node p = p . next return ret . next","title":"23. Merge K sorted Lists"},{"location":"competitive_programming/leetcode/23/#23-merge-k-sorted-lists","text":"","title":"23. Merge K sorted Lists"},{"location":"competitive_programming/leetcode/23/#problem-link","text":"","title":"Problem Link"},{"location":"competitive_programming/leetcode/23/#tutorial","text":"Use priority queue to store the first element of each list. Then every time in a loop, pop one and push in the next one in the list. In python, priority queue is defaultly to pop the smallest element. If you want to pop the largest, just insert the negative value. If the comparing is complicated, just push in ((keys in order), elem), so that we not only have the entire element, but also the keys to compare with in a tuple.","title":"Tutorial"},{"location":"competitive_programming/leetcode/23/#solution","text":"# Definition for singly-linked list. # class ListNode(object): # def __init__(self, x): # self.val = x # self.next = None from Queue import PriorityQueue class Solution ( object ): def mergeKLists ( self , lists ): \"\"\" :type lists: List[ListNode] :rtype: ListNode \"\"\" q = PriorityQueue () for node in lists : if node : q . put (( node . val , node )) ret = p = ListNode ( None ) while q . qsize () > 0 : ( val , node ) = q . get () if node . next : q . put (( node . next . val , node . next )) p . next = node p = p . next return ret . next","title":"Solution"},{"location":"competitive_programming/leetcode/32/","text":"32. Longest Valid Parentheses Problem Link Tutorial Use a stack for the sequence. If it is a \"(\" push its index in. If it is a \")\", check if the top element is a \"(\". If so pop it. Otherwise, push the \")\" index in. After we walked through the whole sequence. The stack is a list of the indices of the illegal characters. We just go through it to find the longest gap between two neighbours. Solution class Solution ( object ): def longestValidParentheses ( self , s ): \"\"\" :type s: str :rtype: int \"\"\" stk = [] for i , ch in enumerate ( s ): if ch == '(' : stk . append ( i ) elif stk and s [ stk [ - 1 ]] == '(' : stk . pop () else : stk . append ( i ) stk . append ( len ( s )) stk = [ - 1 ] + stk ret = 0 for i in range ( len ( stk ) - 1 ): ret = max ( ret , stk [ i + 1 ] - stk [ i ] - 1 ) return ret","title":"32. Longest Valid Parentheses"},{"location":"competitive_programming/leetcode/32/#32-longest-valid-parentheses","text":"","title":"32. Longest Valid Parentheses"},{"location":"competitive_programming/leetcode/32/#problem-link","text":"","title":"Problem Link"},{"location":"competitive_programming/leetcode/32/#tutorial","text":"Use a stack for the sequence. If it is a \"(\" push its index in. If it is a \")\", check if the top element is a \"(\". If so pop it. Otherwise, push the \")\" index in. After we walked through the whole sequence. The stack is a list of the indices of the illegal characters. We just go through it to find the longest gap between two neighbours.","title":"Tutorial"},{"location":"competitive_programming/leetcode/32/#solution","text":"class Solution ( object ): def longestValidParentheses ( self , s ): \"\"\" :type s: str :rtype: int \"\"\" stk = [] for i , ch in enumerate ( s ): if ch == '(' : stk . append ( i ) elif stk and s [ stk [ - 1 ]] == '(' : stk . pop () else : stk . append ( i ) stk . append ( len ( s )) stk = [ - 1 ] + stk ret = 0 for i in range ( len ( stk ) - 1 ): ret = max ( ret , stk [ i + 1 ] - stk [ i ] - 1 ) return ret","title":"Solution"},{"location":"competitive_programming/leetcode/321/","text":"321. Create Maximum Number Problem Link Tutorial The dynamic programming solution is rather straight forward. The greedy solution is like this. We enumerate how many digits we pick from each array. Each time we get the optimal respectively from two arrays, then merge them together. It is not possible that the overall optimal solution is from sub-optimal solutions for the two arrays. So this solution is valid. Then, the problem is how to select a optimal subarray of a certain length from the array and how to merge two arrays. Please see the code for details. Solution class Solution { int n , m ; public : vector < int > maxNumber ( vector < int >& nums1 , vector < int >& nums2 , int k ) { vector < int > ret = vector < int > ( k ); fill ( ret . begin (), ret . end (), 0 ); n = nums1 . size (); m = nums2 . size (); for ( int i = 0 ; i <= k ; i ++ ) { if ( n < i || m < k - i ) { continue ; } vector < int > a = select ( nums1 , i ); vector < int > b = select ( nums2 , k - i ); vector < int > c = merge ( a , b ); if ( lexicographical_compare ( ret . begin (), ret . end (), c . begin (), c . end ())) ret = c ; } return ret ; } vector < int > merge ( vector < int > & a , vector < int > & b ) { auto qa = deque < int > ( a . begin (), a . end ()); auto qb = deque < int > ( b . begin (), b . end ()); auto ret = vector < int > (); while ( ! ( qa . empty () && qb . empty ())) { if ( lexicographical_compare ( qa . begin (), qa . end (), qb . begin (), qb . end ())) { ret . push_back ( qb . front ()); qb . pop_front (); } else { ret . push_back ( qa . front ()); qa . pop_front (); } } return ret ; } vector < int > select ( vector < int > & nums , int k ) { vector < int > ret = vector < int > (); for ( int i = 0 ; i < nums . size (); i ++ ) { while ( ret . size () > 0 && ret [ ret . size () - 1 ] < nums [ i ] && k - ret . size () <= nums . size () - 1 - i ) ret . pop_back (); if ( ret . size () < k ) ret . push_back ( nums [ i ]); } return ret ; } };","title":"321. Create Maximum Number"},{"location":"competitive_programming/leetcode/321/#321-create-maximum-number","text":"","title":"321. Create Maximum Number"},{"location":"competitive_programming/leetcode/321/#problem-link","text":"","title":"Problem Link"},{"location":"competitive_programming/leetcode/321/#tutorial","text":"The dynamic programming solution is rather straight forward. The greedy solution is like this. We enumerate how many digits we pick from each array. Each time we get the optimal respectively from two arrays, then merge them together. It is not possible that the overall optimal solution is from sub-optimal solutions for the two arrays. So this solution is valid. Then, the problem is how to select a optimal subarray of a certain length from the array and how to merge two arrays. Please see the code for details.","title":"Tutorial"},{"location":"competitive_programming/leetcode/321/#solution","text":"class Solution { int n , m ; public : vector < int > maxNumber ( vector < int >& nums1 , vector < int >& nums2 , int k ) { vector < int > ret = vector < int > ( k ); fill ( ret . begin (), ret . end (), 0 ); n = nums1 . size (); m = nums2 . size (); for ( int i = 0 ; i <= k ; i ++ ) { if ( n < i || m < k - i ) { continue ; } vector < int > a = select ( nums1 , i ); vector < int > b = select ( nums2 , k - i ); vector < int > c = merge ( a , b ); if ( lexicographical_compare ( ret . begin (), ret . end (), c . begin (), c . end ())) ret = c ; } return ret ; } vector < int > merge ( vector < int > & a , vector < int > & b ) { auto qa = deque < int > ( a . begin (), a . end ()); auto qb = deque < int > ( b . begin (), b . end ()); auto ret = vector < int > (); while ( ! ( qa . empty () && qb . empty ())) { if ( lexicographical_compare ( qa . begin (), qa . end (), qb . begin (), qb . end ())) { ret . push_back ( qb . front ()); qb . pop_front (); } else { ret . push_back ( qa . front ()); qa . pop_front (); } } return ret ; } vector < int > select ( vector < int > & nums , int k ) { vector < int > ret = vector < int > (); for ( int i = 0 ; i < nums . size (); i ++ ) { while ( ret . size () > 0 && ret [ ret . size () - 1 ] < nums [ i ] && k - ret . size () <= nums . size () - 1 - i ) ret . pop_back (); if ( ret . size () < k ) ret . push_back ( nums [ i ]); } return ret ; } };","title":"Solution"},{"location":"competitive_programming/leetcode/363/","text":"363. Max Sum of Rectangle No Larger Than K Problem Given a 2-d array, with integer values (positive and negative). Given an integer k. Find the maximum sub-matrix sum <= k. Solution We can use dynamic programming to calculate the sums of the sub-matrices. Then by enumerating all the sub-matrices, we can get the answer. Complexity O(n^2m^2). An improve would be only enumerate the top, bottom and right border of the sub-matrix. Since we want For the left border we just select the left that maximize sum[right] - sum[left] subject to <= k, where sum is the sum of the sub-matrix with left=0 to right=index and the current top and bottom border. To maximize it, we can use binary search tree. It is equivalent to maximizing sum[left] subject to >= sum[right] - k. We insert the sum values into the tree, every time we query it the lower_bound of sum[right] - k, as we iterate all the right. The complexity is O(n^2mlogm). Note: Python doesn't have a built-in binary search tree. We need to write our own. Code class Node : def __init__ ( self , value ): self . left = None self . right = None self . val = value class BinarySearchTree : def __init__ ( self ): self . root = None def lower_bound ( self , value ): node = self . root ret = None while node is not None : if value < node . val : ret = node . val node = node . left elif value == node . val : ret = node . val return ret else : node = node . right return ret def insert ( self , value ): if self . root is None : self . root = Node ( value ) return last_node = None node = self . root while node is not None : last_node = node if value < node . val : node = node . left else : node = node . right if value < last_node . val : last_node . left = Node ( value ) else : last_node . right = Node ( value ) class Solution : def maxSumSubmatrix ( self , matrix : List [ List [ int ]], k : int ) -> int : if len ( matrix ) > len ( matrix [ 0 ]): new_matrix = [] for i in range ( len ( matrix [ 0 ])): new_matrix . append ([]) for j in range ( len ( matrix )): new_matrix [ i ] . append ( matrix [ j ][ i ]) matrix = new_matrix num_rows = len ( matrix ) num_cols = len ( matrix [ 0 ]) sum_matrix = [[ 0 for j in range ( num_cols + 1 )] for i in range ( num_rows + 1 )] for i in range ( num_rows ): for j in range ( num_cols ): sum_matrix [ i + 1 ][ j + 1 ] = matrix [ i ][ j ] + sum_matrix [ i + 1 ][ j ] + sum_matrix [ i ][ j + 1 ] - sum_matrix [ i ][ j ] ret = - int ( 1 << 30 ) for height in range ( 1 , num_rows + 1 ): for top in range ( 1 , num_rows - height + 1 + 1 ): bottom = top + height - 1 bst = BinarySearchTree () bst . insert ( 0 ) for right in range ( 1 , num_cols + 1 ): current_sum = sum_matrix [ bottom ][ right ] - sum_matrix [ top - 1 ][ right ] left_sum = bst . lower_bound ( current_sum - k ) # print(right, current_sum, left_sum) if left_sum is not None : ret = max ( ret , current_sum - left_sum ) bst . insert ( current_sum ) return ret","title":"363. Max Sum of Rectangle No Larger Than K"},{"location":"competitive_programming/leetcode/363/#363-max-sum-of-rectangle-no-larger-than-k","text":"","title":"363. Max Sum of Rectangle No Larger Than K"},{"location":"competitive_programming/leetcode/363/#problem","text":"Given a 2-d array, with integer values (positive and negative). Given an integer k. Find the maximum sub-matrix sum <= k.","title":"Problem"},{"location":"competitive_programming/leetcode/363/#solution","text":"We can use dynamic programming to calculate the sums of the sub-matrices. Then by enumerating all the sub-matrices, we can get the answer. Complexity O(n^2m^2). An improve would be only enumerate the top, bottom and right border of the sub-matrix. Since we want For the left border we just select the left that maximize sum[right] - sum[left] subject to <= k, where sum is the sum of the sub-matrix with left=0 to right=index and the current top and bottom border. To maximize it, we can use binary search tree. It is equivalent to maximizing sum[left] subject to >= sum[right] - k. We insert the sum values into the tree, every time we query it the lower_bound of sum[right] - k, as we iterate all the right. The complexity is O(n^2mlogm). Note: Python doesn't have a built-in binary search tree. We need to write our own.","title":"Solution"},{"location":"competitive_programming/leetcode/363/#code","text":"class Node : def __init__ ( self , value ): self . left = None self . right = None self . val = value class BinarySearchTree : def __init__ ( self ): self . root = None def lower_bound ( self , value ): node = self . root ret = None while node is not None : if value < node . val : ret = node . val node = node . left elif value == node . val : ret = node . val return ret else : node = node . right return ret def insert ( self , value ): if self . root is None : self . root = Node ( value ) return last_node = None node = self . root while node is not None : last_node = node if value < node . val : node = node . left else : node = node . right if value < last_node . val : last_node . left = Node ( value ) else : last_node . right = Node ( value ) class Solution : def maxSumSubmatrix ( self , matrix : List [ List [ int ]], k : int ) -> int : if len ( matrix ) > len ( matrix [ 0 ]): new_matrix = [] for i in range ( len ( matrix [ 0 ])): new_matrix . append ([]) for j in range ( len ( matrix )): new_matrix [ i ] . append ( matrix [ j ][ i ]) matrix = new_matrix num_rows = len ( matrix ) num_cols = len ( matrix [ 0 ]) sum_matrix = [[ 0 for j in range ( num_cols + 1 )] for i in range ( num_rows + 1 )] for i in range ( num_rows ): for j in range ( num_cols ): sum_matrix [ i + 1 ][ j + 1 ] = matrix [ i ][ j ] + sum_matrix [ i + 1 ][ j ] + sum_matrix [ i ][ j + 1 ] - sum_matrix [ i ][ j ] ret = - int ( 1 << 30 ) for height in range ( 1 , num_rows + 1 ): for top in range ( 1 , num_rows - height + 1 + 1 ): bottom = top + height - 1 bst = BinarySearchTree () bst . insert ( 0 ) for right in range ( 1 , num_cols + 1 ): current_sum = sum_matrix [ bottom ][ right ] - sum_matrix [ top - 1 ][ right ] left_sum = bst . lower_bound ( current_sum - k ) # print(right, current_sum, left_sum) if left_sum is not None : ret = max ( ret , current_sum - left_sum ) bst . insert ( current_sum ) return ret","title":"Code"},{"location":"competitive_programming/leetcode/398/","text":"398. Random Pick Index Problem Given an array, go through it for once to find a target value and output the index. If there are ties, pick each one with equal probability. Solution Pure reservoir sampling problem. Algorithm Reservoir sampling Given an array of length unknown, only going through it for once and pick m out of it with equal probability. We keep a set of size m. As we go through the first m elements, we just add them to the set. If we arrived at the ith (i > m) element, since we don't know the length, this one could be the last element in the array. If it is the last, we have to pick it with a probability of m/i, which is the equal probability for each element. Since we don't know, we just treat it as the last. If it is not picked, we just move to the next one. If it is picked, we replace one of the m elements in the set with equal probability. We keep doing this until we get to the end of the array. No matter where we stop, we always have the equal probability to pick each one. Prove with mathematical induction: If the m elements we picked after going through the first (i-1) elements is m/(i-1) each, the probability of keeping one of these m elements in the set instead of being replaced by the new one is: (1-m/i) + (m/i)*(1/m) = m/i. Since the condition is satisfied with i=m, so all the following should be satisfied. Proved. A variation of the problem would be, We can only pick the elements satisfying certain condition, for example, only picking prime numbers in an array of integers with equal probability. We just change the definition of i from the number of elements we have gone through to the number of elements we have gone through and satisfiying the condition. Code import random class Solution : def __init__ ( self , nums : List [ int ]): self . nums = nums def pick ( self , target : int ) -> int : count = 0 ret = - 1 for index , value in enumerate ( self . nums ): if value == target : count += 1 if random . random () < 1.0 / count : ret = index return ret # Your Solution object will be instantiated and called as such: # obj = Solution(nums) # param_1 = obj.pick(target)","title":"398. Random Pick Index"},{"location":"competitive_programming/leetcode/398/#398-random-pick-index","text":"","title":"398. Random Pick Index"},{"location":"competitive_programming/leetcode/398/#problem","text":"Given an array, go through it for once to find a target value and output the index. If there are ties, pick each one with equal probability.","title":"Problem"},{"location":"competitive_programming/leetcode/398/#solution","text":"Pure reservoir sampling problem.","title":"Solution"},{"location":"competitive_programming/leetcode/398/#algorithm","text":"","title":"Algorithm"},{"location":"competitive_programming/leetcode/398/#reservoir-sampling","text":"Given an array of length unknown, only going through it for once and pick m out of it with equal probability. We keep a set of size m. As we go through the first m elements, we just add them to the set. If we arrived at the ith (i > m) element, since we don't know the length, this one could be the last element in the array. If it is the last, we have to pick it with a probability of m/i, which is the equal probability for each element. Since we don't know, we just treat it as the last. If it is not picked, we just move to the next one. If it is picked, we replace one of the m elements in the set with equal probability. We keep doing this until we get to the end of the array. No matter where we stop, we always have the equal probability to pick each one. Prove with mathematical induction: If the m elements we picked after going through the first (i-1) elements is m/(i-1) each, the probability of keeping one of these m elements in the set instead of being replaced by the new one is: (1-m/i) + (m/i)*(1/m) = m/i. Since the condition is satisfied with i=m, so all the following should be satisfied. Proved. A variation of the problem would be, We can only pick the elements satisfying certain condition, for example, only picking prime numbers in an array of integers with equal probability. We just change the definition of i from the number of elements we have gone through to the number of elements we have gone through and satisfiying the condition.","title":"Reservoir sampling"},{"location":"competitive_programming/leetcode/398/#code","text":"import random class Solution : def __init__ ( self , nums : List [ int ]): self . nums = nums def pick ( self , target : int ) -> int : count = 0 ret = - 1 for index , value in enumerate ( self . nums ): if value == target : count += 1 if random . random () < 1.0 / count : ret = index return ret # Your Solution object will be instantiated and called as such: # obj = Solution(nums) # param_1 = obj.pick(target)","title":"Code"},{"location":"competitive_programming/leetcode/4/","text":"4. Median of Two Sorted Arrays Problem Link Tutorial First, I thought binary search the median value t t , and every time see if there is correct number of items less than t t altogether in both arrays. However, it involves another two binary searches to locate the position of t t in both arrays, within the binary search of t t , It make the complexity rise to O(log(log(n+m))) O(log(log(n+m))) . The best way is to binary search a divide position in the longer array. Imagine, we divide the two arrays into 4 halves, all the elements in the left two halves are less than the right two halves, this division would help us locate the median. Every time we have a divide position in the longer array, we can directly calculate where to divide in the second array, since the total number of elements in the left halves should equal to that of the right halves. Then, we check whether this division is valid, by comparing the right most elements in the left halves and the left most elements in the right halves. The complexity is O(log(m+n)) O(log(m+n)) . Solution class Solution ( object ): def findMedianSortedArrays ( self , nums1 , nums2 ): \"\"\" :type nums1: List[int] :type nums2: List[int] :rtype: float \"\"\" if len ( nums1 ) < len ( nums2 ): nums1 , nums2 = nums2 , nums1 self . n = len ( nums1 ) + len ( nums2 ) if not nums2 : return ( nums1 [( self . n + 1 ) / 2 - 1 ] + nums1 [ self . n / 2 ]) / 2.0 l = 0 r = len ( nums1 ) while l < r : mid = ( l + r ) / 2 if self . ok ( mid , nums1 , nums2 ): r = mid else : l = mid + 1 l1 , r1 = self . get_lr ( nums1 , l ) l2 , r2 = self . get_lr ( nums2 , self . n / 2 - l ) if self . n % 2 == 1 : return min ( r1 , r2 ) return ( max ( l1 , l2 ) + min ( r1 , r2 )) / 2.0 def ok ( self , a , nums1 , nums2 ): b = self . n / 2 - a if b > len ( nums2 ): return False if b < 0 : return True l1 , r1 = self . get_lr ( nums1 , a ) l2 , r2 = self . get_lr ( nums2 , b ) if l2 > r1 : return False return True def get_lr ( self , nums , n ): l = nums [ n - 1 ] if n != 0 else - float ( 'inf' ) r = nums [ n ] if n != len ( nums ) else float ( 'inf' ) return l , r","title":"4. Median of Two Sorted Arrays"},{"location":"competitive_programming/leetcode/4/#4-median-of-two-sorted-arrays","text":"","title":"4. Median of Two Sorted Arrays"},{"location":"competitive_programming/leetcode/4/#problem-link","text":"","title":"Problem Link"},{"location":"competitive_programming/leetcode/4/#tutorial","text":"First, I thought binary search the median value t t , and every time see if there is correct number of items less than t t altogether in both arrays. However, it involves another two binary searches to locate the position of t t in both arrays, within the binary search of t t , It make the complexity rise to O(log(log(n+m))) O(log(log(n+m))) . The best way is to binary search a divide position in the longer array. Imagine, we divide the two arrays into 4 halves, all the elements in the left two halves are less than the right two halves, this division would help us locate the median. Every time we have a divide position in the longer array, we can directly calculate where to divide in the second array, since the total number of elements in the left halves should equal to that of the right halves. Then, we check whether this division is valid, by comparing the right most elements in the left halves and the left most elements in the right halves. The complexity is O(log(m+n)) O(log(m+n)) .","title":"Tutorial"},{"location":"competitive_programming/leetcode/4/#solution","text":"class Solution ( object ): def findMedianSortedArrays ( self , nums1 , nums2 ): \"\"\" :type nums1: List[int] :type nums2: List[int] :rtype: float \"\"\" if len ( nums1 ) < len ( nums2 ): nums1 , nums2 = nums2 , nums1 self . n = len ( nums1 ) + len ( nums2 ) if not nums2 : return ( nums1 [( self . n + 1 ) / 2 - 1 ] + nums1 [ self . n / 2 ]) / 2.0 l = 0 r = len ( nums1 ) while l < r : mid = ( l + r ) / 2 if self . ok ( mid , nums1 , nums2 ): r = mid else : l = mid + 1 l1 , r1 = self . get_lr ( nums1 , l ) l2 , r2 = self . get_lr ( nums2 , self . n / 2 - l ) if self . n % 2 == 1 : return min ( r1 , r2 ) return ( max ( l1 , l2 ) + min ( r1 , r2 )) / 2.0 def ok ( self , a , nums1 , nums2 ): b = self . n / 2 - a if b > len ( nums2 ): return False if b < 0 : return True l1 , r1 = self . get_lr ( nums1 , a ) l2 , r2 = self . get_lr ( nums2 , b ) if l2 > r1 : return False return True def get_lr ( self , nums , n ): l = nums [ n - 1 ] if n != 0 else - float ( 'inf' ) r = nums [ n ] if n != len ( nums ) else float ( 'inf' ) return l , r","title":"Solution"},{"location":"competitive_programming/leetcode/440/","text":"440. Kth Smallest in Lexicographical Order Problem Link Tutorial Imagine this problem as a problem of walking on a tree, the root has children 1~9, 1 has children 10~19 and so on. All the nodes are less than n. The pre-order traversal of the tree is the lexicographcal order of all the numbers. So now we stand at node 1 and travel (k-1) times. Then the node we standing on is the answer. Everytime we will move to the siblings on the right handside, if we have enough moves to travel all the nodes in the current subtree. Otherwise we go to the first child and do the same thing. Repeat like this until we use up all the moves. We can easily see it on the tree, everytime we travel to the right, ans should be updated by ans + 1. Everytime we travel to the first child, the ans should be updated to ans * 10. Now let's see how to count how many nodes in the current subtree. Just count the nodes with each depth and add them up. It should not be hard since each layer is a continuous sequence of integers. Solution class Solution ( object ): def findKthNumber ( self , n , k ): \"\"\" :type n: int :type k: int :rtype: int \"\"\" ret = 1 k -= 1 while k > 0 : a = ret b = ret + 1 temp_sum = 0 while a <= n : temp_sum += min ( b - 1 , n ) - ( a - 1 ) b *= 10 a *= 10 if k >= temp_sum : ret += 1 k -= temp_sum else : ret *= 10 k -= 1 return ret","title":"440. Kth Smallest in Lexicographical Order"},{"location":"competitive_programming/leetcode/440/#440-kth-smallest-in-lexicographical-order","text":"","title":"440. Kth Smallest in Lexicographical Order"},{"location":"competitive_programming/leetcode/440/#problem-link","text":"","title":"Problem Link"},{"location":"competitive_programming/leetcode/440/#tutorial","text":"Imagine this problem as a problem of walking on a tree, the root has children 1~9, 1 has children 10~19 and so on. All the nodes are less than n. The pre-order traversal of the tree is the lexicographcal order of all the numbers. So now we stand at node 1 and travel (k-1) times. Then the node we standing on is the answer. Everytime we will move to the siblings on the right handside, if we have enough moves to travel all the nodes in the current subtree. Otherwise we go to the first child and do the same thing. Repeat like this until we use up all the moves. We can easily see it on the tree, everytime we travel to the right, ans should be updated by ans + 1. Everytime we travel to the first child, the ans should be updated to ans * 10. Now let's see how to count how many nodes in the current subtree. Just count the nodes with each depth and add them up. It should not be hard since each layer is a continuous sequence of integers.","title":"Tutorial"},{"location":"competitive_programming/leetcode/440/#solution","text":"class Solution ( object ): def findKthNumber ( self , n , k ): \"\"\" :type n: int :type k: int :rtype: int \"\"\" ret = 1 k -= 1 while k > 0 : a = ret b = ret + 1 temp_sum = 0 while a <= n : temp_sum += min ( b - 1 , n ) - ( a - 1 ) b *= 10 a *= 10 if k >= temp_sum : ret += 1 k -= temp_sum else : ret *= 10 k -= 1 return ret","title":"Solution"},{"location":"competitive_programming/leetcode/465/","text":"465. Optimal Account Balancing Problem Given a list of transactions as a list of triplets: (a, b, c), meaning a give b an amount of c dollars. Now we want to settle all the debt with the minimum number of transactions. For example, (0, 1, 5) (1, 2, 5) can be settled with one transaction (2, 0, 5). We only need return one integer: the minimum number of transactions needed. Solution We don't need to consider the transaction graph. Imagine during settling the debt, everyone who need to return money to others just put those money in a pool. The people who should receive money from others just take from that pool. After this, all debt are settled without knowing the original transaction graph. First, we calculate how much money each person owns (can be positive or negative). Then, we just use DFS to settle the debt. One person will return all his debt to another person. The DFS will search every choice of choosing the person. Then we start to search the choices of the next person. One concern is, what if the optimal solution is not for a person returning all his debt to another person, but returning his debt to multiple people? We can always find an equivalent case in our search space. For example, if the optimial solution is for a return money to b and to c. We can find a equivalent in our search space for a to return all the money to b, and b will return the extra amount to c. The 2 solutions both take 2 transactions to fiinsh. Code import collections class Solution : def __init__ ( self , * args , ** kwargs ): super () . __init__ ( * args , ** kwargs ) self . num_people = 0 self . debt = [] def cal_debt ( self , transactions ): temp = collections . defaultdict ( lambda : 0 ) for transaction in transactions : temp [ transaction [ 0 ]] += transaction [ 2 ] temp [ transaction [ 1 ]] -= transaction [ 2 ] for key , value in temp . items (): self . debt . append ( value ) self . num_people = len ( self . debt ) def dfs ( self , current_id ): while ( current_id < self . num_people and self . debt [ current_id ] == 0 ): current_id += 1 if current_id >= self . num_people : return 0 ret = self . num_people * self . num_people for next_id in range ( current_id + 1 , self . num_people ): if self . debt [ current_id ] * self . debt [ next_id ] < 0 : self . debt [ next_id ] += self . debt [ current_id ] ret = min ( ret , self . dfs ( current_id + 1 ) + 1 ) self . debt [ next_id ] -= self . debt [ current_id ] return ret def minTransfers ( self , transactions : List [ List [ int ]]) -> int : self . cal_debt ( transactions ) return self . dfs ( 0 )","title":"465. Optimal Account Balancing"},{"location":"competitive_programming/leetcode/465/#465-optimal-account-balancing","text":"","title":"465. Optimal Account Balancing"},{"location":"competitive_programming/leetcode/465/#problem","text":"Given a list of transactions as a list of triplets: (a, b, c), meaning a give b an amount of c dollars. Now we want to settle all the debt with the minimum number of transactions. For example, (0, 1, 5) (1, 2, 5) can be settled with one transaction (2, 0, 5). We only need return one integer: the minimum number of transactions needed.","title":"Problem"},{"location":"competitive_programming/leetcode/465/#solution","text":"We don't need to consider the transaction graph. Imagine during settling the debt, everyone who need to return money to others just put those money in a pool. The people who should receive money from others just take from that pool. After this, all debt are settled without knowing the original transaction graph. First, we calculate how much money each person owns (can be positive or negative). Then, we just use DFS to settle the debt. One person will return all his debt to another person. The DFS will search every choice of choosing the person. Then we start to search the choices of the next person. One concern is, what if the optimal solution is not for a person returning all his debt to another person, but returning his debt to multiple people? We can always find an equivalent case in our search space. For example, if the optimial solution is for a return money to b and to c. We can find a equivalent in our search space for a to return all the money to b, and b will return the extra amount to c. The 2 solutions both take 2 transactions to fiinsh.","title":"Solution"},{"location":"competitive_programming/leetcode/465/#code","text":"import collections class Solution : def __init__ ( self , * args , ** kwargs ): super () . __init__ ( * args , ** kwargs ) self . num_people = 0 self . debt = [] def cal_debt ( self , transactions ): temp = collections . defaultdict ( lambda : 0 ) for transaction in transactions : temp [ transaction [ 0 ]] += transaction [ 2 ] temp [ transaction [ 1 ]] -= transaction [ 2 ] for key , value in temp . items (): self . debt . append ( value ) self . num_people = len ( self . debt ) def dfs ( self , current_id ): while ( current_id < self . num_people and self . debt [ current_id ] == 0 ): current_id += 1 if current_id >= self . num_people : return 0 ret = self . num_people * self . num_people for next_id in range ( current_id + 1 , self . num_people ): if self . debt [ current_id ] * self . debt [ next_id ] < 0 : self . debt [ next_id ] += self . debt [ current_id ] ret = min ( ret , self . dfs ( current_id + 1 ) + 1 ) self . debt [ next_id ] -= self . debt [ current_id ] return ret def minTransfers ( self , transactions : List [ List [ int ]]) -> int : self . cal_debt ( transactions ) return self . dfs ( 0 )","title":"Code"},{"location":"competitive_programming/leetcode/493/","text":"490. Reverse Pair Problem Link Tutorial First, do the discretization. The discretization array should taken into account both nums[i] and nums[i] * 2. Then, insert the elements into binary indexed tree from left. Before inserting nums[i], we should check how many elements in the binary indexed tree is greater than nums[i] * 2, and add it to the final answer. From this problem, we can generalize the discretization method. It can discretize not only the elements of an array, but also some other elements together and keep their relations (greater, less). Note: Multiset will cause TLE since std::distance would take linear time to the size of the multiset. Solution class Discrete : def __init__ ( self , f ): self . f = list ( set ( f )) self . f . sort () def index ( self , a ): import bisect return bisect . bisect_left ( self . f , a ) class BITree : def __init__ ( self , n ): self . f = [ 0 ] * ( n + 3 ) self . n = n + 2 def sum ( self , pos = None ): if not pos : i = self . n else : i = pos s = 0 #initialize result while i > 0 : s += self . f [ i ] i -= i & ( - i ) return s def update ( self , pos , value ): i = pos while i <= self . n : self . f [ i ] += value i += i & ( - i ) class Solution ( object ): def reversePairs ( self , nums ): \"\"\" :type nums: List[int] :rtype: int \"\"\" nums2 = nums + list ( map ( lambda x : x * 2 , nums )) d = Discrete ( nums2 ) bit = BITree ( len ( d . f )) ret = 0 for x in nums : index = d . index ( x ) + 1 ret += bit . sum () - bit . sum ( d . index ( x * 2 ) + 1 ) bit . update ( index , 1 ) return ret #print(Solution().reversePairs([-5,-5])) #print(Solution().reversePairs([1,3,2,3,1])) #print(Solution().reversePairs([])) #print(Solution().reversePairs([2,4,3,5,1])) #define d(x) #define LL long long #define MAX_N (int(5e4 + 10) * 2) struct BIT { LL binary_indexed_tree [ MAX_N ]; void init () { memset ( binary_indexed_tree , 0 , sizeof ( binary_indexed_tree )); } int low_bit ( int x ) { return x & ( - x ); } void add ( int pos , LL val ) { for ( int i = pos ; i < MAX_N ; i += low_bit ( i )) { binary_indexed_tree [ i ] += val ; } } LL sum ( int pos ) { LL ret = 0 ; for ( int i = pos ; i > 0 ; i -= low_bit ( i )) { ret += binary_indexed_tree [ i ]; } return ret ; } }; class Solution { public : int reversePairs ( vector < int >& nums ) { vector < long long > discrete = vector < long long > (); for ( int i = 0 ; i < ( int ) nums . size (); i ++ ) { discrete . push_back ( nums [ i ]); discrete . push_back ( nums [ i ] * 2L L ); } sort ( discrete . begin (), discrete . end ()); discrete . resize ( std :: distance ( discrete . begin (), unique ( discrete . begin (), discrete . end ()))); BIT bit = BIT (); bit . init (); int ret = 0 ; for ( int i = 0 ; i < ( int ) nums . size (); i ++ ) { long long a = lower_bound ( discrete . begin (), discrete . end (), nums [ i ]) - discrete . begin () + 1 ; long long a2 = lower_bound ( discrete . begin (), discrete . end (), nums [ i ] * 2L L ) - discrete . begin () + 1 ; ret += bit . sum ( MAX_N - 1 ) - bit . sum ( a2 ); bit . add ( a , 1 ); d ( cout << a2 << endl ); } return ret ; } };","title":"490. Reverse Pair"},{"location":"competitive_programming/leetcode/493/#490-reverse-pair","text":"","title":"490. Reverse Pair"},{"location":"competitive_programming/leetcode/493/#problem-link","text":"","title":"Problem Link"},{"location":"competitive_programming/leetcode/493/#tutorial","text":"First, do the discretization. The discretization array should taken into account both nums[i] and nums[i] * 2. Then, insert the elements into binary indexed tree from left. Before inserting nums[i], we should check how many elements in the binary indexed tree is greater than nums[i] * 2, and add it to the final answer. From this problem, we can generalize the discretization method. It can discretize not only the elements of an array, but also some other elements together and keep their relations (greater, less). Note: Multiset will cause TLE since std::distance would take linear time to the size of the multiset.","title":"Tutorial"},{"location":"competitive_programming/leetcode/493/#solution","text":"class Discrete : def __init__ ( self , f ): self . f = list ( set ( f )) self . f . sort () def index ( self , a ): import bisect return bisect . bisect_left ( self . f , a ) class BITree : def __init__ ( self , n ): self . f = [ 0 ] * ( n + 3 ) self . n = n + 2 def sum ( self , pos = None ): if not pos : i = self . n else : i = pos s = 0 #initialize result while i > 0 : s += self . f [ i ] i -= i & ( - i ) return s def update ( self , pos , value ): i = pos while i <= self . n : self . f [ i ] += value i += i & ( - i ) class Solution ( object ): def reversePairs ( self , nums ): \"\"\" :type nums: List[int] :rtype: int \"\"\" nums2 = nums + list ( map ( lambda x : x * 2 , nums )) d = Discrete ( nums2 ) bit = BITree ( len ( d . f )) ret = 0 for x in nums : index = d . index ( x ) + 1 ret += bit . sum () - bit . sum ( d . index ( x * 2 ) + 1 ) bit . update ( index , 1 ) return ret #print(Solution().reversePairs([-5,-5])) #print(Solution().reversePairs([1,3,2,3,1])) #print(Solution().reversePairs([])) #print(Solution().reversePairs([2,4,3,5,1])) #define d(x) #define LL long long #define MAX_N (int(5e4 + 10) * 2) struct BIT { LL binary_indexed_tree [ MAX_N ]; void init () { memset ( binary_indexed_tree , 0 , sizeof ( binary_indexed_tree )); } int low_bit ( int x ) { return x & ( - x ); } void add ( int pos , LL val ) { for ( int i = pos ; i < MAX_N ; i += low_bit ( i )) { binary_indexed_tree [ i ] += val ; } } LL sum ( int pos ) { LL ret = 0 ; for ( int i = pos ; i > 0 ; i -= low_bit ( i )) { ret += binary_indexed_tree [ i ]; } return ret ; } }; class Solution { public : int reversePairs ( vector < int >& nums ) { vector < long long > discrete = vector < long long > (); for ( int i = 0 ; i < ( int ) nums . size (); i ++ ) { discrete . push_back ( nums [ i ]); discrete . push_back ( nums [ i ] * 2L L ); } sort ( discrete . begin (), discrete . end ()); discrete . resize ( std :: distance ( discrete . begin (), unique ( discrete . begin (), discrete . end ()))); BIT bit = BIT (); bit . init (); int ret = 0 ; for ( int i = 0 ; i < ( int ) nums . size (); i ++ ) { long long a = lower_bound ( discrete . begin (), discrete . end (), nums [ i ]) - discrete . begin () + 1 ; long long a2 = lower_bound ( discrete . begin (), discrete . end (), nums [ i ] * 2L L ) - discrete . begin () + 1 ; ret += bit . sum ( MAX_N - 1 ) - bit . sum ( a2 ); bit . add ( a , 1 ); d ( cout << a2 << endl ); } return ret ; } };","title":"Solution"},{"location":"competitive_programming/leetcode/530/","text":"530. Minimum Absolute Difference in BST Problem Link Tutorial The in-order of a BST is the increasing order of its nodes. So we just find the in-order of the tree and get the minimum distance of two adjacent nodes. Solution from collections import deque class Solution ( object ): def getMinimumDifference ( self , root ): \"\"\" :type root: TreeNode :rtype: int \"\"\" self . q = deque () self . ans = float ( \"inf\" ) self . dfs ( root ) return self . ans def dfs ( self , root ): if not root : return self . dfs ( root . left ) self . q . append ( root . val ) if len ( self . q ) > 2 : self . q . popleft () self . update () self . dfs ( root . right ) def update ( self ): if len ( self . q ) != 2 : return self . ans = min ( self . ans , abs ( self . q [ 0 ] - self . q [ 1 ]))","title":"530. Minimum Absolute Difference in BST"},{"location":"competitive_programming/leetcode/530/#530-minimum-absolute-difference-in-bst","text":"","title":"530. Minimum Absolute Difference in BST"},{"location":"competitive_programming/leetcode/530/#problem-link","text":"","title":"Problem Link"},{"location":"competitive_programming/leetcode/530/#tutorial","text":"The in-order of a BST is the increasing order of its nodes. So we just find the in-order of the tree and get the minimum distance of two adjacent nodes.","title":"Tutorial"},{"location":"competitive_programming/leetcode/530/#solution","text":"from collections import deque class Solution ( object ): def getMinimumDifference ( self , root ): \"\"\" :type root: TreeNode :rtype: int \"\"\" self . q = deque () self . ans = float ( \"inf\" ) self . dfs ( root ) return self . ans def dfs ( self , root ): if not root : return self . dfs ( root . left ) self . q . append ( root . val ) if len ( self . q ) > 2 : self . q . popleft () self . update () self . dfs ( root . right ) def update ( self ): if len ( self . q ) != 2 : return self . ans = min ( self . ans , abs ( self . q [ 0 ] - self . q [ 1 ]))","title":"Solution"},{"location":"competitive_programming/leetcode/546/","text":"546. Remove Boxes Problem Link Tutorial dp[l][r][k] means the maximum value of interval [l, r] with k repeating characters of boxes[r] at the back after r. The equation is dp(l, r, k) = max(dp(l, i, k + 1) + dp(i + 1, r - 1, 0)) for boxes[i] == boxes[r]. It means we remove [i+1, r - 1] first, and remove the repeating characters at the back with boxes[i] together. Solution #include <bits/stdc++.h> using namespace std ; class Solution { int n ; vector < int > boxes ; public : int removeBoxes ( vector < int >& boxes ) { int dp [ 100 ][ 100 ][ 100 ]; memset ( dp , -1 , sizeof ( dp )); n = boxes . size (); this -> boxes = boxes ; int ans = dfs ( 0 , n - 1 , 0 , dp ); return ans ; } int sqr ( int a ) { return a * a ; } int dfs ( int l , int r , int k , int dp [ 100 ][ 100 ][ 100 ]) { if ( l > r ) { return 0 ; } if ( dp [ l ][ r ][ k ] != -1 ) { return dp [ l ][ r ][ k ]; } int ret = 0 ; if ( r - 1 >= 0 && boxes [ r - 1 ] == boxes [ r ]) { ret = dfs ( l , r - 1 , k + 1 , dp ); dp [ l ][ r ][ k ] = ret ; return ret ; } ret = dfs ( l , r - 1 , 0 , dp ) + sqr ( k + 1 ); for ( int i = l ; i < r ; i ++ ) { if ( boxes [ i ] != boxes [ r ]) continue ; ret = max ( ret , dfs ( l , i , k + 1 , dp ) + dfs ( i + 1 , r - 1 , 0 , dp )); } dp [ l ][ r ][ k ] = ret ; //printf(\"%d %d %d %d\\n\", l, r, k, ret); return ret ; } };","title":"546. Remove Boxes"},{"location":"competitive_programming/leetcode/546/#546-remove-boxes","text":"","title":"546. Remove Boxes"},{"location":"competitive_programming/leetcode/546/#problem-link","text":"","title":"Problem Link"},{"location":"competitive_programming/leetcode/546/#tutorial","text":"dp[l][r][k] means the maximum value of interval [l, r] with k repeating characters of boxes[r] at the back after r. The equation is dp(l, r, k) = max(dp(l, i, k + 1) + dp(i + 1, r - 1, 0)) for boxes[i] == boxes[r]. It means we remove [i+1, r - 1] first, and remove the repeating characters at the back with boxes[i] together.","title":"Tutorial"},{"location":"competitive_programming/leetcode/546/#solution","text":"#include <bits/stdc++.h> using namespace std ; class Solution { int n ; vector < int > boxes ; public : int removeBoxes ( vector < int >& boxes ) { int dp [ 100 ][ 100 ][ 100 ]; memset ( dp , -1 , sizeof ( dp )); n = boxes . size (); this -> boxes = boxes ; int ans = dfs ( 0 , n - 1 , 0 , dp ); return ans ; } int sqr ( int a ) { return a * a ; } int dfs ( int l , int r , int k , int dp [ 100 ][ 100 ][ 100 ]) { if ( l > r ) { return 0 ; } if ( dp [ l ][ r ][ k ] != -1 ) { return dp [ l ][ r ][ k ]; } int ret = 0 ; if ( r - 1 >= 0 && boxes [ r - 1 ] == boxes [ r ]) { ret = dfs ( l , r - 1 , k + 1 , dp ); dp [ l ][ r ][ k ] = ret ; return ret ; } ret = dfs ( l , r - 1 , 0 , dp ) + sqr ( k + 1 ); for ( int i = l ; i < r ; i ++ ) { if ( boxes [ i ] != boxes [ r ]) continue ; ret = max ( ret , dfs ( l , i , k + 1 , dp ) + dfs ( i + 1 , r - 1 , 0 , dp )); } dp [ l ][ r ][ k ] = ret ; //printf(\"%d %d %d %d\\n\", l, r, k, ret); return ret ; } };","title":"Solution"},{"location":"competitive_programming/leetcode/686/","text":"686. Repeated String Match Problem Given two strings, A and B. How many times we need to repeat A, so that B is a substring of A. Solution Repeat A until the string is as long as 2*len(B) - 1, which is the maximum length needed to find the answer. Use Rabin-Karp to hash the first len(B) chars in A, and sliding window one char by one char to the right. Compare each of the hash value of the substrings to the hash value of B. If not equal, then the substring is not B. If equal, we check char by char to see if the substring is B or not. Algorithms Rabin-Karp Code # Simple solution class Solution : def repeatedStringMatch ( self , A : str , B : str ) -> int : x = ( len ( B ) - 1 ) // len ( A ) + 1 if B in A * x : return x if B in A * ( x + 1 ): return x + 1 return - 1 # Karp-Rabin MOD = int (( 10 ** 9 ) + 7 ) BASE = 26 class Solution : def validate ( self , index , A , B ): for i in range ( len ( B )): if index - i < 0 : break if A [( index - i ) % len ( A )] != B [ - 1 - i ]: return False return True def repeatedStringMatch ( self , A : str , B : str ) -> int : b_value = 0 for char in B : b_value = ( b_value * BASE ) % MOD + ord ( char ) - ord ( 'a' ) b_value %= MOD hash_value = 0 multiplier = 1 for i in range ( len ( B )): multiplier = ( multiplier * BASE ) % MOD index = 0 while index < max ( len ( B ) * 2 , len ( A ) * 2 ): hash_value = ( ord ( A [ index % len ( A )]) - ord ( 'a' ) + ( hash_value * BASE ) % MOD ) % MOD if index >= len ( B ): hash_value -= (( ord ( A [( index - len ( B )) % len ( A )]) - ord ( 'a' )) * multiplier ) % MOD hash_value = ( hash_value + MOD ) % MOD if hash_value == b_value and index >= len ( B ) - 1 : if self . validate ( index , A , B ): return index // len ( A ) + 1 index += 1 return - 1 # KMP class Solution : def repeatedStringMatch ( self , A : str , B : str ) -> int : link = [ - 1 ] * ( len ( B ) + 1 ) for j in range ( len ( B ) - 1 ): i = j while i != - 1 and B [ j + 1 ] != B [ link [ i ] + 1 ]: i = link [ i ] link [ j + 1 ] = link [ i ] + 1 b_index = - 1 for i in range ( - 1 , len ( A ) + len ( B )): if b_index == len ( B ) - 1 : return i // len ( A ) + 1 while A [( i + 1 ) % len ( A )] != B [ b_index + 1 ] and b_index != - 1 : b_index = link [ b_index ] if A [( i + 1 ) % len ( A )] == B [ b_index + 1 ]: b_index += 1 continue return - 1","title":"686. Repeated String Match"},{"location":"competitive_programming/leetcode/686/#686-repeated-string-match","text":"","title":"686. Repeated String Match"},{"location":"competitive_programming/leetcode/686/#problem","text":"Given two strings, A and B. How many times we need to repeat A, so that B is a substring of A.","title":"Problem"},{"location":"competitive_programming/leetcode/686/#solution","text":"Repeat A until the string is as long as 2*len(B) - 1, which is the maximum length needed to find the answer. Use Rabin-Karp to hash the first len(B) chars in A, and sliding window one char by one char to the right. Compare each of the hash value of the substrings to the hash value of B. If not equal, then the substring is not B. If equal, we check char by char to see if the substring is B or not.","title":"Solution"},{"location":"competitive_programming/leetcode/686/#algorithms","text":"","title":"Algorithms"},{"location":"competitive_programming/leetcode/686/#rabin-karp","text":"","title":"Rabin-Karp"},{"location":"competitive_programming/leetcode/686/#code","text":"# Simple solution class Solution : def repeatedStringMatch ( self , A : str , B : str ) -> int : x = ( len ( B ) - 1 ) // len ( A ) + 1 if B in A * x : return x if B in A * ( x + 1 ): return x + 1 return - 1 # Karp-Rabin MOD = int (( 10 ** 9 ) + 7 ) BASE = 26 class Solution : def validate ( self , index , A , B ): for i in range ( len ( B )): if index - i < 0 : break if A [( index - i ) % len ( A )] != B [ - 1 - i ]: return False return True def repeatedStringMatch ( self , A : str , B : str ) -> int : b_value = 0 for char in B : b_value = ( b_value * BASE ) % MOD + ord ( char ) - ord ( 'a' ) b_value %= MOD hash_value = 0 multiplier = 1 for i in range ( len ( B )): multiplier = ( multiplier * BASE ) % MOD index = 0 while index < max ( len ( B ) * 2 , len ( A ) * 2 ): hash_value = ( ord ( A [ index % len ( A )]) - ord ( 'a' ) + ( hash_value * BASE ) % MOD ) % MOD if index >= len ( B ): hash_value -= (( ord ( A [( index - len ( B )) % len ( A )]) - ord ( 'a' )) * multiplier ) % MOD hash_value = ( hash_value + MOD ) % MOD if hash_value == b_value and index >= len ( B ) - 1 : if self . validate ( index , A , B ): return index // len ( A ) + 1 index += 1 return - 1 # KMP class Solution : def repeatedStringMatch ( self , A : str , B : str ) -> int : link = [ - 1 ] * ( len ( B ) + 1 ) for j in range ( len ( B ) - 1 ): i = j while i != - 1 and B [ j + 1 ] != B [ link [ i ] + 1 ]: i = link [ i ] link [ j + 1 ] = link [ i ] + 1 b_index = - 1 for i in range ( - 1 , len ( A ) + len ( B )): if b_index == len ( B ) - 1 : return i // len ( A ) + 1 while A [( i + 1 ) % len ( A )] != B [ b_index + 1 ] and b_index != - 1 : b_index = link [ b_index ] if A [( i + 1 ) % len ( A )] == B [ b_index + 1 ]: b_index += 1 continue return - 1","title":"Code"},{"location":"competitive_programming/leetcode/843/","text":"843. Guess the Word Problem Given 100 words of length 6, one of which is the target. You pick one at a time to query how many matches in letters between the one you pick and the target. Matches is calculated as: \"abbccd\" and \"aabbcc\" has 3 matches at index 0, 2, 4. You need to pick the target within 10 queries. Solution A simple solution would be after each query we filter the list of words. For example, the query says the picked one and the target has x matches. We check the matches of the picked one with all the words. Only keep the ones having x matches with the picked word. Next time, we just randomly pick one from the filtered list. This solution won't pass. A better solution would be not randomly pick. We want the size of the filtered list to be small after a query. Given a word, there are only 7 possible outcomes of the query (0~6 matches). Each of the outcome would result in a different size of the filtered list. We use the maximum among the 7 as the indicator of whether we should pick it. We just compute the indicator of all the words in the list before we pick one with the smallest indicator. The reason we use the maximum as the indicator is because we want to garantee the worst case since we only have 10 chances. Code # \"\"\" # This is Master's API interface. # You should not implement it, or speculate about its implementation # \"\"\" # class Master: # def guess(self, word: str) -> int: import copy def get_matches ( word1 , word2 ): ret = 0 for i in range ( len ( word1 )): if word1 [ i ] == word2 [ i ]: ret += 1 return ret def get_value ( index , possible , f ): count = [ 0 ] * 7 for j in possible : if j == index : continue count [ f [ index ][ j ]] += 1 ret = 0 temp = 0 max_value = 0 for i in range ( 7 ): if count [ i ] == 0 : continue ret += count [ i ] temp += 1 max_value = max ( max_value , count [ i ]) return max_value return ret * 1.0 / temp def pick ( possible , f ): if len ( possible ) == 1 : return possible [ 0 ] ret = - 1 min_value = 1000 for index in possible : value = get_value ( index , possible , f ) if value < min_value : ret = index min_value = value return ret class Solution : def findSecretWord ( self , wordlist : List [ str ], master : 'Master' ) -> None : wordlist = wordlist checks = [ True ] * len ( wordlist ) possible = [ i for i in range ( len ( wordlist ))] f = [[ get_matches ( wordlist [ i ], wordlist [ j ]) for j in range ( len ( wordlist ))] for i in range ( len ( wordlist ))] while len ( possible ) != 0 : # print('*') index = pick ( possible , f ) word = wordlist [ index ] num_matches = master . guess ( word ) if num_matches == 6 : return possible = [ i for i in possible if ( get_matches ( word , wordlist [ i ]) == num_matches and word != wordlist [ i ])]","title":"843. Guess the Word"},{"location":"competitive_programming/leetcode/843/#843-guess-the-word","text":"","title":"843. Guess the Word"},{"location":"competitive_programming/leetcode/843/#problem","text":"Given 100 words of length 6, one of which is the target. You pick one at a time to query how many matches in letters between the one you pick and the target. Matches is calculated as: \"abbccd\" and \"aabbcc\" has 3 matches at index 0, 2, 4. You need to pick the target within 10 queries.","title":"Problem"},{"location":"competitive_programming/leetcode/843/#solution","text":"A simple solution would be after each query we filter the list of words. For example, the query says the picked one and the target has x matches. We check the matches of the picked one with all the words. Only keep the ones having x matches with the picked word. Next time, we just randomly pick one from the filtered list. This solution won't pass. A better solution would be not randomly pick. We want the size of the filtered list to be small after a query. Given a word, there are only 7 possible outcomes of the query (0~6 matches). Each of the outcome would result in a different size of the filtered list. We use the maximum among the 7 as the indicator of whether we should pick it. We just compute the indicator of all the words in the list before we pick one with the smallest indicator. The reason we use the maximum as the indicator is because we want to garantee the worst case since we only have 10 chances.","title":"Solution"},{"location":"competitive_programming/leetcode/843/#code","text":"# \"\"\" # This is Master's API interface. # You should not implement it, or speculate about its implementation # \"\"\" # class Master: # def guess(self, word: str) -> int: import copy def get_matches ( word1 , word2 ): ret = 0 for i in range ( len ( word1 )): if word1 [ i ] == word2 [ i ]: ret += 1 return ret def get_value ( index , possible , f ): count = [ 0 ] * 7 for j in possible : if j == index : continue count [ f [ index ][ j ]] += 1 ret = 0 temp = 0 max_value = 0 for i in range ( 7 ): if count [ i ] == 0 : continue ret += count [ i ] temp += 1 max_value = max ( max_value , count [ i ]) return max_value return ret * 1.0 / temp def pick ( possible , f ): if len ( possible ) == 1 : return possible [ 0 ] ret = - 1 min_value = 1000 for index in possible : value = get_value ( index , possible , f ) if value < min_value : ret = index min_value = value return ret class Solution : def findSecretWord ( self , wordlist : List [ str ], master : 'Master' ) -> None : wordlist = wordlist checks = [ True ] * len ( wordlist ) possible = [ i for i in range ( len ( wordlist ))] f = [[ get_matches ( wordlist [ i ], wordlist [ j ]) for j in range ( len ( wordlist ))] for i in range ( len ( wordlist ))] while len ( possible ) != 0 : # print('*') index = pick ( possible , f ) word = wordlist [ index ] num_matches = master . guess ( word ) if num_matches == 6 : return possible = [ i for i in possible if ( get_matches ( word , wordlist [ i ]) == num_matches and word != wordlist [ i ])]","title":"Code"},{"location":"competitive_programming/leetcode/975/","text":"975. Odd Even Jump Problem The core problem is: given an array of integers, for each number, find the smallest number on the right which is larger than or equal to it. Use the nearest if there is a tie. Solution If there is no smallest requirement, it is a monotonic stack problem. (Find the nearest one larger than the current one.) We can treat each element as a tuple of (index, value). We sort these tuples by value first, then index if tie. We got a new array. Now the problem becomes find the nearest element on the right whose index is larger than the current on the new array. It is solvable with monotonic stack. As long as it is the nearest, we have ensured two things: 1. It is the one with the smallest value that is >= to the current value since we sorted by values. 2. When there is a tie, it is the nearest in the original array since we sorted by index when value ties. Algorithms Monotonic stack Find the nearest one on the right, which is larger than the current one. The farther ones in the stack should be larger, the nearer ones should be smaller. So every element in the stack should either be large or be near. At least have one merit. Code import collections class Solution : def oddEvenJumps ( self , A : List [ int ]) -> int : dq = collections . deque () acs = sorted ([( value , i ) for i , value in enumerate ( A )]) dcs = sorted ([( - value , i ) for i , value in enumerate ( A )]) larger = [ - 1 ] * len ( A ) smaller = [ - 1 ] * len ( A ) for value , i in acs [:: - 1 ]: while len ( dq ) > 0 and i > dq [ - 1 ]: dq . pop () if len ( dq ) > 0 : larger [ i ] = dq [ - 1 ] dq . append ( i ) for value , i in dcs [:: - 1 ]: while len ( dq ) > 0 and i > dq [ - 1 ]: dq . pop () if len ( dq ) > 0 : smaller [ i ] = dq [ - 1 ] dq . append ( i ) f = [[ False ] * len ( A ), [ False ] * len ( A )] f [ 0 ][ len ( A ) - 1 ] = f [ 1 ][ len ( A ) - 1 ] = True # 0 is even, 1 is odd. for i in range ( 0 , len ( A ) - 1 )[:: - 1 ]: if smaller [ i ] != - 1 : f [ 0 ][ i ] = f [ 1 ][ smaller [ i ]] if larger [ i ] != - 1 : f [ 1 ][ i ] = f [ 0 ][ larger [ i ]] return f [ 1 ] . count ( True )","title":"975. Odd Even Jump"},{"location":"competitive_programming/leetcode/975/#975-odd-even-jump","text":"","title":"975. Odd Even Jump"},{"location":"competitive_programming/leetcode/975/#problem","text":"The core problem is: given an array of integers, for each number, find the smallest number on the right which is larger than or equal to it. Use the nearest if there is a tie.","title":"Problem"},{"location":"competitive_programming/leetcode/975/#solution","text":"If there is no smallest requirement, it is a monotonic stack problem. (Find the nearest one larger than the current one.) We can treat each element as a tuple of (index, value). We sort these tuples by value first, then index if tie. We got a new array. Now the problem becomes find the nearest element on the right whose index is larger than the current on the new array. It is solvable with monotonic stack. As long as it is the nearest, we have ensured two things: 1. It is the one with the smallest value that is >= to the current value since we sorted by values. 2. When there is a tie, it is the nearest in the original array since we sorted by index when value ties.","title":"Solution"},{"location":"competitive_programming/leetcode/975/#algorithms","text":"","title":"Algorithms"},{"location":"competitive_programming/leetcode/975/#monotonic-stack","text":"Find the nearest one on the right, which is larger than the current one. The farther ones in the stack should be larger, the nearer ones should be smaller. So every element in the stack should either be large or be near. At least have one merit.","title":"Monotonic stack"},{"location":"competitive_programming/leetcode/975/#code","text":"import collections class Solution : def oddEvenJumps ( self , A : List [ int ]) -> int : dq = collections . deque () acs = sorted ([( value , i ) for i , value in enumerate ( A )]) dcs = sorted ([( - value , i ) for i , value in enumerate ( A )]) larger = [ - 1 ] * len ( A ) smaller = [ - 1 ] * len ( A ) for value , i in acs [:: - 1 ]: while len ( dq ) > 0 and i > dq [ - 1 ]: dq . pop () if len ( dq ) > 0 : larger [ i ] = dq [ - 1 ] dq . append ( i ) for value , i in dcs [:: - 1 ]: while len ( dq ) > 0 and i > dq [ - 1 ]: dq . pop () if len ( dq ) > 0 : smaller [ i ] = dq [ - 1 ] dq . append ( i ) f = [[ False ] * len ( A ), [ False ] * len ( A )] f [ 0 ][ len ( A ) - 1 ] = f [ 1 ][ len ( A ) - 1 ] = True # 0 is even, 1 is odd. for i in range ( 0 , len ( A ) - 1 )[:: - 1 ]: if smaller [ i ] != - 1 : f [ 0 ][ i ] = f [ 1 ][ smaller [ i ]] if larger [ i ] != - 1 : f [ 1 ][ i ] = f [ 0 ][ larger [ i ]] return f [ 1 ] . count ( True )","title":"Code"},{"location":"math/test/","text":"Test MathJax \\frac{n!}{k!(n-k)!} = \\binom{n}{k} \\frac{n!}{k!(n-k)!} = \\binom{n}{k} Lorem ipsum dolor sit amet: p(x|y) = \\frac{p(y|x)p(x)}{p(y)} p(x|y) = \\frac{p(y|x)p(x)}{p(y)}","title":"Test MathJax"},{"location":"math/test/#test-mathjax","text":"\\frac{n!}{k!(n-k)!} = \\binom{n}{k} \\frac{n!}{k!(n-k)!} = \\binom{n}{k} Lorem ipsum dolor sit amet: p(x|y) = \\frac{p(y|x)p(x)}{p(y)} p(x|y) = \\frac{p(y|x)p(x)}{p(y)}","title":"Test MathJax"},{"location":"math/calculus/hessian_matrix/","text":"Hessian Matrix","title":"Hessian Matrix"},{"location":"math/calculus/hessian_matrix/#hessian-matrix","text":"","title":"Hessian Matrix"},{"location":"math/information_theory/cross_entropy/","text":"Cross Entropy","title":"Cross Entropy"},{"location":"math/information_theory/cross_entropy/#cross-entropy","text":"","title":"Cross Entropy"},{"location":"math/information_theory/kl_divergence/","text":"KL Divergence","title":"KL Divergence"},{"location":"math/information_theory/kl_divergence/#kl-divergence","text":"","title":"KL Divergence"},{"location":"math/linear_algebra/abstract_vectors/","text":"Abstract Vectors We learned that multiplying a matrix can be seen as a linear transformation. Many functions can be seen as linear transformations as long as they follow the following two rules. a * f(v) = f(a * v) f(a) + f(b) = f(a + b)","title":"Abstract Vectors"},{"location":"math/linear_algebra/abstract_vectors/#abstract-vectors","text":"We learned that multiplying a matrix can be seen as a linear transformation. Many functions can be seen as linear transformations as long as they follow the following two rules. a * f(v) = f(a * v) f(a) + f(b) = f(a + b)","title":"Abstract Vectors"},{"location":"math/linear_algebra/change_of_basis/","text":"Change of Basis A matrix can be seen as a linear transformation of a space. \\mathbf{Ax} \\mathbf{Ax} means transform the vector \\mathbf{x} \\mathbf{x} , which is in the original space, into the new space, but still using the original basis for coordination. The original basis means the perpendicular unit vectors. In this case, \\mathbf{x} \\mathbf{x} should be a vector represented in the original basis coordination system. Let's consider another problem, \\mathbf{x} \\mathbf{x} is (3, 2). However, it is not in the original coordinate system but a new coordinate system, which uses \\mathbf{A} \\mathbf{A} 's column vectors as basis. 3 and 2 are the scalars for the column vectors in \\mathbf{A} \\mathbf{A} . How can we translate the vector \\mathbf{x} \\mathbf{x} back to the original coordination system? I mean what is the coordinate of the \\mathbf{x} \\mathbf{x} represented by the original coordination system. It is the same as the above example, it should be \\mathbf{Ax} \\mathbf{Ax} . So a matrix can have different meaning's in different situations. It can either mean a transformation of the space, or a translation from one coordination system to another. It depends on the meaning of the vector multiplied on the right. If x is using the new space basis, then means translation. If in the old one, it means transformation. Another problem is how to translate a vector \\mathbf{x} \\mathbf{x} represented in the original system into the new coordination system. Just use \\mathbf{A}^{-1}\\mathbf{x} \\mathbf{A}^{-1}\\mathbf{x} , where \\mathbf{A} \\mathbf{A} consists of the basis vectors of the new coordination system as columns. The reason is as follows. Suppose \\mathbf{x}$ is using the new coordinate system specified by \\mathbf{A} \\mathbf{A} . \\mathbf{A}^{-1}\\mathbf{Ax} \\mathbf{A}^{-1}\\mathbf{Ax} is still \\mathbf{x} \\mathbf{x} . \\mathbf{v} = \\mathbf{Ax} \\mathbf{v} = \\mathbf{Ax} is the translated \\mathbf{x} \\mathbf{x} in the original coordinate system. So \\mathbf{v} \\mathbf{v} is \\mathbf{x} \\mathbf{x} described by the original coordination system. \\mathbf{A}^{-1}\\mathbf{Ax}=\\mathbf{x} \\Rightarrow \\mathbf{A}^{-1}\\mathbf{v}=\\mathbf{x} \\mathbf{A}^{-1}\\mathbf{Ax}=\\mathbf{x} \\Rightarrow \\mathbf{A}^{-1}\\mathbf{v}=\\mathbf{x} , so \\mathbf{A}^{-1} \\mathbf{A}^{-1} can translate \\mathbf{v} \\mathbf{v} to \\mathbf{x} \\mathbf{x} . So \\mathbf{A}^{-1} \\mathbf{A}^{-1} is the opposite translation of \\mathbf{A} \\mathbf{A} . If we want to do an operation (rotate a vector for 90 degree) on a vector in the new coordination system, what we do is translate it to the old system, do the operation, translate it back to the new. \\mathbf{A}^{-1}\\mathbf{BAx} \\mathbf{A}^{-1}\\mathbf{BAx} , \\mathbf{B} \\mathbf{B} is the operation matrix, \\mathbf{A} \\mathbf{A} is the translation matrix.","title":"Change of Basis"},{"location":"math/linear_algebra/change_of_basis/#change-of-basis","text":"A matrix can be seen as a linear transformation of a space. \\mathbf{Ax} \\mathbf{Ax} means transform the vector \\mathbf{x} \\mathbf{x} , which is in the original space, into the new space, but still using the original basis for coordination. The original basis means the perpendicular unit vectors. In this case, \\mathbf{x} \\mathbf{x} should be a vector represented in the original basis coordination system. Let's consider another problem, \\mathbf{x} \\mathbf{x} is (3, 2). However, it is not in the original coordinate system but a new coordinate system, which uses \\mathbf{A} \\mathbf{A} 's column vectors as basis. 3 and 2 are the scalars for the column vectors in \\mathbf{A} \\mathbf{A} . How can we translate the vector \\mathbf{x} \\mathbf{x} back to the original coordination system? I mean what is the coordinate of the \\mathbf{x} \\mathbf{x} represented by the original coordination system. It is the same as the above example, it should be \\mathbf{Ax} \\mathbf{Ax} . So a matrix can have different meaning's in different situations. It can either mean a transformation of the space, or a translation from one coordination system to another. It depends on the meaning of the vector multiplied on the right. If x is using the new space basis, then means translation. If in the old one, it means transformation. Another problem is how to translate a vector \\mathbf{x} \\mathbf{x} represented in the original system into the new coordination system. Just use \\mathbf{A}^{-1}\\mathbf{x} \\mathbf{A}^{-1}\\mathbf{x} , where \\mathbf{A} \\mathbf{A} consists of the basis vectors of the new coordination system as columns. The reason is as follows. Suppose \\mathbf{x}$ is using the new coordinate system specified by \\mathbf{A} \\mathbf{A} . \\mathbf{A}^{-1}\\mathbf{Ax} \\mathbf{A}^{-1}\\mathbf{Ax} is still \\mathbf{x} \\mathbf{x} . \\mathbf{v} = \\mathbf{Ax} \\mathbf{v} = \\mathbf{Ax} is the translated \\mathbf{x} \\mathbf{x} in the original coordinate system. So \\mathbf{v} \\mathbf{v} is \\mathbf{x} \\mathbf{x} described by the original coordination system. \\mathbf{A}^{-1}\\mathbf{Ax}=\\mathbf{x} \\Rightarrow \\mathbf{A}^{-1}\\mathbf{v}=\\mathbf{x} \\mathbf{A}^{-1}\\mathbf{Ax}=\\mathbf{x} \\Rightarrow \\mathbf{A}^{-1}\\mathbf{v}=\\mathbf{x} , so \\mathbf{A}^{-1} \\mathbf{A}^{-1} can translate \\mathbf{v} \\mathbf{v} to \\mathbf{x} \\mathbf{x} . So \\mathbf{A}^{-1} \\mathbf{A}^{-1} is the opposite translation of \\mathbf{A} \\mathbf{A} . If we want to do an operation (rotate a vector for 90 degree) on a vector in the new coordination system, what we do is translate it to the old system, do the operation, translate it back to the new. \\mathbf{A}^{-1}\\mathbf{BAx} \\mathbf{A}^{-1}\\mathbf{BAx} , \\mathbf{B} \\mathbf{B} is the operation matrix, \\mathbf{A} \\mathbf{A} is the translation matrix.","title":"Change of Basis"},{"location":"math/linear_algebra/column_space/","text":"Column Space A matrix is a description of a space. A column space is also called a linear transformed space. Also can be seen as the span of all the column vectors of the matrix. Span means the weighted addition of the vectors.","title":"Column Space"},{"location":"math/linear_algebra/column_space/#column-space","text":"A matrix is a description of a space. A column space is also called a linear transformed space. Also can be seen as the span of all the column vectors of the matrix. Span means the weighted addition of the vectors.","title":"Column Space"},{"location":"math/linear_algebra/cross_product/","text":"Cross Product It is an operation on two 3-d vectors. The result of the operation is a vector perpendicular to the plane that contains the two 3-d vectors. The length of the vector is the area of the parallelogram between the two vectors. To choose from which direction the perpendicular vector goes, we use the right-hand rule.","title":"Cross Product"},{"location":"math/linear_algebra/cross_product/#cross-product","text":"It is an operation on two 3-d vectors. The result of the operation is a vector perpendicular to the plane that contains the two 3-d vectors. The length of the vector is the area of the parallelogram between the two vectors. To choose from which direction the perpendicular vector goes, we use the right-hand rule.","title":"Cross Product"},{"location":"math/linear_algebra/determinant/","text":"Determinant The determinant can only be calculated from matrices with equal number of rows and columns. The determinant is a single value meaning the scale change of the space. Image a 2-dimensional euclidean space \\mathbb{R}^2 \\mathbb{R}^2 space, the unit vector on \\mathbf{x} \\mathbf{x} and \\mathbf{y} \\mathbf{y} constructs a small square. After a linear transformation into a new 2-d space, how much does the space of the square changed? If it grows to 2 times the original space, the determinant of the transformation matrix would be 2. If the determinant is negative, it means the space is flipped.","title":"Determinant"},{"location":"math/linear_algebra/determinant/#determinant","text":"The determinant can only be calculated from matrices with equal number of rows and columns. The determinant is a single value meaning the scale change of the space. Image a 2-dimensional euclidean space \\mathbb{R}^2 \\mathbb{R}^2 space, the unit vector on \\mathbf{x} \\mathbf{x} and \\mathbf{y} \\mathbf{y} constructs a small square. After a linear transformation into a new 2-d space, how much does the space of the square changed? If it grows to 2 times the original space, the determinant of the transformation matrix would be 2. If the determinant is negative, it means the space is flipped.","title":"Determinant"},{"location":"math/linear_algebra/dot_product/","text":"Dot Product A 1-d vector can also be seen as a matrix linearly transforms the space into a 1-d space. Here is the relation between the vector and the transformation. The transformation is projecting all the vectors in the space to the line that contains the 1-d vector and scale by the length of the 1-d vector. The computation of the linear transformation is the same as calculating the dot product.","title":"Dot Product"},{"location":"math/linear_algebra/dot_product/#dot-product","text":"A 1-d vector can also be seen as a matrix linearly transforms the space into a 1-d space. Here is the relation between the vector and the transformation. The transformation is projecting all the vectors in the space to the line that contains the 1-d vector and scale by the length of the 1-d vector. The computation of the linear transformation is the same as calculating the dot product.","title":"Dot Product"},{"location":"math/linear_algebra/eigen_vector/","text":"Eigenvector and Eigenvalues Intuitively, we can understand the eigenvectors of a matrix as follows. See the matrix as a linear transformation of the space. There are some some vectors remained in there original direction before and after the transformation. They are only scaled during the transformation. These vectors before the transformation are the eigenvectors. The scalar to scale them during the transformation are the eigenvalues. We can build an equation by the unchanged vectors. \\mathbf{v} \\mathbf{v} is the unchanged vector after the linear transformation \\mathbf{A} \\mathbf{A} , but only scaled by \\lambda \\lambda . \\mathbf{Av} = \\lambda\\mathbf{v}\\\\ \\mathbf{Av} - \\lambda\\mathbf{v} = 0\\\\ (\\mathbf{A} - \\lambda \\mathbf{I}) \\mathbf{v} = 0\\\\ det(\\mathbf{A} - \\lambda \\mathbf{I}) = 0 \\mathbf{Av} = \\lambda\\mathbf{v}\\\\ \\mathbf{Av} - \\lambda\\mathbf{v} = 0\\\\ (\\mathbf{A} - \\lambda \\mathbf{I}) \\mathbf{v} = 0\\\\ det(\\mathbf{A} - \\lambda \\mathbf{I}) = 0 (\\mathbf{A} - \\lambda \\mathbf{I}) \\mathbf{v} = 0 (\\mathbf{A} - \\lambda \\mathbf{I}) \\mathbf{v} = 0 means \\mathbf{v} \\mathbf{v} is linearly transformed to 0. The only possible situation for this is the space is squeezed to lower dimension by the linear transformation, during which \\mathbf{v} \\mathbf{v} is squeezed to 0. (The linear transformation is defined by matrix (\\mathbf{A} - \\lambda \\mathbf{I}) (\\mathbf{A} - \\lambda \\mathbf{I}) . This means the determinant of the transformation matrix is 0. So, we can solve it to get \\lambda \\lambda . Put \\lambda \\lambda value into the (\\mathbf{A} - \\lambda \\mathbf{I}) \\mathbf{v} = 0 (\\mathbf{A} - \\lambda \\mathbf{I}) \\mathbf{v} = 0 , we get \\mathbf{v} \\mathbf{v} . Notably, diagonal matrix's columns are eigenvectors and the only values are the eigenvalues. Consider the following problem, we want to compute a matrix \\mathbf{B} \\mathbf{B} which is a transformation, which is the same as apply another transformation defined by matrix \\mathbf{A} \\mathbf{A} a hundred times. So \\mathbf{B}=\\mathbf{A}^{100} \\mathbf{B}=\\mathbf{A}^{100} . To compute this efficiently, we want to somehow converted to a multiplication problem of a diagonal matrix instead of the original \\mathbf{A} \\mathbf{A} . If we represent the transformation defined by \\mathbf{A} \\mathbf{A} using the eigenvectors of \\mathbf{A} \\mathbf{A} as the basis, it would be much easier since in this transformation, the basis has been scaled only, instead of combined together. So the transformation matrix should be a diagonal matrix if represented by the coordination system, which use the eigenvectors as basis, namely eigenbasis. So to calculate the same transformation as \\mathbf{A} \\mathbf{A} in the new coordination system, we calculate \\mathbf{D}=\\mathbf{C}^{-1}\\mathbf{AC} \\mathbf{D}=\\mathbf{C}^{-1}\\mathbf{AC} , where \\mathbf{C} \\mathbf{C} is the translate matrix, that \\mathbf{Cx} \\mathbf{Cx} translate \\mathbf{x} \\mathbf{x} , which is in the new eigenvector coordination system back to the original coordination system. The column of \\mathbf{C} \\mathbf{C} are the eigenvectors of \\mathbf{A} \\mathbf{A} . So \\mathbf{D} \\mathbf{D} is the transformation \\mathbf{A} \\mathbf{A} defined in the new coordination system by the eigenvectors. \\mathbf{D} \\mathbf{D} is a diagonal matrix since it is the \\mathbf{A} \\mathbf{A} transformation in the eigenvector space which should only be the scale of the axis. We calculate \\mathbf{E}=\\mathbf{D}^{100} \\mathbf{E}=\\mathbf{D}^{100} . Finally, \\mathbf{B}=\\mathbf{CEC}^{-1} \\mathbf{B}=\\mathbf{CEC}^{-1} . Use \\mathbf{C} \\mathbf{C} to translate the coordinate system back to the original one.","title":"Eigenvector and Eigenvalues"},{"location":"math/linear_algebra/eigen_vector/#eigenvector-and-eigenvalues","text":"Intuitively, we can understand the eigenvectors of a matrix as follows. See the matrix as a linear transformation of the space. There are some some vectors remained in there original direction before and after the transformation. They are only scaled during the transformation. These vectors before the transformation are the eigenvectors. The scalar to scale them during the transformation are the eigenvalues. We can build an equation by the unchanged vectors. \\mathbf{v} \\mathbf{v} is the unchanged vector after the linear transformation \\mathbf{A} \\mathbf{A} , but only scaled by \\lambda \\lambda . \\mathbf{Av} = \\lambda\\mathbf{v}\\\\ \\mathbf{Av} - \\lambda\\mathbf{v} = 0\\\\ (\\mathbf{A} - \\lambda \\mathbf{I}) \\mathbf{v} = 0\\\\ det(\\mathbf{A} - \\lambda \\mathbf{I}) = 0 \\mathbf{Av} = \\lambda\\mathbf{v}\\\\ \\mathbf{Av} - \\lambda\\mathbf{v} = 0\\\\ (\\mathbf{A} - \\lambda \\mathbf{I}) \\mathbf{v} = 0\\\\ det(\\mathbf{A} - \\lambda \\mathbf{I}) = 0 (\\mathbf{A} - \\lambda \\mathbf{I}) \\mathbf{v} = 0 (\\mathbf{A} - \\lambda \\mathbf{I}) \\mathbf{v} = 0 means \\mathbf{v} \\mathbf{v} is linearly transformed to 0. The only possible situation for this is the space is squeezed to lower dimension by the linear transformation, during which \\mathbf{v} \\mathbf{v} is squeezed to 0. (The linear transformation is defined by matrix (\\mathbf{A} - \\lambda \\mathbf{I}) (\\mathbf{A} - \\lambda \\mathbf{I}) . This means the determinant of the transformation matrix is 0. So, we can solve it to get \\lambda \\lambda . Put \\lambda \\lambda value into the (\\mathbf{A} - \\lambda \\mathbf{I}) \\mathbf{v} = 0 (\\mathbf{A} - \\lambda \\mathbf{I}) \\mathbf{v} = 0 , we get \\mathbf{v} \\mathbf{v} . Notably, diagonal matrix's columns are eigenvectors and the only values are the eigenvalues. Consider the following problem, we want to compute a matrix \\mathbf{B} \\mathbf{B} which is a transformation, which is the same as apply another transformation defined by matrix \\mathbf{A} \\mathbf{A} a hundred times. So \\mathbf{B}=\\mathbf{A}^{100} \\mathbf{B}=\\mathbf{A}^{100} . To compute this efficiently, we want to somehow converted to a multiplication problem of a diagonal matrix instead of the original \\mathbf{A} \\mathbf{A} . If we represent the transformation defined by \\mathbf{A} \\mathbf{A} using the eigenvectors of \\mathbf{A} \\mathbf{A} as the basis, it would be much easier since in this transformation, the basis has been scaled only, instead of combined together. So the transformation matrix should be a diagonal matrix if represented by the coordination system, which use the eigenvectors as basis, namely eigenbasis. So to calculate the same transformation as \\mathbf{A} \\mathbf{A} in the new coordination system, we calculate \\mathbf{D}=\\mathbf{C}^{-1}\\mathbf{AC} \\mathbf{D}=\\mathbf{C}^{-1}\\mathbf{AC} , where \\mathbf{C} \\mathbf{C} is the translate matrix, that \\mathbf{Cx} \\mathbf{Cx} translate \\mathbf{x} \\mathbf{x} , which is in the new eigenvector coordination system back to the original coordination system. The column of \\mathbf{C} \\mathbf{C} are the eigenvectors of \\mathbf{A} \\mathbf{A} . So \\mathbf{D} \\mathbf{D} is the transformation \\mathbf{A} \\mathbf{A} defined in the new coordination system by the eigenvectors. \\mathbf{D} \\mathbf{D} is a diagonal matrix since it is the \\mathbf{A} \\mathbf{A} transformation in the eigenvector space which should only be the scale of the axis. We calculate \\mathbf{E}=\\mathbf{D}^{100} \\mathbf{E}=\\mathbf{D}^{100} . Finally, \\mathbf{B}=\\mathbf{CEC}^{-1} \\mathbf{B}=\\mathbf{CEC}^{-1} . Use \\mathbf{C} \\mathbf{C} to translate the coordinate system back to the original one.","title":"Eigenvector and Eigenvalues"},{"location":"math/linear_algebra/inverse_matrix/","text":"Inverse Matrix The inverse of a matrix can be seen as the opposite linear transformation. For example, a vector is changed by a linear transformation. The inverse of the transform matrix can transform the space, so that the changed v would go back to its original position. Actually, it is not only the vector but all the vectors in the space back to the original places. Notably, if a space is squeezed into lower dimensions (no matter real lower dimension, or a lower dimensional space in higher dimension representations), there is no inverse matrix for it.","title":"Inverse Matrix"},{"location":"math/linear_algebra/inverse_matrix/#inverse-matrix","text":"The inverse of a matrix can be seen as the opposite linear transformation. For example, a vector is changed by a linear transformation. The inverse of the transform matrix can transform the space, so that the changed v would go back to its original position. Actually, it is not only the vector but all the vectors in the space back to the original places. Notably, if a space is squeezed into lower dimensions (no matter real lower dimension, or a lower dimensional space in higher dimension representations), there is no inverse matrix for it.","title":"Inverse Matrix"},{"location":"math/linear_algebra/linear_transformation/","text":"Linear Transformation Vectors should be stored in columns. A m\\times n m\\times n ( m m rows and n n columns) matrix \\mathbf{A} \\mathbf{A} can be seen as a linear transformation of a n n dimensional space into m m dimensional space. It is a mapping from n n -dimensional space to m m -dimensional space. The n n column vectors in \\mathbf{A} \\mathbf{A} are the coordinates of the vectors in the new m m -dimensional space. During the transformation of the space, the the basis of the n n dimensional space are mapped to these vectors in the new space. So a column vector \\mathbf{x} \\mathbf{x} which original was a point in the n n -dimensional space, would get its new coordinate in the m m -dimensional space as \\mathbf{Ax} \\mathbf{Ax} . In this multiplication, sum of element-wise multiplication are calculated between \\mathbf{x} \\mathbf{x} and each row of \\mathbf{A} \\mathbf{A} . Each of the n n columns use the m m unit vectors (basis in the new space) to represent its coordinate. The i i th row of \\mathbf{A} \\mathbf{A} , which has n n elements, represents how long these n n basis vectors are on the i i th dimension of the m m dimensions. So this multiplication between \\mathbf{x} \\mathbf{x} and the i i th row would calculate the length of \\mathbf{x} \\mathbf{x} in the i i th dimension. Matrix multiplication can be understand as a sequence of linear transformations of spaces. For example, \\mathbf{ABC} \\mathbf{ABC} can be seen as: first transform by \\mathbf{C} \\mathbf{C} , then by \\mathbf{B} \\mathbf{B} , finally by \\mathbf{A} \\mathbf{A} . They read from right to left like f(g(x)) f(g(x)) , which first calculate g g .","title":"Linear Transformation"},{"location":"math/linear_algebra/linear_transformation/#linear-transformation","text":"Vectors should be stored in columns. A m\\times n m\\times n ( m m rows and n n columns) matrix \\mathbf{A} \\mathbf{A} can be seen as a linear transformation of a n n dimensional space into m m dimensional space. It is a mapping from n n -dimensional space to m m -dimensional space. The n n column vectors in \\mathbf{A} \\mathbf{A} are the coordinates of the vectors in the new m m -dimensional space. During the transformation of the space, the the basis of the n n dimensional space are mapped to these vectors in the new space. So a column vector \\mathbf{x} \\mathbf{x} which original was a point in the n n -dimensional space, would get its new coordinate in the m m -dimensional space as \\mathbf{Ax} \\mathbf{Ax} . In this multiplication, sum of element-wise multiplication are calculated between \\mathbf{x} \\mathbf{x} and each row of \\mathbf{A} \\mathbf{A} . Each of the n n columns use the m m unit vectors (basis in the new space) to represent its coordinate. The i i th row of \\mathbf{A} \\mathbf{A} , which has n n elements, represents how long these n n basis vectors are on the i i th dimension of the m m dimensions. So this multiplication between \\mathbf{x} \\mathbf{x} and the i i th row would calculate the length of \\mathbf{x} \\mathbf{x} in the i i th dimension. Matrix multiplication can be understand as a sequence of linear transformations of spaces. For example, \\mathbf{ABC} \\mathbf{ABC} can be seen as: first transform by \\mathbf{C} \\mathbf{C} , then by \\mathbf{B} \\mathbf{B} , finally by \\mathbf{A} \\mathbf{A} . They read from right to left like f(g(x)) f(g(x)) , which first calculate g g .","title":"Linear Transformation"},{"location":"math/linear_algebra/null_space/","text":"Null Space If a matrix squeezes a higher dimension into a lower dimension, the part of the space that has been squeezed to the root is the null space. Formally, the set of a satisfy \\mathbf{Xa}=0 \\mathbf{Xa}=0 . The span of this set is the null space of \\mathbf{X} \\mathbf{X} .","title":"Null Space"},{"location":"math/linear_algebra/null_space/#null-space","text":"If a matrix squeezes a higher dimension into a lower dimension, the part of the space that has been squeezed to the root is the null space. Formally, the set of a satisfy \\mathbf{Xa}=0 \\mathbf{Xa}=0 . The span of this set is the null space of \\mathbf{X} \\mathbf{X} .","title":"Null Space"},{"location":"math/linear_algebra/rank/","text":"Rank The lowest number of dimensions possible to contain the linear transformed space. The linear transformation is defined by the matrix.","title":"Rank"},{"location":"math/linear_algebra/rank/#rank","text":"The lowest number of dimensions possible to contain the linear transformed space. The linear transformation is defined by the matrix.","title":"Rank"},{"location":"math/statistics/l_norms/","text":"L Norms","title":"L Norms"},{"location":"math/statistics/l_norms/#l-norms","text":"","title":"L Norms"},{"location":"math/statistics/linear_regression/","text":"Linear Regression","title":"Linear Regression"},{"location":"math/statistics/linear_regression/#linear-regression","text":"","title":"Linear Regression"},{"location":"math/statistics/logistic_regression/","text":"Logistic Regression","title":"Logistic Regression"},{"location":"math/statistics/logistic_regression/#logistic-regression","text":"","title":"Logistic Regression"},{"location":"tech/snippets/gpu/","text":"GPU tech/snippet Use env var to limit the GPU. Bash: CUDA_VISIBLE_DEVICES=1 python myscript.py Python: import os os.environ[\"CUDA_DEVICE_ORDER\"]=\"PCI_BUS_ID\" # see issue #152 os.environ[\"CUDA_VISIBLE_DEVICES\"]=\"0\" https://stackoverflow.com/questions/37893755/tensorflow-set-cuda-visible-devices-within-jupyter","title":"GPU"},{"location":"tech/snippets/gpu/#gpu","text":"","title":"GPU"},{"location":"tech/snippets/gpu/#techsnippet","text":"Use env var to limit the GPU. Bash: CUDA_VISIBLE_DEVICES=1 python myscript.py Python: import os os.environ[\"CUDA_DEVICE_ORDER\"]=\"PCI_BUS_ID\" # see issue #152 os.environ[\"CUDA_VISIBLE_DEVICES\"]=\"0\" https://stackoverflow.com/questions/37893755/tensorflow-set-cuda-visible-devices-within-jupyter","title":"tech/snippet"},{"location":"tech/snippets/latex/","text":"LaTex tech/snippet How to add? \\bibliographystyle{abbrv} \\begin{thebibliography}{99} \\bibitem{gSK0} A. Maccari, {\\em Phys. Lett. A} {\\bf 265} (2000) 187. \\bibitem{intro1} C. F. Liu, Z.D. Dai, {\\em Appl. Math. and Comput.} {\\bf 206} (2008) 272. \\bibitem{intro2} Z. H. Yang, {\\em Commun. Theor. Phys.} {\\bf 46} (2006) 807. \\end{thebibliography} How to Cite? bilinear~\\cite{Hirota1,Hirota2,Hirota3}, Darboux transformation~\\cite{dar1,dar2,dar3}, Bell polynomial~\\cite{bell1,bell2,bell3} and B\\\"{a}cklund transformation (BT)~\\cite{BT1}. Note: The default order of the bibliography is the order they appear in the list. The title of bibliography is \"Bibliography\" or \"Reference\" depend on what document class you use. Command line is \"latex filename.tex\" to make a dvi file, \"pdflatex filename.tex\" to make a pdf file. picture: \\includegraphics[height=8cm]{fig1.eps} table: \\begin{center} \\begin{tabular}{@{}llr@{}} \\toprule \\multicolumn{3}{c}{Statistical Feature}\\\\ \\midrule No. &Name &Type\\\\ \\midrule 1 &time stamp &Text \\\\ 3 &IMSI &Number \\\\ 4 &number of HTTP links with same IMSI in 2 min &Number \\\\ 5 &number of HTTP packet sent with same IMSI in 2 min &Number \\\\ 6 &number of HTTP packet recieved with same IMSI in 2 min &Float \\\\ 7 &number of Bytes sent with same IMSI in 2 min &Number \\\\ 8 &number of Bytes recieved with same IMSI in 2 min &Number \\\\ 9 &send-to-recieve ratio of Bytes with same IMSI in 2 min &Float \\\\ 10 &ratio of packet with the same destination IP in 5 min &Float \\\\ 11 &ratio of packet with the same destination IP and protocal type in 5 min &Float \\\\ 12 &number of PDP sessions originated by the user &Number \\\\ \\bottomrule \\end{tabular} \\end{center} \\begin{center} \\begin{tabular}{@{}llr@{}} \\toprule \\multicolumn{3}{c}{Statistical Feature}\\\\ \\midrule No. &Name &Type\\\\ \\midrule 1 &time stamp &Text \\\\ 3 &IMSI &Number \\\\ 4 &number of HTTP links with same IMSI in 2 min &Number \\\\ 5 &number of HTTP packet sent with same IMSI in 2 min &Number \\\\ 6 &number of HTTP packet recieved with same IMSI in 2 min &Float \\\\ 7 &number of Bytes sent with same IMSI in 2 min &Number \\\\ 8 &number of Bytes recieved with same IMSI in 2 min &Number \\\\ 9 &send-to-recieve ratio of Bytes with same IMSI in 2 min &Float \\\\ 10 &ratio of packet with the same destination IP in 5 min &Float \\\\ 11 &ratio of packet with the same destination IP and protocal type in 5 min &Float \\\\ 12 &number of PDP sessions originated by the user &Number \\\\ \\bottomrule \\end{tabular} \\end{center} break long urls: \\usepackage[hyphens]{url} \\url{http:.....}","title":"LaTex"},{"location":"tech/snippets/latex/#latex","text":"","title":"LaTex"},{"location":"tech/snippets/latex/#techsnippet","text":"How to add? \\bibliographystyle{abbrv} \\begin{thebibliography}{99} \\bibitem{gSK0} A. Maccari, {\\em Phys. Lett. A} {\\bf 265} (2000) 187. \\bibitem{intro1} C. F. Liu, Z.D. Dai, {\\em Appl. Math. and Comput.} {\\bf 206} (2008) 272. \\bibitem{intro2} Z. H. Yang, {\\em Commun. Theor. Phys.} {\\bf 46} (2006) 807. \\end{thebibliography} How to Cite? bilinear~\\cite{Hirota1,Hirota2,Hirota3}, Darboux transformation~\\cite{dar1,dar2,dar3}, Bell polynomial~\\cite{bell1,bell2,bell3} and B\\\"{a}cklund transformation (BT)~\\cite{BT1}. Note: The default order of the bibliography is the order they appear in the list. The title of bibliography is \"Bibliography\" or \"Reference\" depend on what document class you use. Command line is \"latex filename.tex\" to make a dvi file, \"pdflatex filename.tex\" to make a pdf file. picture: \\includegraphics[height=8cm]{fig1.eps} table: \\begin{center} \\begin{tabular}{@{}llr@{}} \\toprule \\multicolumn{3}{c}{Statistical Feature}\\\\ \\midrule No. &Name &Type\\\\ \\midrule 1 &time stamp &Text \\\\ 3 &IMSI &Number \\\\ 4 &number of HTTP links with same IMSI in 2 min &Number \\\\ 5 &number of HTTP packet sent with same IMSI in 2 min &Number \\\\ 6 &number of HTTP packet recieved with same IMSI in 2 min &Float \\\\ 7 &number of Bytes sent with same IMSI in 2 min &Number \\\\ 8 &number of Bytes recieved with same IMSI in 2 min &Number \\\\ 9 &send-to-recieve ratio of Bytes with same IMSI in 2 min &Float \\\\ 10 &ratio of packet with the same destination IP in 5 min &Float \\\\ 11 &ratio of packet with the same destination IP and protocal type in 5 min &Float \\\\ 12 &number of PDP sessions originated by the user &Number \\\\ \\bottomrule \\end{tabular} \\end{center} \\begin{center} \\begin{tabular}{@{}llr@{}} \\toprule \\multicolumn{3}{c}{Statistical Feature}\\\\ \\midrule No. &Name &Type\\\\ \\midrule 1 &time stamp &Text \\\\ 3 &IMSI &Number \\\\ 4 &number of HTTP links with same IMSI in 2 min &Number \\\\ 5 &number of HTTP packet sent with same IMSI in 2 min &Number \\\\ 6 &number of HTTP packet recieved with same IMSI in 2 min &Float \\\\ 7 &number of Bytes sent with same IMSI in 2 min &Number \\\\ 8 &number of Bytes recieved with same IMSI in 2 min &Number \\\\ 9 &send-to-recieve ratio of Bytes with same IMSI in 2 min &Float \\\\ 10 &ratio of packet with the same destination IP in 5 min &Float \\\\ 11 &ratio of packet with the same destination IP and protocal type in 5 min &Float \\\\ 12 &number of PDP sessions originated by the user &Number \\\\ \\bottomrule \\end{tabular} \\end{center} break long urls: \\usepackage[hyphens]{url} \\url{http:.....}","title":"tech/snippet"},{"location":"tech/snippets/linux_commands/","text":"Linux Commands tech/snippet execute the command with line number of 1957 in 'history' command: !1957 how to count the number of lines of code in a directory recursively: find . -name '*.py'| xargs wc -l Way to unzip file to different directories: for i in *.zip ; do mkdir \" $i -dir\" cd \" $i -dir\" unzip \"../ $i \" cd .. done find string recursively in files in a folder: find . -type f -print0 | xargs -0 grep -l \"try\" find file recursively: find . -name \"*.pdf\" replace string recursively in files in a folder: find . -name \"*.cpp\" -print0 | xargs -0 -n 1 sed -i -e 's/from/to/g'","title":"Linux Commands"},{"location":"tech/snippets/linux_commands/#linux-commands","text":"","title":"Linux Commands"},{"location":"tech/snippets/linux_commands/#techsnippet","text":"execute the command with line number of 1957 in 'history' command: !1957 how to count the number of lines of code in a directory recursively: find . -name '*.py'| xargs wc -l Way to unzip file to different directories: for i in *.zip ; do mkdir \" $i -dir\" cd \" $i -dir\" unzip \"../ $i \" cd .. done find string recursively in files in a folder: find . -type f -print0 | xargs -0 grep -l \"try\" find file recursively: find . -name \"*.pdf\" replace string recursively in files in a folder: find . -name \"*.cpp\" -print0 | xargs -0 -n 1 sed -i -e 's/from/to/g'","title":"tech/snippet"},{"location":"tech/snippets/socket_c/","text":"Linux C Socket \u90e8\u5206\u8f6c\u81ea\uff1ahttp://goodcandle.cnblogs.com/archive/2005/12/10/294652.aspx \u4ec0\u4e48\u662fTCP/IP\u3001UDP\uff1f Socket\u5728\u54ea\u91cc\u5462\uff1f Socket\u662f\u4ec0\u4e48\u5462\uff1f \u6709\u5f88\u591a\u7684\u6846\u67b6\uff0c\u4e3a\u4ec0\u4e48\u8fd8\u5728\u4eceSocket\u5f00\u59cb\uff1f Linux C Socket\u7b80\u5355\u793a\u4f8b 1.\u4ec0\u4e48\u662fTCP/IP \u3001UDP \uff1f TCP_IP\uff08Transmission Control Protocol_Internet Protocol\uff09\u5373\u4f20\u8f93\u63a7\u5236\u534f\u8bae/\u7f51\u95f4\u534f\u8bae\uff0c\u662f\u4e00\u4e2a\u5de5\u4e1a\u6807\u51c6\u7684\u534f\u8bae\u96c6\uff0c\u5b83\u662f\u4e3a\u5e7f\u57df\u7f51\uff08WANs\uff09\u8bbe\u8ba1\u7684\u3002 UDP\uff08User Data Protocol\uff0c\u7528\u6237\u6570\u636e\u62a5\u534f\u8bae\uff09\u662f\u4e0eTCP\u76f8\u5bf9\u5e94\u7684\u534f\u8bae\u3002\u5b83\u662f\u5c5e\u4e8eTCP/IP\u534f\u8bae\u65cf\u4e2d\u7684\u4e00\u79cd\u3002 \u4e0b\u9762\u7684\u56fe\u8868\u660e\u4e86\u8fd9\u4e9b\u534f\u8bae\u7684\u5173\u7cfb\u3002 2.Socket \u5728\u54ea\u91cc\u5462\uff1f 3.Socket \u662f\u4ec0\u4e48\u5462\uff1f ** Socket\u662f\u5e94\u7528\u5c42\u4e0eTCP_IP\u534f\u8bae\u65cf\u901a\u4fe1\u7684\u4e2d\u95f4\u8f6f\u4ef6\u62bd\u8c61\u5c42\uff0c\u5b83\u662f\u4e00\u7ec4\u63a5\u53e3\u3002\u5728\u8bbe\u8ba1\u6a21\u5f0f\u4e2d\uff0cSocket\u5176\u5b9e\u5c31\u662f\u4e00\u4e2a\u95e8\u9762\u6a21\u5f0f\uff0c\u5b83\u628a\u590d\u6742\u7684TCP_IP\u534f\u8bae\u65cf\u9690\u85cf\u5728Socket\u63a5\u53e3\u540e\u9762\uff0c\u5bf9\u7528\u6237\u6765\u8bf4\uff0c\u4e00\u7ec4\u7b80\u5355\u7684\u63a5\u53e3\u5c31\u662f\u5168\u90e8\uff0c\u8ba9Socket\u53bb\u7ec4\u7ec7\u6570\u636e\uff0c\u4ee5\u7b26\u5408\u6307\u5b9a\u7684\u534f\u8bae\u3002 \u95e8\u9762\u6a21\u5f0f\uff0c\u7528\u81ea\u5df1\u7684\u8bdd\u8bf4\uff0c\u5c31\u662f\u7cfb\u7edf\u5bf9\u5916\u754c\u63d0\u4f9b\u5355\u4e00\u7684\u63a5\u53e3\uff0c\u5916\u90e8\u4e0d\u9700\u8981\u4e86\u89e3\u5185\u90e8\u7684\u5b9e\u73b0\u3002 4.\u6709\u5f88\u591a\u7684\u6846\u67b6\uff0c\u4e3a\u4ec0\u4e48\u8fd8\u5728\u4eceSocket\u5f00\u59cb\uff1f \u73b0\u5728\u7684\u8de8\u5e73\u53f0\u7f51\u7edc\u7f16\u7a0b\u6846\u67b6\u5f88\u591a\uff0c\u5982Java\u7684SSH\uff0cC/C++\u7684Boost\u7b49\u3002 \u73b0\u5728\u7684\u5206\u5e03\u5f0f\u6846\u67b6\u5f88\u591a\uff0c\u5982Hadoop\u7b49\u3002 \u6211\u7684\u4efb\u52a1\u662f\u628a\u4e00\u4e2aC/C++\u7a0b\u5e8f\u505a\u6210\u5206\u5e03\u5f0f\uff0c\u8981\u6c42\u7684\u4e0d\u914d\u73af\u5883\uff0c\u57fa\u672c\u5c5e\u4e8e\u7eaf\u8ba1\u7b97\u7684\uff0c\u7ed3\u679c\u5f88\u5c0f\u3002\u6240\u4ee5\u9009\u62e9\u4e86Socket\u3002 \u91cd\u8981\u7684\u662fSocket\u662f\u5206\u5e03\u5f0f\u3001\u4e91\u8ba1\u7b97\u3001\u7f51\u7edc\u7f16\u7a0b\u7684\u57fa\u7840\uff0c\u5bf9Socket\u7684\u5b66\u4e60\u6709\u5229\u4e8e\u5bf9\u5176\u4ed6\u6846\u67b6\u7684\u7406\u89e3\u3002 \u4e0b\u56fe\u662fSocket\u7f16\u7a0b\u7684\u57fa\u672c\u6d41\u7a0b\uff1a 5.Linux C Socket\u7b80\u5355\u5b9e\u4f8b\u4e0e\u8be6\u7ec6\u6ce8\u91ca \u7a0b\u5e8f\u4e3a\u7b80\u5355\u7684\u201c\u56de\u5c04\u201d\uff0c\u5ba2\u6237\u7aef\u5c06\u63a7\u5236\u53f0\u8f93\u5165\u7684\u4fe1\u606f\u53d1\u9001\u7ed9\u670d\u52a1\u5668\u7aef\uff0c\u670d\u52a1\u5668\u539f\u6837\u8fd4\u56de\u4fe1\u606f\u3002 \u670d\u52a1\u5668\u7aef\uff1a #include <sys/types.h> #include <sys/socket.h> #include <stdio.h> #include <netinet/in.h> #include <arpa/inet.h> #include <unistd.h> #include <string.h> #include <stdlib.h> #include <fcntl.h> #include <sys/shm.h> #define MYPORT 8887 #define QUEUE 20 #define BUFFER_SIZE 1024 int main () { ///\u5b9a\u4e49sockfd int server_sockfd = socket ( AF_INET , SOCK_STREAM , 0 ); ///\u5b9a\u4e49sockaddr_in struct sockaddr_in server_sockaddr ; server_sockaddr . sin_family = AF_INET ; server_sockaddr . sin_port = htons ( MYPORT ); server_sockaddr . sin_addr . s_addr = htonl ( INADDR_ANY ); ///bind\uff0c\u6210\u529f\u8fd4\u56de0\uff0c\u51fa\u9519\u8fd4\u56de-1 if ( bind ( server_sockfd ,( struct sockaddr * ) & server_sockaddr , sizeof ( server_sockaddr )) == -1 ) { perror ( \"bind\" ); exit ( 1 ); } ///listen\uff0c\u6210\u529f\u8fd4\u56de0\uff0c\u51fa\u9519\u8fd4\u56de-1 if ( listen ( server_sockfd , QUEUE ) == -1 ) { perror ( \"listen\" ); exit ( 1 ); } ///\u5ba2\u6237\u7aef\u5957\u63a5\u5b57 char buffer [ BUFFER_SIZE ]; struct sockaddr_in client_addr ; socklen_t length = sizeof ( client_addr ); ///\u6210\u529f\u8fd4\u56de\u975e\u8d1f\u63cf\u8ff0\u5b57\uff0c\u51fa\u9519\u8fd4\u56de-1 int conn = accept ( server_sockfd , ( struct sockaddr * ) & client_addr , & length ); if ( conn < 0 ) { perror ( \"connect\" ); exit ( 1 ); } while ( 1 ) { memset ( buffer , 0 , sizeof ( buffer )); int len = recv ( conn , buffer , sizeof ( buffer ), 0 ); if ( strcmp ( buffer , \"exit \\n \" ) == 0 ) break ; fputs ( buffer , stdout ); send ( conn , buffer , len , 0 ); } close ( conn ); close ( server_sockfd ); return 0 ; } \u5ba2\u6237\u7aef\uff1a #include <sys/types.h> #include <sys/socket.h> #include <stdio.h> #include <netinet/in.h> #include <arpa/inet.h> #include <unistd.h> #include <string.h> #include <stdlib.h> #include <fcntl.h> #include <sys/shm.h> #define MYPORT 8887 #define BUFFER_SIZE 1024 int main () { ///\u5b9a\u4e49sockfd int sock_cli = socket ( AF_INET , SOCK_STREAM , 0 ); ///\u5b9a\u4e49sockaddr_in struct sockaddr_in servaddr ; memset ( & servaddr , 0 , sizeof ( servaddr )); servaddr . sin_family = AF_INET ; servaddr . sin_port = htons ( MYPORT ); ///\u670d\u52a1\u5668\u7aef\u53e3 servaddr . sin_addr . s_addr = inet_addr ( \"127.0.0.1\" ); ///\u670d\u52a1\u5668ip ///\u8fde\u63a5\u670d\u52a1\u5668\uff0c\u6210\u529f\u8fd4\u56de0\uff0c\u9519\u8bef\u8fd4\u56de-1 if ( connect ( sock_cli , ( struct sockaddr * ) & servaddr , sizeof ( servaddr )) < 0 ) { perror ( \"connect\" ); exit ( 1 ); } char sendbuf [ BUFFER_SIZE ]; char recvbuf [ BUFFER_SIZE ]; while ( fgets ( sendbuf , sizeof ( sendbuf ), stdin ) != NULL ) { send ( sock_cli , sendbuf , strlen ( sendbuf ), 0 ); ///\u53d1\u9001 if ( strcmp ( sendbuf , \"exit \\n \" ) == 0 ) break ; recv ( sock_cli , recvbuf , sizeof ( recvbuf ), 0 ); ///\u63a5\u6536 fputs ( recvbuf , stdout ); memset ( sendbuf , 0 , sizeof ( sendbuf )); memset ( recvbuf , 0 , sizeof ( recvbuf )); } close ( sock_cli ); return 0 ; } \u6267\u884c\uff1a \u5ba2\u6237\u7aef \u670d\u52a1\u5668\u7aef","title":"Linux C Socket"},{"location":"tech/snippets/socket_c/#linux-c-socket","text":"\u90e8\u5206\u8f6c\u81ea\uff1ahttp://goodcandle.cnblogs.com/archive/2005/12/10/294652.aspx \u4ec0\u4e48\u662fTCP/IP\u3001UDP\uff1f Socket\u5728\u54ea\u91cc\u5462\uff1f Socket\u662f\u4ec0\u4e48\u5462\uff1f \u6709\u5f88\u591a\u7684\u6846\u67b6\uff0c\u4e3a\u4ec0\u4e48\u8fd8\u5728\u4eceSocket\u5f00\u59cb\uff1f Linux C Socket\u7b80\u5355\u793a\u4f8b 1.\u4ec0\u4e48\u662fTCP/IP \u3001UDP \uff1f TCP_IP\uff08Transmission Control Protocol_Internet Protocol\uff09\u5373\u4f20\u8f93\u63a7\u5236\u534f\u8bae/\u7f51\u95f4\u534f\u8bae\uff0c\u662f\u4e00\u4e2a\u5de5\u4e1a\u6807\u51c6\u7684\u534f\u8bae\u96c6\uff0c\u5b83\u662f\u4e3a\u5e7f\u57df\u7f51\uff08WANs\uff09\u8bbe\u8ba1\u7684\u3002 UDP\uff08User Data Protocol\uff0c\u7528\u6237\u6570\u636e\u62a5\u534f\u8bae\uff09\u662f\u4e0eTCP\u76f8\u5bf9\u5e94\u7684\u534f\u8bae\u3002\u5b83\u662f\u5c5e\u4e8eTCP/IP\u534f\u8bae\u65cf\u4e2d\u7684\u4e00\u79cd\u3002 \u4e0b\u9762\u7684\u56fe\u8868\u660e\u4e86\u8fd9\u4e9b\u534f\u8bae\u7684\u5173\u7cfb\u3002 2.Socket \u5728\u54ea\u91cc\u5462\uff1f 3.Socket \u662f\u4ec0\u4e48\u5462\uff1f ** Socket\u662f\u5e94\u7528\u5c42\u4e0eTCP_IP\u534f\u8bae\u65cf\u901a\u4fe1\u7684\u4e2d\u95f4\u8f6f\u4ef6\u62bd\u8c61\u5c42\uff0c\u5b83\u662f\u4e00\u7ec4\u63a5\u53e3\u3002\u5728\u8bbe\u8ba1\u6a21\u5f0f\u4e2d\uff0cSocket\u5176\u5b9e\u5c31\u662f\u4e00\u4e2a\u95e8\u9762\u6a21\u5f0f\uff0c\u5b83\u628a\u590d\u6742\u7684TCP_IP\u534f\u8bae\u65cf\u9690\u85cf\u5728Socket\u63a5\u53e3\u540e\u9762\uff0c\u5bf9\u7528\u6237\u6765\u8bf4\uff0c\u4e00\u7ec4\u7b80\u5355\u7684\u63a5\u53e3\u5c31\u662f\u5168\u90e8\uff0c\u8ba9Socket\u53bb\u7ec4\u7ec7\u6570\u636e\uff0c\u4ee5\u7b26\u5408\u6307\u5b9a\u7684\u534f\u8bae\u3002 \u95e8\u9762\u6a21\u5f0f\uff0c\u7528\u81ea\u5df1\u7684\u8bdd\u8bf4\uff0c\u5c31\u662f\u7cfb\u7edf\u5bf9\u5916\u754c\u63d0\u4f9b\u5355\u4e00\u7684\u63a5\u53e3\uff0c\u5916\u90e8\u4e0d\u9700\u8981\u4e86\u89e3\u5185\u90e8\u7684\u5b9e\u73b0\u3002 4.\u6709\u5f88\u591a\u7684\u6846\u67b6\uff0c\u4e3a\u4ec0\u4e48\u8fd8\u5728\u4eceSocket\u5f00\u59cb\uff1f \u73b0\u5728\u7684\u8de8\u5e73\u53f0\u7f51\u7edc\u7f16\u7a0b\u6846\u67b6\u5f88\u591a\uff0c\u5982Java\u7684SSH\uff0cC/C++\u7684Boost\u7b49\u3002 \u73b0\u5728\u7684\u5206\u5e03\u5f0f\u6846\u67b6\u5f88\u591a\uff0c\u5982Hadoop\u7b49\u3002 \u6211\u7684\u4efb\u52a1\u662f\u628a\u4e00\u4e2aC/C++\u7a0b\u5e8f\u505a\u6210\u5206\u5e03\u5f0f\uff0c\u8981\u6c42\u7684\u4e0d\u914d\u73af\u5883\uff0c\u57fa\u672c\u5c5e\u4e8e\u7eaf\u8ba1\u7b97\u7684\uff0c\u7ed3\u679c\u5f88\u5c0f\u3002\u6240\u4ee5\u9009\u62e9\u4e86Socket\u3002 \u91cd\u8981\u7684\u662fSocket\u662f\u5206\u5e03\u5f0f\u3001\u4e91\u8ba1\u7b97\u3001\u7f51\u7edc\u7f16\u7a0b\u7684\u57fa\u7840\uff0c\u5bf9Socket\u7684\u5b66\u4e60\u6709\u5229\u4e8e\u5bf9\u5176\u4ed6\u6846\u67b6\u7684\u7406\u89e3\u3002 \u4e0b\u56fe\u662fSocket\u7f16\u7a0b\u7684\u57fa\u672c\u6d41\u7a0b\uff1a 5.Linux C Socket\u7b80\u5355\u5b9e\u4f8b\u4e0e\u8be6\u7ec6\u6ce8\u91ca \u7a0b\u5e8f\u4e3a\u7b80\u5355\u7684\u201c\u56de\u5c04\u201d\uff0c\u5ba2\u6237\u7aef\u5c06\u63a7\u5236\u53f0\u8f93\u5165\u7684\u4fe1\u606f\u53d1\u9001\u7ed9\u670d\u52a1\u5668\u7aef\uff0c\u670d\u52a1\u5668\u539f\u6837\u8fd4\u56de\u4fe1\u606f\u3002 \u670d\u52a1\u5668\u7aef\uff1a #include <sys/types.h> #include <sys/socket.h> #include <stdio.h> #include <netinet/in.h> #include <arpa/inet.h> #include <unistd.h> #include <string.h> #include <stdlib.h> #include <fcntl.h> #include <sys/shm.h> #define MYPORT 8887 #define QUEUE 20 #define BUFFER_SIZE 1024 int main () { ///\u5b9a\u4e49sockfd int server_sockfd = socket ( AF_INET , SOCK_STREAM , 0 ); ///\u5b9a\u4e49sockaddr_in struct sockaddr_in server_sockaddr ; server_sockaddr . sin_family = AF_INET ; server_sockaddr . sin_port = htons ( MYPORT ); server_sockaddr . sin_addr . s_addr = htonl ( INADDR_ANY ); ///bind\uff0c\u6210\u529f\u8fd4\u56de0\uff0c\u51fa\u9519\u8fd4\u56de-1 if ( bind ( server_sockfd ,( struct sockaddr * ) & server_sockaddr , sizeof ( server_sockaddr )) == -1 ) { perror ( \"bind\" ); exit ( 1 ); } ///listen\uff0c\u6210\u529f\u8fd4\u56de0\uff0c\u51fa\u9519\u8fd4\u56de-1 if ( listen ( server_sockfd , QUEUE ) == -1 ) { perror ( \"listen\" ); exit ( 1 ); } ///\u5ba2\u6237\u7aef\u5957\u63a5\u5b57 char buffer [ BUFFER_SIZE ]; struct sockaddr_in client_addr ; socklen_t length = sizeof ( client_addr ); ///\u6210\u529f\u8fd4\u56de\u975e\u8d1f\u63cf\u8ff0\u5b57\uff0c\u51fa\u9519\u8fd4\u56de-1 int conn = accept ( server_sockfd , ( struct sockaddr * ) & client_addr , & length ); if ( conn < 0 ) { perror ( \"connect\" ); exit ( 1 ); } while ( 1 ) { memset ( buffer , 0 , sizeof ( buffer )); int len = recv ( conn , buffer , sizeof ( buffer ), 0 ); if ( strcmp ( buffer , \"exit \\n \" ) == 0 ) break ; fputs ( buffer , stdout ); send ( conn , buffer , len , 0 ); } close ( conn ); close ( server_sockfd ); return 0 ; } \u5ba2\u6237\u7aef\uff1a #include <sys/types.h> #include <sys/socket.h> #include <stdio.h> #include <netinet/in.h> #include <arpa/inet.h> #include <unistd.h> #include <string.h> #include <stdlib.h> #include <fcntl.h> #include <sys/shm.h> #define MYPORT 8887 #define BUFFER_SIZE 1024 int main () { ///\u5b9a\u4e49sockfd int sock_cli = socket ( AF_INET , SOCK_STREAM , 0 ); ///\u5b9a\u4e49sockaddr_in struct sockaddr_in servaddr ; memset ( & servaddr , 0 , sizeof ( servaddr )); servaddr . sin_family = AF_INET ; servaddr . sin_port = htons ( MYPORT ); ///\u670d\u52a1\u5668\u7aef\u53e3 servaddr . sin_addr . s_addr = inet_addr ( \"127.0.0.1\" ); ///\u670d\u52a1\u5668ip ///\u8fde\u63a5\u670d\u52a1\u5668\uff0c\u6210\u529f\u8fd4\u56de0\uff0c\u9519\u8bef\u8fd4\u56de-1 if ( connect ( sock_cli , ( struct sockaddr * ) & servaddr , sizeof ( servaddr )) < 0 ) { perror ( \"connect\" ); exit ( 1 ); } char sendbuf [ BUFFER_SIZE ]; char recvbuf [ BUFFER_SIZE ]; while ( fgets ( sendbuf , sizeof ( sendbuf ), stdin ) != NULL ) { send ( sock_cli , sendbuf , strlen ( sendbuf ), 0 ); ///\u53d1\u9001 if ( strcmp ( sendbuf , \"exit \\n \" ) == 0 ) break ; recv ( sock_cli , recvbuf , sizeof ( recvbuf ), 0 ); ///\u63a5\u6536 fputs ( recvbuf , stdout ); memset ( sendbuf , 0 , sizeof ( sendbuf )); memset ( recvbuf , 0 , sizeof ( recvbuf )); } close ( sock_cli ); return 0 ; } \u6267\u884c\uff1a \u5ba2\u6237\u7aef \u670d\u52a1\u5668\u7aef","title":"Linux C Socket"},{"location":"tech/snippets/socket_cpp_win/","text":"windows socket C++ Windows\u4e0bSocket\u7f16\u7a0b\u4e3b\u8981\u5305\u62ec\u4ee5\u4e0b\u51e0\u90e8\u5206\uff1a \u670d\u52a1\u7aef 1\u3001\u521d\u59cb\u5316Windows Socket\u5e93\u3002 2\u3001\u521b\u5efaSocket\u3002 3\u3001\u7ed1\u5b9aSocket\u3002 4\u3001\u76d1\u542c\u3002 5\u3001Accept\u3002 6\u3001\u63a5\u6536\u3001\u53d1\u9001\u6570\u636e\u3002 \u5ba2\u6237\u7aef 1\u3001\u521d\u59cb\u5316Windows Socket\u5e93\u3002 2\u3001\u521b\u5efaSocket\u3002 3\u3001\u8fde\u63a5Socket\u3002 4\u3001\u63a5\u6536\u3001\u53d1\u9001\u6570\u636e\u3002 \u670d\u52a1\u7aef\u6bcf\u63a5\u6536\u5230\u4e00\u4e2a\u5ba2\u6237\u7aef\u7684Socket,\u5219\u521b\u5efa\u4e00\u4e2a\u7ebf\u7a0b\u3002\u6ee1\u8db3\u4e00\u4e2a\u670d\u52a1\u7aef\u8fde\u63a5\u591a\u4e2a\u5ba2\u6237\u7aef\u3002 //Server.cpp #include <iostream> #include <winsock2.h> using namespace std ; #pragma comment(lib, \"ws2_32.lib\") #define PORT 4000 #define IP_ADDRESS \"10.241.39.19\" DWORD WINAPI ClientThread ( LPVOID lpParameter ) { SOCKET CientSocket = ( SOCKET ) lpParameter ; int Ret = 0 ; char RecvBuffer [ MAX_PATH ]; while ( true ) { memset ( RecvBuffer , 0x00 , sizeof ( RecvBuffer )); Ret = recv ( CientSocket , RecvBuffer , MAX_PATH , 0 ); if ( Ret == 0 || Ret == SOCKET_ERROR ) { cout << \"\u5ba2\u6237\u7aef\u9000\u51fa!\" << endl ; break ; } cout << \"\u63a5\u6536\u5230\u5ba2\u6237\u4fe1\u606f\u4e3a:\" << RecvBuffer << endl ; } return 0 ; } int main ( int argc , char * argv []) { WSADATA Ws ; SOCKET ServerSocket , ClientSocket ; struct sockaddr_in LocalAddr , ClientAddr ; int Ret = 0 ; int AddrLen = 0 ; HANDLE hThread = NULL ; //Init Windows Socket if ( WSAStartup ( MAKEWORD ( 2 , 2 ), & Ws ) != 0 ) { cout << \"Init Windows Socket Failed::\" << GetLastError () << endl ; return -1 ; } //Create Socket ServerSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ); if ( ServerSocket == INVALID_SOCKET ) { cout << \"Create Socket Failed::\" << GetLastError () << endl ; return -1 ; } LocalAddr . sin_family = AF_INET ; LocalAddr . sin_addr . s_addr = inet_addr ( IP_ADDRESS ); LocalAddr . sin_port = htons ( PORT ); memset ( LocalAddr . sin_zero , 0x00 , 8 ); //Bind Socket Ret = bind ( ServerSocket , ( struct sockaddr * ) & LocalAddr , sizeof ( LocalAddr )); if ( Ret != 0 ) { cout << \"Bind Socket Failed::\" << GetLastError () << endl ; return -1 ; } //listen Ret = listen ( ServerSocket , 10 ); if ( Ret != 0 ) { cout << \"listen Socket Failed::\" << GetLastError () << endl ; return -1 ; } cout << \"\u670d\u52a1\u7aef\u5df2\u7ecf\u542f\u52a8\" << endl ; while ( true ) { AddrLen = sizeof ( ClientAddr ); ClientSocket = accept ( ServerSocket , ( struct sockaddr * ) & ClientAddr , & AddrLen ); if ( ClientSocket == INVALID_SOCKET ) { cout << \"Accept Failed::\" << GetLastError () << endl ; break ; } cout << \"\u5ba2\u6237\u7aef\u8fde\u63a5::\" << inet_ntoa ( ClientAddr . sin_addr ) << \":\" << ClientAddr . sin_port << endl ; hThread = CreateThread ( NULL , 0 , ClientThread , ( LPVOID ) ClientSocket , 0 , NULL ); if ( hThread == NULL ) { cout << \"Create Thread Failed!\" << endl ; break ; } CloseHandle ( hThread ); } closesocket ( ServerSocket ); closesocket ( ClientSocket ); WSACleanup (); return 0 ; } // Client.cpp #include <iostream> #include <winsock2.h> using namespace std ; #pragma comment(lib, \"ws2_32.lib\") #define PORT 4000 #define IP_ADDRESS \"10.241.39.19\" int main ( int argc , char * argv []) { WSADATA Ws ; SOCKET ClientSocket ; struct sockaddr_in ServerAddr ; int Ret = 0 ; int AddrLen = 0 ; HANDLE hThread = NULL ; char SendBuffer [ MAX_PATH ]; //Init Windows Socket if ( WSAStartup ( MAKEWORD ( 2 , 2 ), & Ws ) != 0 ) { cout << \"Init Windows Socket Failed::\" << GetLastError () << endl ; return -1 ; } //Create Socket ClientSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ); if ( ClientSocket == INVALID_SOCKET ) { cout << \"Create Socket Failed::\" << GetLastError () << endl ; return -1 ; } ServerAddr . sin_family = AF_INET ; ServerAddr . sin_addr . s_addr = inet_addr ( IP_ADDRESS ); ServerAddr . sin_port = htons ( PORT ); memset ( ServerAddr . sin_zero , 0x00 , 8 ); Ret = connect ( ClientSocket ,( struct sockaddr * ) & ServerAddr , sizeof ( ServerAddr )); if ( Ret == SOCKET_ERROR ) { cout << \"Connect Error::\" << GetLastError () << endl ; return -1 ; } else { cout << \"\u8fde\u63a5\u6210\u529f!\" << endl ; } while ( true ) { cin . getline ( SendBuffer , sizeof ( SendBuffer )); Ret = send ( ClientSocket , SendBuffer , ( int ) strlen ( SendBuffer ), 0 ); if ( Ret == SOCKET_ERROR ) { cout << \"Send Info Error::\" << GetLastError () << endl ; break ; } } closesocket ( ClientSocket ); WSACleanup (); return 0 ; }","title":"windows socket C++"},{"location":"tech/snippets/socket_cpp_win/#windows-socket-c","text":"Windows\u4e0bSocket\u7f16\u7a0b\u4e3b\u8981\u5305\u62ec\u4ee5\u4e0b\u51e0\u90e8\u5206\uff1a \u670d\u52a1\u7aef 1\u3001\u521d\u59cb\u5316Windows Socket\u5e93\u3002 2\u3001\u521b\u5efaSocket\u3002 3\u3001\u7ed1\u5b9aSocket\u3002 4\u3001\u76d1\u542c\u3002 5\u3001Accept\u3002 6\u3001\u63a5\u6536\u3001\u53d1\u9001\u6570\u636e\u3002 \u5ba2\u6237\u7aef 1\u3001\u521d\u59cb\u5316Windows Socket\u5e93\u3002 2\u3001\u521b\u5efaSocket\u3002 3\u3001\u8fde\u63a5Socket\u3002 4\u3001\u63a5\u6536\u3001\u53d1\u9001\u6570\u636e\u3002 \u670d\u52a1\u7aef\u6bcf\u63a5\u6536\u5230\u4e00\u4e2a\u5ba2\u6237\u7aef\u7684Socket,\u5219\u521b\u5efa\u4e00\u4e2a\u7ebf\u7a0b\u3002\u6ee1\u8db3\u4e00\u4e2a\u670d\u52a1\u7aef\u8fde\u63a5\u591a\u4e2a\u5ba2\u6237\u7aef\u3002 //Server.cpp #include <iostream> #include <winsock2.h> using namespace std ; #pragma comment(lib, \"ws2_32.lib\") #define PORT 4000 #define IP_ADDRESS \"10.241.39.19\" DWORD WINAPI ClientThread ( LPVOID lpParameter ) { SOCKET CientSocket = ( SOCKET ) lpParameter ; int Ret = 0 ; char RecvBuffer [ MAX_PATH ]; while ( true ) { memset ( RecvBuffer , 0x00 , sizeof ( RecvBuffer )); Ret = recv ( CientSocket , RecvBuffer , MAX_PATH , 0 ); if ( Ret == 0 || Ret == SOCKET_ERROR ) { cout << \"\u5ba2\u6237\u7aef\u9000\u51fa!\" << endl ; break ; } cout << \"\u63a5\u6536\u5230\u5ba2\u6237\u4fe1\u606f\u4e3a:\" << RecvBuffer << endl ; } return 0 ; } int main ( int argc , char * argv []) { WSADATA Ws ; SOCKET ServerSocket , ClientSocket ; struct sockaddr_in LocalAddr , ClientAddr ; int Ret = 0 ; int AddrLen = 0 ; HANDLE hThread = NULL ; //Init Windows Socket if ( WSAStartup ( MAKEWORD ( 2 , 2 ), & Ws ) != 0 ) { cout << \"Init Windows Socket Failed::\" << GetLastError () << endl ; return -1 ; } //Create Socket ServerSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ); if ( ServerSocket == INVALID_SOCKET ) { cout << \"Create Socket Failed::\" << GetLastError () << endl ; return -1 ; } LocalAddr . sin_family = AF_INET ; LocalAddr . sin_addr . s_addr = inet_addr ( IP_ADDRESS ); LocalAddr . sin_port = htons ( PORT ); memset ( LocalAddr . sin_zero , 0x00 , 8 ); //Bind Socket Ret = bind ( ServerSocket , ( struct sockaddr * ) & LocalAddr , sizeof ( LocalAddr )); if ( Ret != 0 ) { cout << \"Bind Socket Failed::\" << GetLastError () << endl ; return -1 ; } //listen Ret = listen ( ServerSocket , 10 ); if ( Ret != 0 ) { cout << \"listen Socket Failed::\" << GetLastError () << endl ; return -1 ; } cout << \"\u670d\u52a1\u7aef\u5df2\u7ecf\u542f\u52a8\" << endl ; while ( true ) { AddrLen = sizeof ( ClientAddr ); ClientSocket = accept ( ServerSocket , ( struct sockaddr * ) & ClientAddr , & AddrLen ); if ( ClientSocket == INVALID_SOCKET ) { cout << \"Accept Failed::\" << GetLastError () << endl ; break ; } cout << \"\u5ba2\u6237\u7aef\u8fde\u63a5::\" << inet_ntoa ( ClientAddr . sin_addr ) << \":\" << ClientAddr . sin_port << endl ; hThread = CreateThread ( NULL , 0 , ClientThread , ( LPVOID ) ClientSocket , 0 , NULL ); if ( hThread == NULL ) { cout << \"Create Thread Failed!\" << endl ; break ; } CloseHandle ( hThread ); } closesocket ( ServerSocket ); closesocket ( ClientSocket ); WSACleanup (); return 0 ; } // Client.cpp #include <iostream> #include <winsock2.h> using namespace std ; #pragma comment(lib, \"ws2_32.lib\") #define PORT 4000 #define IP_ADDRESS \"10.241.39.19\" int main ( int argc , char * argv []) { WSADATA Ws ; SOCKET ClientSocket ; struct sockaddr_in ServerAddr ; int Ret = 0 ; int AddrLen = 0 ; HANDLE hThread = NULL ; char SendBuffer [ MAX_PATH ]; //Init Windows Socket if ( WSAStartup ( MAKEWORD ( 2 , 2 ), & Ws ) != 0 ) { cout << \"Init Windows Socket Failed::\" << GetLastError () << endl ; return -1 ; } //Create Socket ClientSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ); if ( ClientSocket == INVALID_SOCKET ) { cout << \"Create Socket Failed::\" << GetLastError () << endl ; return -1 ; } ServerAddr . sin_family = AF_INET ; ServerAddr . sin_addr . s_addr = inet_addr ( IP_ADDRESS ); ServerAddr . sin_port = htons ( PORT ); memset ( ServerAddr . sin_zero , 0x00 , 8 ); Ret = connect ( ClientSocket ,( struct sockaddr * ) & ServerAddr , sizeof ( ServerAddr )); if ( Ret == SOCKET_ERROR ) { cout << \"Connect Error::\" << GetLastError () << endl ; return -1 ; } else { cout << \"\u8fde\u63a5\u6210\u529f!\" << endl ; } while ( true ) { cin . getline ( SendBuffer , sizeof ( SendBuffer )); Ret = send ( ClientSocket , SendBuffer , ( int ) strlen ( SendBuffer ), 0 ); if ( Ret == SOCKET_ERROR ) { cout << \"Send Info Error::\" << GetLastError () << endl ; break ; } } closesocket ( ClientSocket ); WSACleanup (); return 0 ; }","title":"windows socket C++"},{"location":"tech/snippets/thread_c/","text":"Linux C Thread tech/snippet \u8fdb\u7a0b \u7cfb\u7edf\u4e2d\u7a0b\u5e8f\u6267\u884c\u548c\u8d44\u6e90\u5206\u914d\u7684\u57fa\u672c\u5355\u4f4d \u6bcf\u4e2a\u8fdb\u7a0b\u6709\u81ea\u5df1\u7684\u6570\u636e\u6bb5\u3001\u4ee3\u7801\u6bb5\u548c\u5806\u6808\u6bb5 \u5728\u8fdb\u884c\u5207\u6362\u65f6\u9700\u8981\u6709\u6bd4\u8f83\u590d\u6742\u7684\u4e0a\u4e0b\u6587\u5207\u6362 \u7ebf\u7a0b \u51cf\u5c11\u5904\u7406\u673a\u7684\u7a7a\u8f6c\u65f6\u95f4\uff0c\u652f\u6301\u591a\u5904\u7406\u5668\u4ee5\u53ca\u51cf\u5c11\u4e0a\u4e0b\u6587\u5207\u6362\u5f00\u9500, \u6bd4\u521b\u5efa\u8fdb\u7a0b\u5c0f\u5f88\u591a \u8fdb\u7a0b\u5185\u72ec\u7acb\u7684\u4e00\u6761\u8fd0\u884c\u8def\u7ebf \u5904\u7406\u5668\u8c03\u5ea6\u7684\u6700\u5c0f\u5355\u5143\uff0c\u4e5f\u79f0\u4e3a\u8f7b\u91cf\u7ea7\u8fdb\u7a0b \u53ef\u4ee5\u5bf9\u8fdb\u7a0b\u7684\u5185\u5b58\u7a7a\u95f4\u548c\u8d44\u6e90\u8fdb\u884c\u8bbf\u95ee\uff0c\u5e76\u4e0e\u540c\u4e00\u8fdb\u7a0b\u4e2d\u7684\u5176\u4ed6\u7ebf\u7a0b\u5171\u4eab \u7ebf\u7a0b \u3000\u3000\u7ebf\u7a0b\u76f8\u5173\u7684\u6267\u884c\u72b6\u6001\u548c\u5b58\u50a8\u53d8\u91cf\u653e\u5728 \u7ebf\u7a0b\u63a7\u5236\u8868 \u5185 \u4e00\u4e2a\u8fdb\u7a0b\u53ef\u4ee5\u6709\u591a\u4e2a\u7ebf\u7a0b\uff0c\u6709\u591a\u4e2a\u7ebf\u7a0b\u63a7\u5236\u8868\u53ca\u5806\u6808\u5bc4\u5b58\u5668\uff0c\u5171\u4eab\u4e00\u4e2a\u7528\u6237\u5730\u5740\u7a7a\u95f4 \u591a\u7ebf\u7a0b\u540c\u6b65\u95ee\u9898 \u7ebf\u7a0b\u5171\u4eab\u8fdb\u7a0b\u7684\u8d44\u6e90\u548c\u5730\u5740\u7a7a\u95f4 \u4efb\u4f55\u7ebf\u7a0b\u5bf9\u7cfb\u7edf\u8d44\u6e90\u7684\u64cd\u4f5c\u90fd\u4f1a\u7ed9\u5176\u4ed6\u7ebf\u7a0b\u5e26\u6765\u5f71\u54cd \u7ebf\u7a0b\u6280\u672f\u53d1\u5c55 Linux 2.2\u5185\u6838 \u2022\u4e0d\u5b58\u5728\u771f\u6b63\u610f\u4e49\u4e0a\u7684\u7ebf\u7a0b Linux 2 .4\u5185\u6838 \u2022\u6d88\u9664\u7ebf\u7a0b\u4e2a\u6570\u7684\u9650\u5236\uff0c\u5141\u8bb8\u52a8\u6001\u5730\u8c03\u6574\u8fdb\u7a0b\u6570\u4e0a\u9650 \u5728Linux \u5185\u68382.6\u4e4b\u524d\uff0c\u8fdb\u7a0b\u662f\u6700\u4e3b\u8981\u7684\u5904\u7406\u8c03\u5ea6\u5355\u5143\uff0c\u5e76\u6ca1\u652f\u6301\u5185\u6838\u7ebf\u7a0b\u673a\u5236 Linux 2.6\u5185\u6838 \u2022\u5b9e\u73b0\u5171\u4eab\u5730\u5740\u7a7a\u95f4\u7684\u8fdb\u7a0b\u673a\u5236, \u57281996\u5e74\u7b2c\u4e00\u6b21\u83b7\u5f97\u7ebf\u7a0b\u7684\u652f\u6301 \u7ebf\u7a0b\u6280\u672f\u53d1\u5c55 \u4e3a\u4e86\u6539\u5584LinuxThread\u95ee\u9898\uff0c\u6839\u636e\u65b0\u5185\u6838\u673a\u5236\u91cd\u65b0\u7f16\u5199\u7ebf\u7a0b\u5e93, \u6539\u5584Linux\u5bf9\u7ebf\u7a0b\u7684\u652f\u6301 \u2022\u7531IBM\u4e3b\u5bfc\u7684\u65b0\u4e00\u4ee3POSIX\u7ebf\u7a0b\u5e93\uff08Next Generation POSIX Threads\uff0c\u7b80\u79f0\u4e3aNGPT\uff09 \u2013NGPT\u9879\u76ee\u57282002\u5e74\u542f\u52a8 \u2013\u4e3a\u4e86\u907f\u514d\u51fa\u73b0\u6709\u591a\u4e2aLinux\u7ebf\u7a0b\u6807\u51c6\uff0c\u57282003\u5e74\u505c\u6b62\u8be5\u9879\u76ee \u2022\u7531Red Hat\u4e3b\u5bfc\u7684\u672c\u5730\u5316POSIX\u7ebf\u7a0b\u5e93 (Native POSIX Thread Library\uff0c\u7b80\u79f0\u4e3aNTPL) \u2013\u6700\u65e9\u5728Red Hat Linux9\u4e2d\u88ab\u652f\u6301 \u2013\u73b0\u5728\u5df2\u7ecf\u6210\u4e3aGNU C\u51fd\u6570\u5e93\u7684\u4e00\u90e8\u5206\uff0c\u540c\u65f6\u4e5f\u6210\u4e3aLinux\u7ebf\u7a0b\u7684\u6807\u51c6 \u7ebf\u7a0b\u6807\u8bc6 \u7ebf\u7a0bID \u2022\u8fdb\u7a0bID\u5728\u6574\u4e2a\u7cfb\u7edf\u4e2d\u662f\u552f\u4e00\u7684 \u2022\u7ebf\u7a0bID\u53ea\u5728\u5b83\u6240\u5c5e\u7684\u8fdb\u7a0b\u73af\u5883\u4e2d\u6709\u6548 \u51fd\u6570: pthread_self() \u7ebf\u7a0b\u6807\u8bc6 pthread_t\u7c7b\u578b\u901a\u5e38\u7528\u7ed3\u6784\u6765\u8868\u793a \u2022\u4e0d\u80fd\u628a\u5b83\u4f5c\u4e3a\u6574\u6570\u5904\u7406 \u2013Linux\u4f7f\u7528\u65e0\u7b26\u53f7\u957f\u6574\u6570\u8868\u793a \u2022\u4e3a\u4e86\u79fb\u690d\uff0c\u4f7f\u7528\u51fd\u6570\u6765\u6bd4\u8f83\u7ebf\u7a0bID \u51fd\u6570: pthread_equal() #include <stdio.h> #include <stdlib.h> #include <pthread.h> int main (){ pthread_t thread_id ; thread_id = pthread_self (); // \u8fd4\u56de\u8c03\u7528\u7ebf\u7a0b\u7684\u7ebf\u7a0bID printf ( \"Thread ID: %lu. \\n \" , thread_id ) if ( pthread_equal ( thread_id , pthread_self ())) { // if (thread_id==0) { printf ( \"Equal! \\n \" ); } else { printf ( \"Not equal! \\n \" ); } return 0 ; } \u7ebf\u7a0b\u7f16\u7a0b \u64cd\u4f5c\u7528\u6237\u7a7a\u95f4\u4e2d\u7684\u7ebf\u7a0b \u521b\u5efa\u7ebf\u7a0b \u2022\u8c03\u7528\u8be5\u7ebf\u7a0b\u51fd\u6570\u7684\u5165\u53e3\u70b9 \u2022\u4f7f\u7528\u51fd\u6570pthread_create()\uff0c\u7ebf\u7a0b\u521b\u5efa\u540e\uff0c\u5c31\u5f00\u59cb\u8fd0\u884c\u76f8\u5173\u7684\u7ebf\u7a0b\u51fd\u6570 #include <stdio.h> #include <stdlib.h> #include <pthread.h> void * thrd_func ( void * arg ); pthread_t tid ; int main (){ // \u521b\u5efa\u7ebf\u7a0btid\uff0c\u4e14\u7ebf\u7a0b\u51fd\u6570\u7531thrd_func\u6307\u5411\uff0c\u662fthrd_func\u7684\u5165\u53e3\u70b9\uff0c\u5373\u9a6c\u4e0a\u6267\u884c\u6b64\u7ebf\u7a0b\u51fd\u6570 if ( pthread_create ( & tid , NULL , thrd_func , NULL ) != 0 ) { printf ( \"Create thread error! \\n \" ); exit ( 1 ); } printf ( \"TID in pthread_create function: %u. \\n \" , tid ); printf ( \"Main process: PID: %d,TID: %u. \\n \" , getpid (), pthread_self ()); sleep ( 1 ); //race return 0 ; } void * thrd_func ( void * arg ){ // printf(\"I am new thread!\\n\"); printf ( \"New process: PID: %d,TID: %u. \\n \" , getpid (), pthread_self ()); //why pthread_self printf ( \"New process: PID: %d,TID: %u. \\n \" , getpid (), tid ); //why pthread_self pthread_exit ( NULL ); //\u9000\u51fa\u7ebf\u7a0b // return ((void *)0); } \u9000\u51fa\u7ebf\u7a0b \u2022\u5728\u7ebf\u7a0b\u51fd\u6570\u8fd0\u884c\u5b8c\u540e\uff0c\u8be5\u7ebf\u7a0b\u4e5f\u5c31\u9000\u51fa\u4e86 \u2022\u6216\u4f7f\u7528\u51fd\u6570pthread_exit()\uff0c\u8fd9\u662f\u7ebf\u7a0b\u7684\u4e3b\u52a8\u884c\u4e3a \u2022\u4e0d\u80fd\u4f7f\u7528exit() \u4f7f\u8c03\u7528\u8fdb\u7a0b\u7ec8\u6b62\uff0c\u6240\u6709\u7ebf\u7a0b\u90fd\u7ec8\u6b62\u4e86 \u7b49\u5f85\u7ebf\u7a0b \u2022\u7531\u4e8e\u4e00\u4e2a\u8fdb\u7a0b\u4e2d\u7684\u591a\u4e2a\u7ebf\u7a0b\u662f\u5171\u4eab\u6570\u636e\u6bb5\u7684\uff0c\u901a\u5e38\u5728\u7ebf\u7a0b\u9000\u51fa\u4e4b\u540e\uff0c\u9000\u51fa\u7ebf\u7a0b\u6240\u5360\u7528\u7684\u8d44\u6e90\u5e76\u4e0d\u4f1a\u968f\u7740\u7ebf\u7a0b\u7684\u7ec8\u6b62\u800c\u5f97\u5230\u91ca\u653e \u2022pthread_join()\u51fd\u6570 \u7c7b\u4f3c\u8fdb\u7a0b\u7684wait()/waitpid()\u51fd\u6570\uff0c\u7528\u4e8e\u5c06\u5f53\u524d\u7ebf\u7a0b\u6302\u8d77\u6765\u7b49\u5f85\u7ebf\u7a0b\u7684\u7ed3\u675f \u662f\u4e00\u4e2a\u7ebf\u7a0b\u963b\u585e\u7684\u51fd\u6570\uff0c\u8c03\u7528\u5b83\u7684\u7ebf\u7a0b\u4e00\u76f4\u7b49\u5f85\u5230\u88ab\u7b49\u5f85\u7684\u7ebf\u7a0b\u7ed3\u675f\u4e3a\u6b62 \u51fd\u6570\u8fd4\u56de\u65f6\uff0c\u88ab\u7b49\u5f85\u7ebf\u7a0b\u7684\u8d44\u6e90\u5c31\u88ab\u6536\u56de #include <stdio.h> #include <stdlib.h> #include <pthread.h> void * thrd_func1 ( void * arg ); void * thrd_func2 ( void * arg ); int main () { pthread_t tid1 , tid2 ; void * tret ; // \u521b\u5efa\u7ebf\u7a0btid1\uff0c\u7ebf\u7a0b\u51fd\u6570 thrd_func1 if ( pthread_create ( & tid1 , NULL , thrd_func1 , NULL ) != 0 ) { pr intf ( \"Create thread 1 error! \\n \" ); exit ( 1 ); } // \u521b\u5efa\u7ebf\u7a0btid2,\u7ebf\u7a0b\u51fd\u6570 thrd_func2 if ( pthread_create ( & tid2 , NULL , thrd_func2 , NULL ) != 0 ) { printf ( \"Create thread 2 error! \\n \" ); exit ( 1 ); 20 } // \u7b49\u5f85\u7ebf\u7a0btid1\u7ed3\u675f\uff0c\u7ebf\u7a0b\u51fd\u6570\u8fd4\u56de\u503c\u653e\u5728tret\u4e2d if ( pthread_jo in ( tid1 , & tret ) != 0 ) { printf ( \"Join thread 1 error! \\n \" ); exit ( 1 ); } printf ( \"Thread 1 exit code: %d. \\n \" , ( int * ) tret ); // \u7b49\u5f85tid2\u7ed3\u675f\uff0c\u7ebf\u7a0b\u51fd\u6570\u8fd4\u56de\u503c\u653e\u5728tret\u4e2d if ( pthread_join ( tid2 , & tret ) != 0 ) { printf ( \"Join thread 2 error! \\n \" ); exit ( 1 ); } printf ( \"Thread 2 exit code: %d. \\n \" , ( int * ) tret ); return 0 ; } void * thrd_func1 ( void * arg ) { printf ( \"Thread 1 returning! \\n \" ); // sleep(3); return (( void * ) 1 ); // \u81ea\u52a8\u9000\u51fa\u7ebf\u7a0b } void * thrd_func2 ( void * arg ) { printf ( \"Thread 2 exiting! \\n \" ); pthread_e xit (( void * ) 2 ); // \u7ebf\u7a0b\u4e3b\u52a8\u9000\u51fa\uff0c\u8fd4\u56de(void *)2 } \u53d6\u6d88\u7ebf\u7a0b \u2022\u5728\u522b\u7684\u7ebf\u7a0b\u4e2d\u8981\u7ec8\u6b62\u53e6\u4e00\u4e2a\u7ebf\u7a0b \u2022pthread_cancel()\u51fd\u6570 \u2022\u88ab\u53d6\u6d88\u7684\u7ebf\u7a0b\u53ef\u4ee5\u8bbe\u7f6e\u81ea\u5df1\u7684\u53d6\u6d88\u72b6\u6001 \u2013\u88ab\u53d6\u6d88\u7684\u7ebf\u7a0b\u63a5\u6536\u5230\u53e6\u4e00\u4e2a\u7ebf\u7a0b\u7684\u53d6\u6d88\u8bf7\u6c42\u4e4b\u540e\uff0c\u662f\u63a5\u53d7\u8fd8\u662f\u5ffd\u7565\u8fd9\u4e2a\u8bf7\u6c42 \u2013\u5982\u679c\u63a5\u53d7\uff0c\u662f\u7acb\u523b\u8fdb\u884c\u7ec8\u6b62\u64cd\u4f5c\u8fd8\u662f\u7b49\u5f85\u67d0\u4e2a\u51fd\u6570\u7684\u8c03\u7528\u7b49 #include <stdio.h> #include <stdlib.h> #include <pthread.h> void * thrd_func1 ( void * arg ); void * thrd_func2 ( void * arg ); pthread_t tid1 , tid2 ; int main () { // \u521b\u5efa\u7ebf\u7a0btid1\uff0c\u7ebf\u7a0b\u51fd\u6570thrd_func1 if ( pthread_create ( & tid1 , NULL , thrd_func1 , NULL ) != 0 ) { printf ( \"Create thread 1 error! \\n \" ); exit ( 1 ); } // \u521b\u5efa\u7ebf\u7a0btid2\uff0c\u7ebf\u7a0b\u51fd\u6570thrd_func2 if ( pthread_create ( & tid2 , NULL , thrd_func2 , NULL ) != 0 ) { printf ( \"Create thread 2 err or! \\n \" ); exit ( 1 ); } // \u7b49\u5f85\u7ebf\u7a0btid1\u9000\u51fa if ( pthread_join ( tid1 , NULL ) != 0 ) { printf ( \"Join thread 1 error! \\n \" ); exit ( 1 ); } else printf ( \"Thread 1 Joined! \\n \" ); // \u7b49\u5f85\u7ebf\u7a0btid2\u9000\u51fa if ( pthread_join ( tid2 , NULL ) != 0 ) { printf ( \"Join thread 2 error! \\n \" ); exit ( 1 ); } else printf ( \"Thread 2 Joined! \\n \" ); return 0 ; } void * thrd_func1 ( void * arg ) { // pthread_setcancelstate(PTHREAD_CANCEL_DISABLE,NULL); pthread_setcancelstate ( PTHREAD_CANCEL_ENABLE , NULL ); // \u8bbe\u7f6e\u5176\u4ed6\u7ebf\u7a0b\u53ef\u4ee5cancel\u6389\u6b64\u7ebf\u7a0b while ( 1 ) { printf ( \"Thread 1 is running! \\n \" ); sleep ( 1 ); } pthread_exit (( void * ) 0 ); } void * thrd_func2 ( void * arg ) { printf ( \"Thread 2 is running! \\n \" ); sleep ( 5 ); if ( pthread_canc el ( tid1 ) == 0 ) // \u7ebf\u7a0btid2\u5411\u7ebf\u7a0btid1\u53d1\u9001cancel printf ( \"Send Cancel cmd to Thread 1. \\n \" ); pthread_exit (( void * ) 0 ); } #include <stdio.h> #include <stdlib.h> #include <pthread.h> #define THREAD_NUM 3 #define REPEAT_TIMES 5 #define DELAY 4 void * thrd_func ( void * arg ); int main (){ pthread_t thread [ THREAD_NUM ]; int no ; void * tret ; srand (( int ) time ( 0 )); // \u521d\u59cb\u5316\u968f\u673a\u51fd\u6570\u53d1\u751f\u5668 for ( no = 0 ; no < THREAD_NUM ; no ++ ){ if ( pthread_create ( & thread [ no ], NULL , thrd_func ,( void * ) no ) != 0 ) { // \u521b\u5efaTHREAD_NUM\u4e2a\u7ebf\u7a0b\uff0c\u4f20\u5165(void*)no\u4f5c\u4e3athrd_func\u7684\u53c2\u6570 printf ( \"Create thread %d error! \\n \" , no ); exit ( 1 ); } else printf ( \"Create thread %d success! \\n \" , no ); } for ( no = 0 ; no < THREAD_NUM ; no ++ ){ if ( pthread_join ( thread [ no ], & tret ) != 0 ){ // \u7b49\u5f85thread[no]\u7ebf\u7a0b\u7ed3\u675f\uff0c\u7ebf\u7a0b\u51fd\u6570\u8fd4\u56de\u503c\u653e\u5728tret\u4e2d printf ( \"Join thread %d error! \\n \" , no ); exit ( 1 ); } else printf ( \"Join thread %d success! \\n \" , no ); } return 0 ; } void * thrd_func ( void * arg ){ int thrd_num = ( void * ) arg ; int delay_time = 0 ; int count = 0 ; printf ( \"Thread %d is starting. \\n \" , thrd_num ); for ( count = 0 ; count < REPEAT_TIMES ; count ++ ) { delay_time = ( int )( DELAY * ( rand () / ( double ) RAND_MAX )) + 1 ; sleep ( delay_time ); printf ( \" \\t Thread %d:job %d delay =%d. \\n \" , thrd_num , count , delay_time ); } printf ( \"Thread %d is exiting. \\n \" , thrd_num ); pthread_exit ( NULL ); } \u7ebf\u7a0b\u540c\u6b65\u4e0e\u4e92\u65a5 \u7ebf\u7a0b\u5171\u4eab\u8fdb\u7a0b\u7684\u8d44\u6e90\u548c\u5730\u5740\u7a7a\u95f4\uff0c\u5bf9\u8fd9\u4e9b\u8d44\u6e90\u8fdb\u884c\u64cd\u4f5c\u65f6\uff0c\u5fc5\u987b\u8003\u8651\u7ebf\u7a0b\u95f4\u540c\u6b65\u4e0e\u4e92\u65a5\u95ee\u9898 \u4e09\u79cd\u7ebf\u7a0b\u540c\u6b65\u673a\u5236 \u2022\u4e92\u65a5\u9501 \u2022\u4fe1\u53f7\u91cf \u2022\u6761\u4ef6\u53d8\u91cf \u4e92\u65a5\u9501\u66f4\u9002\u5408\u540c\u65f6\u53ef\u7528\u7684\u8d44\u6e90\u662f\u60df\u4e00\u7684\u60c5\u51b5 \u4fe1\u53f7\u91cf\u66f4\u9002\u5408\u540c\u65f6\u53ef\u7528\u7684\u8d44\u6e90\u4e3a\u591a\u4e2a\u7684\u60c5\u51b5 \u4e92\u65a5\u9501 \u7528\u7b80\u5355\u7684\u52a0\u9501\u65b9\u6cd5\u63a7\u5236\u5bf9\u5171\u4eab\u8d44\u6e90\u7684\u539f\u5b50\u64cd\u4f5c \u53ea\u6709\u4e24\u79cd\u72b6\u6001: \u4e0a\u9501\u3001\u89e3\u9501 \u53ef\u628a\u4e92\u65a5\u9501\u770b\u4f5c\u67d0\u79cd\u610f\u4e49\u4e0a\u7684\u5168\u5c40\u53d8\u91cf \u5728\u540c\u4e00\u65f6\u523b\u53ea\u80fd\u6709\u4e00\u4e2a\u7ebf\u7a0b\u638c\u63e1\u67d0\u4e2a\u4e92\u65a5\u9501\uff0c\u62e5\u6709\u4e0a\u9501\u72b6\u6001\u7684\u7ebf\u7a0b\u80fd\u591f\u5bf9\u5171\u4eab\u8d44\u6e90\u8fdb\u884c\u64cd\u4f5c \u82e5\u5176\u4ed6\u7ebf\u7a0b\u5e0c\u671b\u4e0a\u9501\u4e00\u4e2a\u5df2\u7ecf\u88ab\u4e0a\u9501\u7684\u4e92\u65a5\u9501,\u5219\u8be5\u7ebf\u7a0b\u5c31\u4f1a\u6302\u8d77\uff0c\u76f4\u5230\u4e0a\u9501\u7684\u7ebf\u7a0b\u91ca\u653e\u6389\u4e92\u65a5\u9501\u4e3a\u6b62 \u4e92\u65a5\u9501\u4fdd\u8bc1\u8ba9\u6bcf\u4e2a\u7ebf\u7a0b\u5bf9\u5171\u4eab\u8d44\u6e90\u6309\u987a\u5e8f\u8fdb\u884c\u539f\u5b50\u64cd\u4f5c \u4e92\u65a5\u9501\u5206\u7c7b \u533a\u522b\u5728\u4e8e\u5176\u4ed6\u672a\u5360\u6709\u4e92\u65a5\u9501\u7684\u7ebf\u7a0b\u5728\u5e0c\u671b\u5f97\u5230\u4e92\u65a5\u9501\u65f6\u662f\u5426\u9700\u8981\u963b\u585e\u7b49\u5f85 \u5feb\u901f\u4e92\u65a5\u9501 \u2022\u8c03\u7528\u7ebf\u7a0b\u4f1a\u963b\u585e\u76f4\u81f3\u62e5\u6709\u4e92\u65a5\u9501\u7684\u7ebf\u7a0b\u89e3\u9501\u4e3a\u6b62 \u2022\u9ed8\u8ba4\u4e3a\u5feb\u901f\u4e92\u65a5\u9501 \u68c0\u9519\u4e92\u65a5\u9501 \u2022\u4e3a\u5feb\u901f\u4e92\u65a5\u9501\u7684\u975e\u963b\u585e\u7248\u672c\uff0c\u5b83\u4f1a\u7acb\u5373\u8fd4\u56de\u5e76\u8fd4\u56de\u4e00\u4e2a\u9519\u8bef\u4fe1\u606f \u4e92\u65a5\u9501\u4e3b\u8981\u5305\u62ec\u4e0b\u9762\u7684\u57fa\u672c\u51fd\u6570\uff1a \u4e92\u65a5\u9501\u521d\u59cb\u5316\uff1apthread_mutex_init() \u4e92\u65a5\u9501\u4e0a\u9501\uff1apthread_mutex_lock() \u4e92\u65a5\u9501\u5224\u65ad\u4e0a\u9501\uff1apthread_mutex_trylock() \u4e92\u65a5\u9501\u89e3\u9501\uff1apthread_mutex_unlock() \u6d88\u9664\u4e92\u65a5\u9501\uff1apthread_mutex_destroy() View Code \u548c\u4e0a\u4e00\u7248\u672c\u7684\u7a0b\u5e8f\u5dee\u5f02\u5728\u4e8e\u6709\u6ca1\u6709\u9501\uff0c\u6709\u9501\u7684\u60c5\u51b5\u4e0b\uff0c\u5fc5\u987b\u7b49\"thread x is exiting.\"\u4e4b\u540e\u5176\u4ed6\u7ebf\u7a0b\u624d\u80fd\u7ee7\u7eed\u3002 \u4fe1\u53f7\u91cf \u64cd\u4f5c\u7cfb\u7edf\u4e2d\u6240\u7528\u5230\u7684PV\u539f\u5b50\u64cd\u4f5c\uff0c\u5e7f\u6cdb\u7528\u4e8e\u8fdb\u7a0b\u6216\u7ebf\u7a0b\u95f4\u7684\u540c\u6b65\u4e0e\u4e92\u65a5 \u2022\u672c\u8d28\u4e0a\u662f\u4e00\u4e2a\u975e\u8d1f\u7684\u6574\u6570\u8ba1\u6570\u5668\uff0c\u88ab\u7528\u6765\u63a7\u5236\u5bf9\u516c\u5171\u8d44\u6e90\u7684\u8bbf\u95ee PV\u539f\u5b50\u64cd\u4f5c\uff1a\u5bf9\u6574\u6570\u8ba1\u6570\u5668\u4fe1\u53f7\u91cfsem\u7684\u64cd\u4f5c \u2022\u4e00\u6b21P\u64cd\u4f5c\u4f7fsem\u51cf\u4e00\uff0c\u800c\u4e00\u6b21V\u64cd\u4f5c\u4f7fsem\u52a0\u4e00 \u2022\u8fdb\u7a0b\uff08\u6216\u7ebf\u7a0b\uff09\u6839\u636e\u4fe1\u53f7\u91cf\u7684\u503c\u6765\u5224\u65ad\u662f\u5426\u5bf9\u516c\u5171\u8d44\u6e90\u5177\u6709\u8bbf\u95ee\u6743\u9650 \u2013\u5f53\u4fe1\u53f7\u91cfsem\u7684\u503c\u5927\u4e8e\u7b49\u4e8e\u96f6\u65f6\uff0c\u8be5\u8fdb\u7a0b\uff08\u6216\u7ebf\u7a0b\uff09\u5177\u6709\u516c\u5171\u8d44\u6e90\u7684\u8bbf\u95ee\u6743\u9650 \u2013\u5f53\u4fe1\u53f7\u91cfsem\u7684\u503c\u5c0f\u4e8e\u96f6\u65f6\uff0c\u8be5\u8fdb\u7a0b\uff08\u6216\u7ebf\u7a0b\uff09\u5c31\u5c06\u963b\u585e\u76f4\u5230\u4fe1\u53f7\u91cfsem\u7684\u503c\u5927\u4e8e\u7b49\u4e8e0\u4e3a\u6b62 PV\u64cd\u4f5c\u4e3b\u8981\u7528\u4e8e\u7ebf\u7a0b\u95f4\u7684\u540c\u6b65\u548c\u4e92\u65a5 \u4e92\u65a5\uff0c\u51e0\u4e2a\u7ebf\u7a0b\u53ea\u8bbe\u7f6e\u4e00\u4e2a\u4fe1\u53f7\u91cfsem \u540c\u6b65\uff0c\u4f1a\u8bbe\u7f6e\u591a\u4e2a\u4fe1\u53f7\u91cf\uff0c\u5b89\u6392\u4e0d\u540c\u521d\u503c\u6765\u5b9e\u73b0\u5b83\u4eec\u4e4b\u95f4\u7684\u987a\u5e8f\u6267\u884c \u4fe1\u53f7\u91cf\u51fd\u6570 sem_init() \u521b\u5efa\u4e00\u4e2a\u4fe1\u53f7\u91cf\uff0c\u5e76\u521d\u59cb\u5316\u5b83 sem_wait()\u548csem_trywait(): P\u64cd\u4f5c\uff0c\u5728\u4fe1\u53f7\u91cf\u5927\u4e8e\u96f6\u65f6\u5c06\u4fe1\u53f7\u91cf\u7684\u503c\u51cf\u4e00 \u2022\u533a\u522b: \u82e5\u4fe1\u53f7\u91cf\u5c0f\u4e8e\u96f6\u65f6\uff0csem_wait()\u5c06\u4f1a\u963b\u585e\u7ebf\u7a0b,sem_trywait()\u5219\u4f1a\u7acb\u5373\u8fd4\u56de sem_post(): V\u64cd\u4f5c\uff0c\u5c06\u4fe1\u53f7\u91cf\u7684\u503c\u52a0\u4e00\u540c\u65f6\u53d1\u51fa\u4fe1\u53f7\u6765\u5524\u9192\u7b49\u5f85\u7684\u7ebf\u7a0b sem_getvalue(): \u5f97\u5230\u4fe1\u53f7\u91cf\u7684\u503c sem_destroy(): \u5220\u9664\u4fe1\u53f7\u91cf eg. \u540c\u6b65\u5404\u7ebf\u7a0b\uff0c\u6267\u884c\u987a\u5e8f\u4e3a\u9006\u5e8f\u3002 View Code http://pic002.cnblogs.com/images/2012/350751/2012041520535874.jpg","title":"Linux C Thread"},{"location":"tech/snippets/thread_c/#linux-c-thread","text":"","title":"Linux C Thread"},{"location":"tech/snippets/thread_c/#techsnippet","text":"\u8fdb\u7a0b \u7cfb\u7edf\u4e2d\u7a0b\u5e8f\u6267\u884c\u548c\u8d44\u6e90\u5206\u914d\u7684\u57fa\u672c\u5355\u4f4d \u6bcf\u4e2a\u8fdb\u7a0b\u6709\u81ea\u5df1\u7684\u6570\u636e\u6bb5\u3001\u4ee3\u7801\u6bb5\u548c\u5806\u6808\u6bb5 \u5728\u8fdb\u884c\u5207\u6362\u65f6\u9700\u8981\u6709\u6bd4\u8f83\u590d\u6742\u7684\u4e0a\u4e0b\u6587\u5207\u6362 \u7ebf\u7a0b \u51cf\u5c11\u5904\u7406\u673a\u7684\u7a7a\u8f6c\u65f6\u95f4\uff0c\u652f\u6301\u591a\u5904\u7406\u5668\u4ee5\u53ca\u51cf\u5c11\u4e0a\u4e0b\u6587\u5207\u6362\u5f00\u9500, \u6bd4\u521b\u5efa\u8fdb\u7a0b\u5c0f\u5f88\u591a \u8fdb\u7a0b\u5185\u72ec\u7acb\u7684\u4e00\u6761\u8fd0\u884c\u8def\u7ebf \u5904\u7406\u5668\u8c03\u5ea6\u7684\u6700\u5c0f\u5355\u5143\uff0c\u4e5f\u79f0\u4e3a\u8f7b\u91cf\u7ea7\u8fdb\u7a0b \u53ef\u4ee5\u5bf9\u8fdb\u7a0b\u7684\u5185\u5b58\u7a7a\u95f4\u548c\u8d44\u6e90\u8fdb\u884c\u8bbf\u95ee\uff0c\u5e76\u4e0e\u540c\u4e00\u8fdb\u7a0b\u4e2d\u7684\u5176\u4ed6\u7ebf\u7a0b\u5171\u4eab \u7ebf\u7a0b \u3000\u3000\u7ebf\u7a0b\u76f8\u5173\u7684\u6267\u884c\u72b6\u6001\u548c\u5b58\u50a8\u53d8\u91cf\u653e\u5728 \u7ebf\u7a0b\u63a7\u5236\u8868 \u5185 \u4e00\u4e2a\u8fdb\u7a0b\u53ef\u4ee5\u6709\u591a\u4e2a\u7ebf\u7a0b\uff0c\u6709\u591a\u4e2a\u7ebf\u7a0b\u63a7\u5236\u8868\u53ca\u5806\u6808\u5bc4\u5b58\u5668\uff0c\u5171\u4eab\u4e00\u4e2a\u7528\u6237\u5730\u5740\u7a7a\u95f4 \u591a\u7ebf\u7a0b\u540c\u6b65\u95ee\u9898 \u7ebf\u7a0b\u5171\u4eab\u8fdb\u7a0b\u7684\u8d44\u6e90\u548c\u5730\u5740\u7a7a\u95f4 \u4efb\u4f55\u7ebf\u7a0b\u5bf9\u7cfb\u7edf\u8d44\u6e90\u7684\u64cd\u4f5c\u90fd\u4f1a\u7ed9\u5176\u4ed6\u7ebf\u7a0b\u5e26\u6765\u5f71\u54cd \u7ebf\u7a0b\u6280\u672f\u53d1\u5c55 Linux 2.2\u5185\u6838 \u2022\u4e0d\u5b58\u5728\u771f\u6b63\u610f\u4e49\u4e0a\u7684\u7ebf\u7a0b Linux 2 .4\u5185\u6838 \u2022\u6d88\u9664\u7ebf\u7a0b\u4e2a\u6570\u7684\u9650\u5236\uff0c\u5141\u8bb8\u52a8\u6001\u5730\u8c03\u6574\u8fdb\u7a0b\u6570\u4e0a\u9650 \u5728Linux \u5185\u68382.6\u4e4b\u524d\uff0c\u8fdb\u7a0b\u662f\u6700\u4e3b\u8981\u7684\u5904\u7406\u8c03\u5ea6\u5355\u5143\uff0c\u5e76\u6ca1\u652f\u6301\u5185\u6838\u7ebf\u7a0b\u673a\u5236 Linux 2.6\u5185\u6838 \u2022\u5b9e\u73b0\u5171\u4eab\u5730\u5740\u7a7a\u95f4\u7684\u8fdb\u7a0b\u673a\u5236, \u57281996\u5e74\u7b2c\u4e00\u6b21\u83b7\u5f97\u7ebf\u7a0b\u7684\u652f\u6301 \u7ebf\u7a0b\u6280\u672f\u53d1\u5c55 \u4e3a\u4e86\u6539\u5584LinuxThread\u95ee\u9898\uff0c\u6839\u636e\u65b0\u5185\u6838\u673a\u5236\u91cd\u65b0\u7f16\u5199\u7ebf\u7a0b\u5e93, \u6539\u5584Linux\u5bf9\u7ebf\u7a0b\u7684\u652f\u6301 \u2022\u7531IBM\u4e3b\u5bfc\u7684\u65b0\u4e00\u4ee3POSIX\u7ebf\u7a0b\u5e93\uff08Next Generation POSIX Threads\uff0c\u7b80\u79f0\u4e3aNGPT\uff09 \u2013NGPT\u9879\u76ee\u57282002\u5e74\u542f\u52a8 \u2013\u4e3a\u4e86\u907f\u514d\u51fa\u73b0\u6709\u591a\u4e2aLinux\u7ebf\u7a0b\u6807\u51c6\uff0c\u57282003\u5e74\u505c\u6b62\u8be5\u9879\u76ee \u2022\u7531Red Hat\u4e3b\u5bfc\u7684\u672c\u5730\u5316POSIX\u7ebf\u7a0b\u5e93 (Native POSIX Thread Library\uff0c\u7b80\u79f0\u4e3aNTPL) \u2013\u6700\u65e9\u5728Red Hat Linux9\u4e2d\u88ab\u652f\u6301 \u2013\u73b0\u5728\u5df2\u7ecf\u6210\u4e3aGNU C\u51fd\u6570\u5e93\u7684\u4e00\u90e8\u5206\uff0c\u540c\u65f6\u4e5f\u6210\u4e3aLinux\u7ebf\u7a0b\u7684\u6807\u51c6 \u7ebf\u7a0b\u6807\u8bc6 \u7ebf\u7a0bID \u2022\u8fdb\u7a0bID\u5728\u6574\u4e2a\u7cfb\u7edf\u4e2d\u662f\u552f\u4e00\u7684 \u2022\u7ebf\u7a0bID\u53ea\u5728\u5b83\u6240\u5c5e\u7684\u8fdb\u7a0b\u73af\u5883\u4e2d\u6709\u6548 \u51fd\u6570: pthread_self() \u7ebf\u7a0b\u6807\u8bc6 pthread_t\u7c7b\u578b\u901a\u5e38\u7528\u7ed3\u6784\u6765\u8868\u793a \u2022\u4e0d\u80fd\u628a\u5b83\u4f5c\u4e3a\u6574\u6570\u5904\u7406 \u2013Linux\u4f7f\u7528\u65e0\u7b26\u53f7\u957f\u6574\u6570\u8868\u793a \u2022\u4e3a\u4e86\u79fb\u690d\uff0c\u4f7f\u7528\u51fd\u6570\u6765\u6bd4\u8f83\u7ebf\u7a0bID \u51fd\u6570: pthread_equal() #include <stdio.h> #include <stdlib.h> #include <pthread.h> int main (){ pthread_t thread_id ; thread_id = pthread_self (); // \u8fd4\u56de\u8c03\u7528\u7ebf\u7a0b\u7684\u7ebf\u7a0bID printf ( \"Thread ID: %lu. \\n \" , thread_id ) if ( pthread_equal ( thread_id , pthread_self ())) { // if (thread_id==0) { printf ( \"Equal! \\n \" ); } else { printf ( \"Not equal! \\n \" ); } return 0 ; } \u7ebf\u7a0b\u7f16\u7a0b \u64cd\u4f5c\u7528\u6237\u7a7a\u95f4\u4e2d\u7684\u7ebf\u7a0b \u521b\u5efa\u7ebf\u7a0b \u2022\u8c03\u7528\u8be5\u7ebf\u7a0b\u51fd\u6570\u7684\u5165\u53e3\u70b9 \u2022\u4f7f\u7528\u51fd\u6570pthread_create()\uff0c\u7ebf\u7a0b\u521b\u5efa\u540e\uff0c\u5c31\u5f00\u59cb\u8fd0\u884c\u76f8\u5173\u7684\u7ebf\u7a0b\u51fd\u6570 #include <stdio.h> #include <stdlib.h> #include <pthread.h> void * thrd_func ( void * arg ); pthread_t tid ; int main (){ // \u521b\u5efa\u7ebf\u7a0btid\uff0c\u4e14\u7ebf\u7a0b\u51fd\u6570\u7531thrd_func\u6307\u5411\uff0c\u662fthrd_func\u7684\u5165\u53e3\u70b9\uff0c\u5373\u9a6c\u4e0a\u6267\u884c\u6b64\u7ebf\u7a0b\u51fd\u6570 if ( pthread_create ( & tid , NULL , thrd_func , NULL ) != 0 ) { printf ( \"Create thread error! \\n \" ); exit ( 1 ); } printf ( \"TID in pthread_create function: %u. \\n \" , tid ); printf ( \"Main process: PID: %d,TID: %u. \\n \" , getpid (), pthread_self ()); sleep ( 1 ); //race return 0 ; } void * thrd_func ( void * arg ){ // printf(\"I am new thread!\\n\"); printf ( \"New process: PID: %d,TID: %u. \\n \" , getpid (), pthread_self ()); //why pthread_self printf ( \"New process: PID: %d,TID: %u. \\n \" , getpid (), tid ); //why pthread_self pthread_exit ( NULL ); //\u9000\u51fa\u7ebf\u7a0b // return ((void *)0); } \u9000\u51fa\u7ebf\u7a0b \u2022\u5728\u7ebf\u7a0b\u51fd\u6570\u8fd0\u884c\u5b8c\u540e\uff0c\u8be5\u7ebf\u7a0b\u4e5f\u5c31\u9000\u51fa\u4e86 \u2022\u6216\u4f7f\u7528\u51fd\u6570pthread_exit()\uff0c\u8fd9\u662f\u7ebf\u7a0b\u7684\u4e3b\u52a8\u884c\u4e3a \u2022\u4e0d\u80fd\u4f7f\u7528exit() \u4f7f\u8c03\u7528\u8fdb\u7a0b\u7ec8\u6b62\uff0c\u6240\u6709\u7ebf\u7a0b\u90fd\u7ec8\u6b62\u4e86 \u7b49\u5f85\u7ebf\u7a0b \u2022\u7531\u4e8e\u4e00\u4e2a\u8fdb\u7a0b\u4e2d\u7684\u591a\u4e2a\u7ebf\u7a0b\u662f\u5171\u4eab\u6570\u636e\u6bb5\u7684\uff0c\u901a\u5e38\u5728\u7ebf\u7a0b\u9000\u51fa\u4e4b\u540e\uff0c\u9000\u51fa\u7ebf\u7a0b\u6240\u5360\u7528\u7684\u8d44\u6e90\u5e76\u4e0d\u4f1a\u968f\u7740\u7ebf\u7a0b\u7684\u7ec8\u6b62\u800c\u5f97\u5230\u91ca\u653e \u2022pthread_join()\u51fd\u6570 \u7c7b\u4f3c\u8fdb\u7a0b\u7684wait()/waitpid()\u51fd\u6570\uff0c\u7528\u4e8e\u5c06\u5f53\u524d\u7ebf\u7a0b\u6302\u8d77\u6765\u7b49\u5f85\u7ebf\u7a0b\u7684\u7ed3\u675f \u662f\u4e00\u4e2a\u7ebf\u7a0b\u963b\u585e\u7684\u51fd\u6570\uff0c\u8c03\u7528\u5b83\u7684\u7ebf\u7a0b\u4e00\u76f4\u7b49\u5f85\u5230\u88ab\u7b49\u5f85\u7684\u7ebf\u7a0b\u7ed3\u675f\u4e3a\u6b62 \u51fd\u6570\u8fd4\u56de\u65f6\uff0c\u88ab\u7b49\u5f85\u7ebf\u7a0b\u7684\u8d44\u6e90\u5c31\u88ab\u6536\u56de #include <stdio.h> #include <stdlib.h> #include <pthread.h> void * thrd_func1 ( void * arg ); void * thrd_func2 ( void * arg ); int main () { pthread_t tid1 , tid2 ; void * tret ; // \u521b\u5efa\u7ebf\u7a0btid1\uff0c\u7ebf\u7a0b\u51fd\u6570 thrd_func1 if ( pthread_create ( & tid1 , NULL , thrd_func1 , NULL ) != 0 ) { pr intf ( \"Create thread 1 error! \\n \" ); exit ( 1 ); } // \u521b\u5efa\u7ebf\u7a0btid2,\u7ebf\u7a0b\u51fd\u6570 thrd_func2 if ( pthread_create ( & tid2 , NULL , thrd_func2 , NULL ) != 0 ) { printf ( \"Create thread 2 error! \\n \" ); exit ( 1 ); 20 } // \u7b49\u5f85\u7ebf\u7a0btid1\u7ed3\u675f\uff0c\u7ebf\u7a0b\u51fd\u6570\u8fd4\u56de\u503c\u653e\u5728tret\u4e2d if ( pthread_jo in ( tid1 , & tret ) != 0 ) { printf ( \"Join thread 1 error! \\n \" ); exit ( 1 ); } printf ( \"Thread 1 exit code: %d. \\n \" , ( int * ) tret ); // \u7b49\u5f85tid2\u7ed3\u675f\uff0c\u7ebf\u7a0b\u51fd\u6570\u8fd4\u56de\u503c\u653e\u5728tret\u4e2d if ( pthread_join ( tid2 , & tret ) != 0 ) { printf ( \"Join thread 2 error! \\n \" ); exit ( 1 ); } printf ( \"Thread 2 exit code: %d. \\n \" , ( int * ) tret ); return 0 ; } void * thrd_func1 ( void * arg ) { printf ( \"Thread 1 returning! \\n \" ); // sleep(3); return (( void * ) 1 ); // \u81ea\u52a8\u9000\u51fa\u7ebf\u7a0b } void * thrd_func2 ( void * arg ) { printf ( \"Thread 2 exiting! \\n \" ); pthread_e xit (( void * ) 2 ); // \u7ebf\u7a0b\u4e3b\u52a8\u9000\u51fa\uff0c\u8fd4\u56de(void *)2 } \u53d6\u6d88\u7ebf\u7a0b \u2022\u5728\u522b\u7684\u7ebf\u7a0b\u4e2d\u8981\u7ec8\u6b62\u53e6\u4e00\u4e2a\u7ebf\u7a0b \u2022pthread_cancel()\u51fd\u6570 \u2022\u88ab\u53d6\u6d88\u7684\u7ebf\u7a0b\u53ef\u4ee5\u8bbe\u7f6e\u81ea\u5df1\u7684\u53d6\u6d88\u72b6\u6001 \u2013\u88ab\u53d6\u6d88\u7684\u7ebf\u7a0b\u63a5\u6536\u5230\u53e6\u4e00\u4e2a\u7ebf\u7a0b\u7684\u53d6\u6d88\u8bf7\u6c42\u4e4b\u540e\uff0c\u662f\u63a5\u53d7\u8fd8\u662f\u5ffd\u7565\u8fd9\u4e2a\u8bf7\u6c42 \u2013\u5982\u679c\u63a5\u53d7\uff0c\u662f\u7acb\u523b\u8fdb\u884c\u7ec8\u6b62\u64cd\u4f5c\u8fd8\u662f\u7b49\u5f85\u67d0\u4e2a\u51fd\u6570\u7684\u8c03\u7528\u7b49 #include <stdio.h> #include <stdlib.h> #include <pthread.h> void * thrd_func1 ( void * arg ); void * thrd_func2 ( void * arg ); pthread_t tid1 , tid2 ; int main () { // \u521b\u5efa\u7ebf\u7a0btid1\uff0c\u7ebf\u7a0b\u51fd\u6570thrd_func1 if ( pthread_create ( & tid1 , NULL , thrd_func1 , NULL ) != 0 ) { printf ( \"Create thread 1 error! \\n \" ); exit ( 1 ); } // \u521b\u5efa\u7ebf\u7a0btid2\uff0c\u7ebf\u7a0b\u51fd\u6570thrd_func2 if ( pthread_create ( & tid2 , NULL , thrd_func2 , NULL ) != 0 ) { printf ( \"Create thread 2 err or! \\n \" ); exit ( 1 ); } // \u7b49\u5f85\u7ebf\u7a0btid1\u9000\u51fa if ( pthread_join ( tid1 , NULL ) != 0 ) { printf ( \"Join thread 1 error! \\n \" ); exit ( 1 ); } else printf ( \"Thread 1 Joined! \\n \" ); // \u7b49\u5f85\u7ebf\u7a0btid2\u9000\u51fa if ( pthread_join ( tid2 , NULL ) != 0 ) { printf ( \"Join thread 2 error! \\n \" ); exit ( 1 ); } else printf ( \"Thread 2 Joined! \\n \" ); return 0 ; } void * thrd_func1 ( void * arg ) { // pthread_setcancelstate(PTHREAD_CANCEL_DISABLE,NULL); pthread_setcancelstate ( PTHREAD_CANCEL_ENABLE , NULL ); // \u8bbe\u7f6e\u5176\u4ed6\u7ebf\u7a0b\u53ef\u4ee5cancel\u6389\u6b64\u7ebf\u7a0b while ( 1 ) { printf ( \"Thread 1 is running! \\n \" ); sleep ( 1 ); } pthread_exit (( void * ) 0 ); } void * thrd_func2 ( void * arg ) { printf ( \"Thread 2 is running! \\n \" ); sleep ( 5 ); if ( pthread_canc el ( tid1 ) == 0 ) // \u7ebf\u7a0btid2\u5411\u7ebf\u7a0btid1\u53d1\u9001cancel printf ( \"Send Cancel cmd to Thread 1. \\n \" ); pthread_exit (( void * ) 0 ); } #include <stdio.h> #include <stdlib.h> #include <pthread.h> #define THREAD_NUM 3 #define REPEAT_TIMES 5 #define DELAY 4 void * thrd_func ( void * arg ); int main (){ pthread_t thread [ THREAD_NUM ]; int no ; void * tret ; srand (( int ) time ( 0 )); // \u521d\u59cb\u5316\u968f\u673a\u51fd\u6570\u53d1\u751f\u5668 for ( no = 0 ; no < THREAD_NUM ; no ++ ){ if ( pthread_create ( & thread [ no ], NULL , thrd_func ,( void * ) no ) != 0 ) { // \u521b\u5efaTHREAD_NUM\u4e2a\u7ebf\u7a0b\uff0c\u4f20\u5165(void*)no\u4f5c\u4e3athrd_func\u7684\u53c2\u6570 printf ( \"Create thread %d error! \\n \" , no ); exit ( 1 ); } else printf ( \"Create thread %d success! \\n \" , no ); } for ( no = 0 ; no < THREAD_NUM ; no ++ ){ if ( pthread_join ( thread [ no ], & tret ) != 0 ){ // \u7b49\u5f85thread[no]\u7ebf\u7a0b\u7ed3\u675f\uff0c\u7ebf\u7a0b\u51fd\u6570\u8fd4\u56de\u503c\u653e\u5728tret\u4e2d printf ( \"Join thread %d error! \\n \" , no ); exit ( 1 ); } else printf ( \"Join thread %d success! \\n \" , no ); } return 0 ; } void * thrd_func ( void * arg ){ int thrd_num = ( void * ) arg ; int delay_time = 0 ; int count = 0 ; printf ( \"Thread %d is starting. \\n \" , thrd_num ); for ( count = 0 ; count < REPEAT_TIMES ; count ++ ) { delay_time = ( int )( DELAY * ( rand () / ( double ) RAND_MAX )) + 1 ; sleep ( delay_time ); printf ( \" \\t Thread %d:job %d delay =%d. \\n \" , thrd_num , count , delay_time ); } printf ( \"Thread %d is exiting. \\n \" , thrd_num ); pthread_exit ( NULL ); } \u7ebf\u7a0b\u540c\u6b65\u4e0e\u4e92\u65a5 \u7ebf\u7a0b\u5171\u4eab\u8fdb\u7a0b\u7684\u8d44\u6e90\u548c\u5730\u5740\u7a7a\u95f4\uff0c\u5bf9\u8fd9\u4e9b\u8d44\u6e90\u8fdb\u884c\u64cd\u4f5c\u65f6\uff0c\u5fc5\u987b\u8003\u8651\u7ebf\u7a0b\u95f4\u540c\u6b65\u4e0e\u4e92\u65a5\u95ee\u9898 \u4e09\u79cd\u7ebf\u7a0b\u540c\u6b65\u673a\u5236 \u2022\u4e92\u65a5\u9501 \u2022\u4fe1\u53f7\u91cf \u2022\u6761\u4ef6\u53d8\u91cf \u4e92\u65a5\u9501\u66f4\u9002\u5408\u540c\u65f6\u53ef\u7528\u7684\u8d44\u6e90\u662f\u60df\u4e00\u7684\u60c5\u51b5 \u4fe1\u53f7\u91cf\u66f4\u9002\u5408\u540c\u65f6\u53ef\u7528\u7684\u8d44\u6e90\u4e3a\u591a\u4e2a\u7684\u60c5\u51b5 \u4e92\u65a5\u9501 \u7528\u7b80\u5355\u7684\u52a0\u9501\u65b9\u6cd5\u63a7\u5236\u5bf9\u5171\u4eab\u8d44\u6e90\u7684\u539f\u5b50\u64cd\u4f5c \u53ea\u6709\u4e24\u79cd\u72b6\u6001: \u4e0a\u9501\u3001\u89e3\u9501 \u53ef\u628a\u4e92\u65a5\u9501\u770b\u4f5c\u67d0\u79cd\u610f\u4e49\u4e0a\u7684\u5168\u5c40\u53d8\u91cf \u5728\u540c\u4e00\u65f6\u523b\u53ea\u80fd\u6709\u4e00\u4e2a\u7ebf\u7a0b\u638c\u63e1\u67d0\u4e2a\u4e92\u65a5\u9501\uff0c\u62e5\u6709\u4e0a\u9501\u72b6\u6001\u7684\u7ebf\u7a0b\u80fd\u591f\u5bf9\u5171\u4eab\u8d44\u6e90\u8fdb\u884c\u64cd\u4f5c \u82e5\u5176\u4ed6\u7ebf\u7a0b\u5e0c\u671b\u4e0a\u9501\u4e00\u4e2a\u5df2\u7ecf\u88ab\u4e0a\u9501\u7684\u4e92\u65a5\u9501,\u5219\u8be5\u7ebf\u7a0b\u5c31\u4f1a\u6302\u8d77\uff0c\u76f4\u5230\u4e0a\u9501\u7684\u7ebf\u7a0b\u91ca\u653e\u6389\u4e92\u65a5\u9501\u4e3a\u6b62 \u4e92\u65a5\u9501\u4fdd\u8bc1\u8ba9\u6bcf\u4e2a\u7ebf\u7a0b\u5bf9\u5171\u4eab\u8d44\u6e90\u6309\u987a\u5e8f\u8fdb\u884c\u539f\u5b50\u64cd\u4f5c \u4e92\u65a5\u9501\u5206\u7c7b \u533a\u522b\u5728\u4e8e\u5176\u4ed6\u672a\u5360\u6709\u4e92\u65a5\u9501\u7684\u7ebf\u7a0b\u5728\u5e0c\u671b\u5f97\u5230\u4e92\u65a5\u9501\u65f6\u662f\u5426\u9700\u8981\u963b\u585e\u7b49\u5f85 \u5feb\u901f\u4e92\u65a5\u9501 \u2022\u8c03\u7528\u7ebf\u7a0b\u4f1a\u963b\u585e\u76f4\u81f3\u62e5\u6709\u4e92\u65a5\u9501\u7684\u7ebf\u7a0b\u89e3\u9501\u4e3a\u6b62 \u2022\u9ed8\u8ba4\u4e3a\u5feb\u901f\u4e92\u65a5\u9501 \u68c0\u9519\u4e92\u65a5\u9501 \u2022\u4e3a\u5feb\u901f\u4e92\u65a5\u9501\u7684\u975e\u963b\u585e\u7248\u672c\uff0c\u5b83\u4f1a\u7acb\u5373\u8fd4\u56de\u5e76\u8fd4\u56de\u4e00\u4e2a\u9519\u8bef\u4fe1\u606f \u4e92\u65a5\u9501\u4e3b\u8981\u5305\u62ec\u4e0b\u9762\u7684\u57fa\u672c\u51fd\u6570\uff1a \u4e92\u65a5\u9501\u521d\u59cb\u5316\uff1apthread_mutex_init() \u4e92\u65a5\u9501\u4e0a\u9501\uff1apthread_mutex_lock() \u4e92\u65a5\u9501\u5224\u65ad\u4e0a\u9501\uff1apthread_mutex_trylock() \u4e92\u65a5\u9501\u89e3\u9501\uff1apthread_mutex_unlock() \u6d88\u9664\u4e92\u65a5\u9501\uff1apthread_mutex_destroy() View Code \u548c\u4e0a\u4e00\u7248\u672c\u7684\u7a0b\u5e8f\u5dee\u5f02\u5728\u4e8e\u6709\u6ca1\u6709\u9501\uff0c\u6709\u9501\u7684\u60c5\u51b5\u4e0b\uff0c\u5fc5\u987b\u7b49\"thread x is exiting.\"\u4e4b\u540e\u5176\u4ed6\u7ebf\u7a0b\u624d\u80fd\u7ee7\u7eed\u3002 \u4fe1\u53f7\u91cf \u64cd\u4f5c\u7cfb\u7edf\u4e2d\u6240\u7528\u5230\u7684PV\u539f\u5b50\u64cd\u4f5c\uff0c\u5e7f\u6cdb\u7528\u4e8e\u8fdb\u7a0b\u6216\u7ebf\u7a0b\u95f4\u7684\u540c\u6b65\u4e0e\u4e92\u65a5 \u2022\u672c\u8d28\u4e0a\u662f\u4e00\u4e2a\u975e\u8d1f\u7684\u6574\u6570\u8ba1\u6570\u5668\uff0c\u88ab\u7528\u6765\u63a7\u5236\u5bf9\u516c\u5171\u8d44\u6e90\u7684\u8bbf\u95ee PV\u539f\u5b50\u64cd\u4f5c\uff1a\u5bf9\u6574\u6570\u8ba1\u6570\u5668\u4fe1\u53f7\u91cfsem\u7684\u64cd\u4f5c \u2022\u4e00\u6b21P\u64cd\u4f5c\u4f7fsem\u51cf\u4e00\uff0c\u800c\u4e00\u6b21V\u64cd\u4f5c\u4f7fsem\u52a0\u4e00 \u2022\u8fdb\u7a0b\uff08\u6216\u7ebf\u7a0b\uff09\u6839\u636e\u4fe1\u53f7\u91cf\u7684\u503c\u6765\u5224\u65ad\u662f\u5426\u5bf9\u516c\u5171\u8d44\u6e90\u5177\u6709\u8bbf\u95ee\u6743\u9650 \u2013\u5f53\u4fe1\u53f7\u91cfsem\u7684\u503c\u5927\u4e8e\u7b49\u4e8e\u96f6\u65f6\uff0c\u8be5\u8fdb\u7a0b\uff08\u6216\u7ebf\u7a0b\uff09\u5177\u6709\u516c\u5171\u8d44\u6e90\u7684\u8bbf\u95ee\u6743\u9650 \u2013\u5f53\u4fe1\u53f7\u91cfsem\u7684\u503c\u5c0f\u4e8e\u96f6\u65f6\uff0c\u8be5\u8fdb\u7a0b\uff08\u6216\u7ebf\u7a0b\uff09\u5c31\u5c06\u963b\u585e\u76f4\u5230\u4fe1\u53f7\u91cfsem\u7684\u503c\u5927\u4e8e\u7b49\u4e8e0\u4e3a\u6b62 PV\u64cd\u4f5c\u4e3b\u8981\u7528\u4e8e\u7ebf\u7a0b\u95f4\u7684\u540c\u6b65\u548c\u4e92\u65a5 \u4e92\u65a5\uff0c\u51e0\u4e2a\u7ebf\u7a0b\u53ea\u8bbe\u7f6e\u4e00\u4e2a\u4fe1\u53f7\u91cfsem \u540c\u6b65\uff0c\u4f1a\u8bbe\u7f6e\u591a\u4e2a\u4fe1\u53f7\u91cf\uff0c\u5b89\u6392\u4e0d\u540c\u521d\u503c\u6765\u5b9e\u73b0\u5b83\u4eec\u4e4b\u95f4\u7684\u987a\u5e8f\u6267\u884c \u4fe1\u53f7\u91cf\u51fd\u6570 sem_init() \u521b\u5efa\u4e00\u4e2a\u4fe1\u53f7\u91cf\uff0c\u5e76\u521d\u59cb\u5316\u5b83 sem_wait()\u548csem_trywait(): P\u64cd\u4f5c\uff0c\u5728\u4fe1\u53f7\u91cf\u5927\u4e8e\u96f6\u65f6\u5c06\u4fe1\u53f7\u91cf\u7684\u503c\u51cf\u4e00 \u2022\u533a\u522b: \u82e5\u4fe1\u53f7\u91cf\u5c0f\u4e8e\u96f6\u65f6\uff0csem_wait()\u5c06\u4f1a\u963b\u585e\u7ebf\u7a0b,sem_trywait()\u5219\u4f1a\u7acb\u5373\u8fd4\u56de sem_post(): V\u64cd\u4f5c\uff0c\u5c06\u4fe1\u53f7\u91cf\u7684\u503c\u52a0\u4e00\u540c\u65f6\u53d1\u51fa\u4fe1\u53f7\u6765\u5524\u9192\u7b49\u5f85\u7684\u7ebf\u7a0b sem_getvalue(): \u5f97\u5230\u4fe1\u53f7\u91cf\u7684\u503c sem_destroy(): \u5220\u9664\u4fe1\u53f7\u91cf eg. \u540c\u6b65\u5404\u7ebf\u7a0b\uff0c\u6267\u884c\u987a\u5e8f\u4e3a\u9006\u5e8f\u3002 View Code http://pic002.cnblogs.com/images/2012/350751/2012041520535874.jpg","title":"tech/snippet"},{"location":"tech/snippets/ubuntu/","text":"ubuntu tech/snippet shutdown shortcut gnome-session-quit --power-off make fish shell default chsh -s which fish`` Unity Tweak Tool sudo add-apt-repository ppa:noobslab/themes sudo apt-get update sudo apt-get install flatabulous-theme sudo add-apt-repository ppa:noobslab/icons sudo apt-get update sudo apt-get install ultra-flat-icons","title":"ubuntu"},{"location":"tech/snippets/ubuntu/#ubuntu","text":"","title":"ubuntu"},{"location":"tech/snippets/ubuntu/#techsnippet","text":"shutdown shortcut gnome-session-quit --power-off make fish shell default chsh -s which fish`` Unity Tweak Tool sudo add-apt-repository ppa:noobslab/themes sudo apt-get update sudo apt-get install flatabulous-theme sudo add-apt-repository ppa:noobslab/icons sudo apt-get update sudo apt-get install ultra-flat-icons","title":"tech/snippet"},{"location":"tech/software_engineering/api_design/","text":"API Design Design end-to-end workflows instead of single APIs. Don't put too many classes directly under the same path for importing. It is hard for the user to auto-complete the class name since there would be too many candidates. The keywords in constructor should be accessible with the instance. (i.e. the constructor keywords should also be attributes or properties) If the parent class and the sub class share some args, the required arguments should be documented again in the sub class even they are the same. The arguments in kwargs can be not documented. For the ones not required and not in the kwargs, we should also document them even they are repeated in some other classes. In docstrings of a class, use Args or Arguments to specify the args of init. Use Attributes to specify the attributes which are not init args but publicly accessible. It is not a good practice for the user to provide a list, whose length is required to be a specific number. The user may easily miss some of the elements and got an error. Do not use acronym for any API related things exposed to the users unless it is a really well-known acronym. If the subclass doesn't support some kwarg, it should raise an error when user use it instead of ignore them silently.","title":"API Design"},{"location":"tech/software_engineering/api_design/#api-design","text":"Design end-to-end workflows instead of single APIs. Don't put too many classes directly under the same path for importing. It is hard for the user to auto-complete the class name since there would be too many candidates. The keywords in constructor should be accessible with the instance. (i.e. the constructor keywords should also be attributes or properties) If the parent class and the sub class share some args, the required arguments should be documented again in the sub class even they are the same. The arguments in kwargs can be not documented. For the ones not required and not in the kwargs, we should also document them even they are repeated in some other classes. In docstrings of a class, use Args or Arguments to specify the args of init. Use Attributes to specify the attributes which are not init args but publicly accessible. It is not a good practice for the user to provide a list, whose length is required to be a specific number. The user may easily miss some of the elements and got an error. Do not use acronym for any API related things exposed to the users unless it is a really well-known acronym. If the subclass doesn't support some kwarg, it should raise an error when user use it instead of ignore them silently.","title":"API Design"},{"location":"tech/software_engineering/design_pattern/","text":"Design Patterns tech/software engineering Factory. It generates objects of classes which extend the same class by checking the parameter which is the name of one of the classes. Then, these objects can be used in polymorphic. Note that if you want the factory to generate other objects besides the original ones you need to change the code of the factory. Abstract Factory There is an abstract class which several factories can derive from. Thus, they can generate different kind of objects extending different classes. Singleton It is a class has only one instance which already be generated. It can be used to store things which everybody need to access. Builder It assembles different parts to form an object. Prototype It cached the objects which can be load from elsewhere in it. It serves as an intermediate layer to reduce the number of loading operations. Adapter It allows the user to manage an object with interface B using the function of interface A. Bridge It split a functionality out of a class using a member whose type is an interface so that the classes which implement the interface do not need to extends the original class which require to contain everything. They only need to implement the interface to have that functionality. Filter It lets multiple concrete classes implementing the same filtering interface to filter the list of objects of another class. Composite It uses a class A which has a member of a list of instances of A. We are able to use it as nodes to create a tree like structure. Decorator It allows us to decorate an object of a class using a Decorator class which contains the object of the original class as its member and some methods to decorate the object like set its border color and so on. Facade It hides the complexities of the system and provides an interface to the client using which the client can access the system. Flyweight It help us to get or create the objects we want and reduce the number of objects created, too. It uses a hash-map to check whether the object we are ordering is already exist or not, depend on which the decision of whether to create one is made. Proxy It is a bit like Prototype design pattern. The only difference is that it only keeps the most recent visited object in it. Chain of Responsibilities It has many receivers. Each one contains another to form a chain. When the message is send to the first receiver, it decides whether to handle it or pass it to the next one. Command It wraps a request in an object as a command which is to pass to the invoker. The invoker find a way to executes those command. One way to execute is that all these commands implements the same interface which contains an execute method.","title":"Design Patterns"},{"location":"tech/software_engineering/design_pattern/#design-patterns","text":"","title":"Design Patterns"},{"location":"tech/software_engineering/design_pattern/#techsoftware-engineering","text":"Factory. It generates objects of classes which extend the same class by checking the parameter which is the name of one of the classes. Then, these objects can be used in polymorphic. Note that if you want the factory to generate other objects besides the original ones you need to change the code of the factory. Abstract Factory There is an abstract class which several factories can derive from. Thus, they can generate different kind of objects extending different classes. Singleton It is a class has only one instance which already be generated. It can be used to store things which everybody need to access. Builder It assembles different parts to form an object. Prototype It cached the objects which can be load from elsewhere in it. It serves as an intermediate layer to reduce the number of loading operations. Adapter It allows the user to manage an object with interface B using the function of interface A. Bridge It split a functionality out of a class using a member whose type is an interface so that the classes which implement the interface do not need to extends the original class which require to contain everything. They only need to implement the interface to have that functionality. Filter It lets multiple concrete classes implementing the same filtering interface to filter the list of objects of another class. Composite It uses a class A which has a member of a list of instances of A. We are able to use it as nodes to create a tree like structure. Decorator It allows us to decorate an object of a class using a Decorator class which contains the object of the original class as its member and some methods to decorate the object like set its border color and so on. Facade It hides the complexities of the system and provides an interface to the client using which the client can access the system. Flyweight It help us to get or create the objects we want and reduce the number of objects created, too. It uses a hash-map to check whether the object we are ordering is already exist or not, depend on which the decision of whether to create one is made. Proxy It is a bit like Prototype design pattern. The only difference is that it only keeps the most recent visited object in it. Chain of Responsibilities It has many receivers. Each one contains another to form a chain. When the message is send to the first receiver, it decides whether to handle it or pass it to the next one. Command It wraps a request in an object as a command which is to pass to the invoker. The invoker find a way to executes those command. One way to execute is that all these commands implements the same interface which contains an execute method.","title":"tech/software engineering"},{"location":"tech/software_engineering/design_review/","text":"Design Review tech/software engineering The content of a design review doc: End-to-end Workflows: Detailed Class Signatures Two ways to evaluate whether a design is good or not. 1. The complexity of the class communication graph. 2. How intuitive it is when you read the code. About the class communication graph: The ideal communication graph of a project would be a hierarchical one, where the classes only communicate with the parents (the classes using the class). If there are too many interconnections between the non-parent-child classes, it is a bad design. The parent and child relation should also be intuitive. About rewriting a project: Rewriting a project is a good way to keep the class structures simple. The cost of rewriting is a one time cost. The cost of not rewriting would be the cost of engineering efforts in the future as the project grows. The larger the project grows the more cost there will be. Therefore, for a long term project, we should always try to rewrite the project to keep the class structures simple. It would cost some now but less in the future.","title":"Design Review"},{"location":"tech/software_engineering/design_review/#design-review","text":"","title":"Design Review"},{"location":"tech/software_engineering/design_review/#techsoftware-engineering","text":"The content of a design review doc: End-to-end Workflows: Detailed Class Signatures Two ways to evaluate whether a design is good or not. 1. The complexity of the class communication graph. 2. How intuitive it is when you read the code. About the class communication graph: The ideal communication graph of a project would be a hierarchical one, where the classes only communicate with the parents (the classes using the class). If there are too many interconnections between the non-parent-child classes, it is a bad design. The parent and child relation should also be intuitive. About rewriting a project: Rewriting a project is a good way to keep the class structures simple. The cost of rewriting is a one time cost. The cost of not rewriting would be the cost of engineering efforts in the future as the project grows. The larger the project grows the more cost there will be. Therefore, for a long term project, we should always try to rewrite the project to keep the class structures simple. It would cost some now but less in the future.","title":"tech/software engineering"},{"location":"tech/software_engineering/git/","text":"Git tech/software engineering Basics The normal way to contribute to a public repo with git. https://github.com/junit-team/junit4/blob/e848a97320851c8614cf9712fa5e2b5092d82925/CONTRIBUTING.md Forked sync changes in the upstream repo: https://help.github.com/articles/configuring-a-remote-for-a-fork/ https://help.github.com/articles/syncing-a-fork / Delete a branch. git branch -d branch_name List all the branches. git branch Switch to a branch git checkout branch_name Git make the current branch exactly the same as upstream. git fetch upstream git reset --hard upstream/master git push -f origin [current_branch_name] Delete a branch remotely git push origin --delete <branchName> How to checkout a remote branch that doesn't exist locally? git branch -v -a To see all the branches available for checkout. git fetch git checkout <branch_name> The branch name should not contain origin/ or remotes/. How to deal with a detached HEAD? It is caused by checking out a remote branch directly like git checkout origin/devel Or caused by checkout a commit with SHA1. It is starting a new route from a previous node (commit). So you need to create a branch to save the changes on the detached HEAD. Just use git checkout -b <branch_name> is good enough. Show remote URL. git remote show origin Tags List the tags git tag Get pull the tags git fetch Add a tag git tag -a tag_name git push origin tag_name Undo Things How to undo a commit (not pushed to remote) to unstagged? git reset HEAD~ How to revert the last several commits? First you can use git reset <SHA1> and git push origin <branch_name> -f . However, this is not recommended, since it lost the information of those commits in the commit history. You should use revert. If only revert one commit, just git revert <SHA> . This command will directly fire a new commit for you to reverse the changes. If multiple revert, use git revert -n <SHA> multiple times for different commits in the latest to the oldest order. -n means do not auto fire a commit for it. If the commit to be reverted is a merge commit, use git revert -n <SHA> -m 1 to revert to the 1st branch or -m 2 to revert to the second branch. Then make a commit. It can only revert the last changes, instead of jumping over some commits and revert the previous ones. How to revert commits in the middle of the history? If we have commit A B C D E, and you want to revert B and C. You first git checkout -b <new_branch_name> <SHA of A> . Then cherry-pick the commits from D to E with git cherry-pick <SHA of D>..<SHA of E> . how to delete a tag? git tag -d [tag_name] git push origin :[tag_name] how to delete a release? click the release name. The delete button is on the top right. How to stash? We stash the uncommited changes and pull from remote and unstash them to apply. git stash git stash pop Clean Up rebase master -i Sync with Remote Force push the local changes. git push origin branch_name --force-with-lease Force pull. git checkout branch_name git fetch --all git reset --hard origin/branch_name Across Branches How to merge two branches? You can use git merge but not recommended. git rebase is more professional. For example, you are rebasing the master branch when you are on a feature branch. It would start from the current master branch head, and add the commits of your feature branch one by one to it. So that in the log of the current branch (feature) the commits from master would before the commits of the feature branch. If there is a conflict, it would stop and ask you to solve. You just solve it and git add the files with conflicts. and no commit is needed just use git rebase --continue to continue the rebase process. When push to the remote branch, it needs to use git push --force-with-release origin branch_name . How to cherry-pick? Just find the commit in other branch you need. And on the branch you want to add the commit, execute git cherry-pick <SHA> . Working on a branch with a dependence on another branch that is being reviewed feature_b is created like this git checkout feature_a git checkout -b feature_b update feature_b for the latest changes in feature_a git checkout feature_b git rebase feature_a When feature_a has been merged into master, you simply get the new master and rebase feature_a onto it a last time: git checkout master git pull origin master git checkout feature_b git rebase --onto master feature_a feature_b","title":"Git"},{"location":"tech/software_engineering/git/#git","text":"","title":"Git"},{"location":"tech/software_engineering/git/#techsoftware-engineering","text":"","title":"tech/software engineering"},{"location":"tech/software_engineering/git/#basics","text":"The normal way to contribute to a public repo with git. https://github.com/junit-team/junit4/blob/e848a97320851c8614cf9712fa5e2b5092d82925/CONTRIBUTING.md Forked sync changes in the upstream repo: https://help.github.com/articles/configuring-a-remote-for-a-fork/ https://help.github.com/articles/syncing-a-fork / Delete a branch. git branch -d branch_name List all the branches. git branch Switch to a branch git checkout branch_name Git make the current branch exactly the same as upstream. git fetch upstream git reset --hard upstream/master git push -f origin [current_branch_name] Delete a branch remotely git push origin --delete <branchName> How to checkout a remote branch that doesn't exist locally? git branch -v -a To see all the branches available for checkout. git fetch git checkout <branch_name> The branch name should not contain origin/ or remotes/. How to deal with a detached HEAD? It is caused by checking out a remote branch directly like git checkout origin/devel Or caused by checkout a commit with SHA1. It is starting a new route from a previous node (commit). So you need to create a branch to save the changes on the detached HEAD. Just use git checkout -b <branch_name> is good enough. Show remote URL. git remote show origin","title":"Basics"},{"location":"tech/software_engineering/git/#tags","text":"List the tags git tag Get pull the tags git fetch Add a tag git tag -a tag_name git push origin tag_name","title":"Tags"},{"location":"tech/software_engineering/git/#undo-things","text":"How to undo a commit (not pushed to remote) to unstagged? git reset HEAD~ How to revert the last several commits? First you can use git reset <SHA1> and git push origin <branch_name> -f . However, this is not recommended, since it lost the information of those commits in the commit history. You should use revert. If only revert one commit, just git revert <SHA> . This command will directly fire a new commit for you to reverse the changes. If multiple revert, use git revert -n <SHA> multiple times for different commits in the latest to the oldest order. -n means do not auto fire a commit for it. If the commit to be reverted is a merge commit, use git revert -n <SHA> -m 1 to revert to the 1st branch or -m 2 to revert to the second branch. Then make a commit. It can only revert the last changes, instead of jumping over some commits and revert the previous ones. How to revert commits in the middle of the history? If we have commit A B C D E, and you want to revert B and C. You first git checkout -b <new_branch_name> <SHA of A> . Then cherry-pick the commits from D to E with git cherry-pick <SHA of D>..<SHA of E> . how to delete a tag? git tag -d [tag_name] git push origin :[tag_name] how to delete a release? click the release name. The delete button is on the top right. How to stash? We stash the uncommited changes and pull from remote and unstash them to apply. git stash git stash pop","title":"Undo Things"},{"location":"tech/software_engineering/git/#clean-up","text":"rebase master -i","title":"Clean Up"},{"location":"tech/software_engineering/git/#sync-with-remote","text":"Force push the local changes. git push origin branch_name --force-with-lease Force pull. git checkout branch_name git fetch --all git reset --hard origin/branch_name","title":"Sync with Remote"},{"location":"tech/software_engineering/git/#across-branches","text":"","title":"Across Branches"},{"location":"tech/software_engineering/git/#how-to-merge-two-branches","text":"You can use git merge but not recommended. git rebase is more professional. For example, you are rebasing the master branch when you are on a feature branch. It would start from the current master branch head, and add the commits of your feature branch one by one to it. So that in the log of the current branch (feature) the commits from master would before the commits of the feature branch. If there is a conflict, it would stop and ask you to solve. You just solve it and git add the files with conflicts. and no commit is needed just use git rebase --continue to continue the rebase process. When push to the remote branch, it needs to use git push --force-with-release origin branch_name .","title":"How to merge two branches?"},{"location":"tech/software_engineering/git/#how-to-cherry-pick","text":"Just find the commit in other branch you need. And on the branch you want to add the commit, execute git cherry-pick <SHA> .","title":"How to cherry-pick?"},{"location":"tech/software_engineering/git/#working-on-a-branch-with-a-dependence-on-another-branch-that-is-being-reviewed","text":"feature_b is created like this git checkout feature_a git checkout -b feature_b update feature_b for the latest changes in feature_a git checkout feature_b git rebase feature_a When feature_a has been merged into master, you simply get the new master and rebase feature_a onto it a last time: git checkout master git pull origin master git checkout feature_b git rebase --onto master feature_a feature_b","title":"Working on a branch with a dependence on another branch that is being reviewed"},{"location":"tech/software_engineering/guide_for_technical_development/","text":"Guide for Technical Development Having a solid foundation in Computer Science is important to become a successful Software Engineer. This guide is a suggested path for university students to develop their technical skills academically and non-academically through self paced hands-on learning. You may use this guide to determine courses to take, but please make sure you are taking courses required for your major in order to graduate. The online resources provided in this guide are not meant to replace courses available at your university. However, they may help supplement your learning or provide an introduction to a topic. Using this guide: Please use this guide at your discretion There may be other things you want to learn or do outside of this guide - go for it! Checking off all items in this guide does not guarantee a job at Google This guide will evolve or change - check back for updates Follow our Google for Students +Page to get additional tips, resources, and other students interested in development. Recommendations for Academic Learnings Introduction to CS Course Take Introduction to Computer Science courses that provide basic instructions on coding. Online resources: Udacity - intro to CS course , Coursera - Computer Science 101 Code in at least one object oriented programming language: C++, Java, or Python Beginner Online Resources: Coursera - Learn to Program: The Fundamentals , MIT Intro to Programming in Java , Google's Python Class , Coursera - Introduction to Python , Python Open Source E-Book Intermediate Online Resources: Udacity's Design of Computer Programs , Coursera - Learn to Program: Crafting Quality Code , Coursera - Programming Languages , Brown University - Introduction to Programming Languages Learn other Programming Languages Notes: Add to your repertoire - JavaScript, CSS & HTML; Ruby; PHP; C; Perl; shell script; Lisp and Scheme. Online Resources: w3school.com - HTML Tutorial , Codecademy , Udacity - Mobile Web Development , Udacity - HTML5 Game Development Test Your Code Notes: Learn how to catch bugs, create tests, and break your software Online Resources: Udacity - Software Testing Methods , Udacity - Software Debugging Develop logical reasoning and knowledge of discrete math Online Resources: MIT Mathematics for Computer Science , Coursera - Introduction to Logic, Coursera - Linear and Discrete Optimization, Coursera - Probabilistic Graphical Models, Coursera - Game Theory Develop strong understanding of Algorithms and Data Structures Notes: Learn about fundamental data types (stack, queues, and bags), sorting algorithms (quicksort, mergesort, heapsort), data structures (binary search trees, red-black trees, hash tables), and Big O. Online Resources: MIT Introduction to Algorithms , Coursera Introduction to Algorithms Part 1 & Part 2 , List of Algorithms , List of Data Structures , Book: The Algorithm Design Manual Develop a strong knowledge of operating systems Online Resources: UC Berkeley Computer Science 162 Learn UX Design Online Resources: Udacity - UX Design for Mobile Developers Learn Artificial Intelligence Online Resources: Stanford University - Introduction to Robotics , Natural Language Processing , Machine Learning Learn how to build compilers Online Resources: Coursera - Compilers Learn cryptography Online Resources: Coursera - Cryptography , Udacity - Applied Cryptography Learn Parallel Programming Online Resources: Coursera - Heterogeneous Parallel Programming Work on project outside of the classroom. Notes: Create and maintain a website, build your own server, or build a robot. Online Resources: Apache List of Projects , Google Summer of Code , Google Developer Group Work on a small piece of a large system (codebase), read and understand existing code, track down documentation, and debug things. Notes: GitHub is a great way to read other people\u2019s code or contribute to a project. Online Resources: GitHub , Kiln Work on project with other programmers. Notes: This will help you improve your ability to work well in a team and enable you to learn from others. Practice your algorithmic knowledge and coding skills Notes: Practice your algorithmic knowledge through coding competitions like CodeJam or ACM\u2019s International Collegiate Programming Contest. Online Resources: CodeJam , ACM ICPC Become a Teaching Assistant Helping to teach other students will help enhance your knowledge in the subject matter. Internship experience in software engineering Notes: Make sure you apply for internships well in advance of the period internships take place. In the US, internships take place during the summer, May-September. Applications are usually accepted several months in advance. https://www.google.com/about/careers/students/guide-to-technical-development.html tech/software engineering","title":"Guide for Technical Development"},{"location":"tech/software_engineering/guide_for_technical_development/#guide-for-technical-development","text":"Having a solid foundation in Computer Science is important to become a successful Software Engineer. This guide is a suggested path for university students to develop their technical skills academically and non-academically through self paced hands-on learning. You may use this guide to determine courses to take, but please make sure you are taking courses required for your major in order to graduate. The online resources provided in this guide are not meant to replace courses available at your university. However, they may help supplement your learning or provide an introduction to a topic. Using this guide: Please use this guide at your discretion There may be other things you want to learn or do outside of this guide - go for it! Checking off all items in this guide does not guarantee a job at Google This guide will evolve or change - check back for updates Follow our Google for Students +Page to get additional tips, resources, and other students interested in development.","title":"Guide for Technical Development"},{"location":"tech/software_engineering/guide_for_technical_development/#recommendations-for-academic-learnings","text":"Introduction to CS Course Take Introduction to Computer Science courses that provide basic instructions on coding. Online resources: Udacity - intro to CS course , Coursera - Computer Science 101 Code in at least one object oriented programming language: C++, Java, or Python Beginner Online Resources: Coursera - Learn to Program: The Fundamentals , MIT Intro to Programming in Java , Google's Python Class , Coursera - Introduction to Python , Python Open Source E-Book Intermediate Online Resources: Udacity's Design of Computer Programs , Coursera - Learn to Program: Crafting Quality Code , Coursera - Programming Languages , Brown University - Introduction to Programming Languages Learn other Programming Languages Notes: Add to your repertoire - JavaScript, CSS & HTML; Ruby; PHP; C; Perl; shell script; Lisp and Scheme. Online Resources: w3school.com - HTML Tutorial , Codecademy , Udacity - Mobile Web Development , Udacity - HTML5 Game Development Test Your Code Notes: Learn how to catch bugs, create tests, and break your software Online Resources: Udacity - Software Testing Methods , Udacity - Software Debugging Develop logical reasoning and knowledge of discrete math Online Resources: MIT Mathematics for Computer Science , Coursera - Introduction to Logic, Coursera - Linear and Discrete Optimization, Coursera - Probabilistic Graphical Models, Coursera - Game Theory Develop strong understanding of Algorithms and Data Structures Notes: Learn about fundamental data types (stack, queues, and bags), sorting algorithms (quicksort, mergesort, heapsort), data structures (binary search trees, red-black trees, hash tables), and Big O. Online Resources: MIT Introduction to Algorithms , Coursera Introduction to Algorithms Part 1 & Part 2 , List of Algorithms , List of Data Structures , Book: The Algorithm Design Manual Develop a strong knowledge of operating systems Online Resources: UC Berkeley Computer Science 162 Learn UX Design Online Resources: Udacity - UX Design for Mobile Developers Learn Artificial Intelligence Online Resources: Stanford University - Introduction to Robotics , Natural Language Processing , Machine Learning Learn how to build compilers Online Resources: Coursera - Compilers Learn cryptography Online Resources: Coursera - Cryptography , Udacity - Applied Cryptography Learn Parallel Programming Online Resources: Coursera - Heterogeneous Parallel Programming Work on project outside of the classroom. Notes: Create and maintain a website, build your own server, or build a robot. Online Resources: Apache List of Projects , Google Summer of Code , Google Developer Group Work on a small piece of a large system (codebase), read and understand existing code, track down documentation, and debug things. Notes: GitHub is a great way to read other people\u2019s code or contribute to a project. Online Resources: GitHub , Kiln Work on project with other programmers. Notes: This will help you improve your ability to work well in a team and enable you to learn from others. Practice your algorithmic knowledge and coding skills Notes: Practice your algorithmic knowledge through coding competitions like CodeJam or ACM\u2019s International Collegiate Programming Contest. Online Resources: CodeJam , ACM ICPC Become a Teaching Assistant Helping to teach other students will help enhance your knowledge in the subject matter. Internship experience in software engineering Notes: Make sure you apply for internships well in advance of the period internships take place. In the US, internships take place during the summer, May-September. Applications are usually accepted several months in advance. https://www.google.com/about/careers/students/guide-to-technical-development.html","title":"Recommendations for Academic Learnings"},{"location":"tech/software_engineering/guide_for_technical_development/#techsoftware-engineering","text":"","title":"tech/software engineering"},{"location":"tech/software_engineering/java_log_best_practices/","text":"Java Log Best Practices What do I mean? There are lots of Java logging frameworks and libraries out there, and most developers use one or more of them every day. Two of the most common examples for Java developers are log4j and logback. They are simple and easy to use and work great for developers. Basic java log files are just not enough, though, but we have some Java best practices and tips to help you make the most of them! Have you ever had to work with your log files once your application left development? If so, you quickly run into a few pain points. There\u2019s a lot more data. You have to get access to the data. It\u2019s spread across multiple servers. A specific operation may be spread across applications \u2013 so even more logs to dig through. It\u2019s flat and hard to query; even if you do put it in SQL, you are going to have to do full-text indexing to make it usable. It\u2019s hard to read; messages are scrambled like spaghetti. You generally don\u2019t have any context of the user, etc. You probably lack some details that would be helpful. (You mean \u201clog.Info(\u2018In the method\u2019)\u201d isn\u2019t helpful???) You will be managing log file rotation and retention. Additionally, you have all this rich data about your app that is being generated and you simply aren\u2019t proactively putting it to work . It\u2019s Time to Get Serious About Logging Once you\u2019re working on an application that is not running on your desktop, logging messages (including exceptions) are usually your only lifeline to quickly discovering why something in your app isn\u2019t working correctly. Sure, APM tools can alert you to memory leaks and performance bottlenecks, but generally lack enough detail to help you solve a specific problem, i.e. why can\u2019t this user log in, or why isn\u2019t this record processing? At Stackify, we\u2019ve built a \u201cculture of logging\u201d which set out to accomplish these goals: Log all the things. Log as much as we possibly can, to always have relevant, contextual logs that don\u2019t add overhead. Work smarter, not harder. Consolidate and aggregate all of our logging to a central location, available to all devs, and easy to distil . Also, to find new ways for our logging and exception data to help us proactively improve our product. In this post, we\u2019ll explore these best practices, and share what we\u2019ve done to address it, much of which has become a part of Stackify\u2019s log management product. Also, if you haven\u2019t used Prefix to view your logs , be sure to check it out! Start Logging All the Things! I\u2019ve worked in a lot of shops where log messages looked like this: I\u2019ll give the developer credit; at least they are using a try/catch and handling the exception. The exception will likely have a stack trace so I know roughly where it came from, but no other context is logged. Sometimes, they even do some more proactive logging, like this: But generally, statements like that don\u2019t go a long way towards letting you know what\u2019s really happening in your app. If you\u2019re tasked with troubleshooting an error in production, and/or it is happening for just one (or a subset) of the application users, this doesn\u2019t leave you with a lot to go on, especially when considering your log statement could be a needle in a haystack in an app with lots of use. As I mentioned earlier, logging is often one of the few lifelines you have in production environments where you can\u2019t physically attach and debug. You want to log as much relevant, contextual data as you can. Here are our guiding principles on doing that. Walk the Code Let\u2019s pretend that you have a process that you want to add logging around so that you can look at what happened. You could just put a try / catch around the entire thing and handle the exceptions (which you should) but it doesn\u2019t tell you much about what was passed into the request . Take a look at the following, oversimplified example. public class Foo { private int id ; private double value ; public Foo ( int id , double value ) { this . id = id ; this . value = value ; } public int getId () { return id ; } public double getValue () { return value ; } } Take the following factory method , which creates a Foo. Note how I\u2019ve opened the door for error \u2013 the method takes a Double as an input parameter. I call doubleValue() but don\u2019t check for null. This could cause an exception. public class FooFactory { public static Foo createFoo ( int id , Double value ) { return new Foo ( id , value . doubleValue ()); } } This is a simple scenario, but it serves the purpose well. Assuming this is a really critical aspect of my Java app (can\u2019t have any failed Foos!) let\u2019s add some basic logging so we know what\u2019s going on. public class FooFactory { private static Logger LOGGER = LoggerFactory . getLogger ( FooFactory . class ); public static Foo createFoo ( int id , Double value ) { LOGGER . debug ( \"Creating a Foo\" ); try { Foo foo = new Foo ( id , value . doubleValue ()); LOGGER . debug ( \"{}\" , foo ); return foo ; } catch ( Exception e ) { LOGGER . error ( e . getMessage (), e ); } return null ; } } Now, let\u2019s create two foos; one that is valid and one that is not: FooFactory . createFoo ( 1 , Double . valueOf ( 33.0 )); FooFactory . createFoo ( 2 , null ); And now we can see some logging, and it looks like this: 2017-02-15 17:01:04,842 [main] DEBUG com.stackifytest.logging.FooFactory: Creating a Foo 2017-02-15 17:01:04,848 [main] DEBUG com.stackifytest.logging.FooFactory: com.stackifytest.logging.Foo@5d22bbb7 2017-02-15 17:01:04,849 [main] DEBUG com.stackifytest.logging.FooFactory: Creating a Foo 2017-02-15 17:01:04,851 [main] ERROR com.stackifytest.logging.FooFactory: java.lang.NullPointerException at com.stackifytest.logging.FooFactory.createFoo(FooFactory.java:15) at com.stackifytest.logging.FooFactoryTest.test(FooFactoryTest.java:11) Now we have some logging \u2013 we know when Foo objects are created, and when they fail to create in createFoo(). But we are missing some context that would help. The default toString() implementation doesn\u2019t build any data about the members of the object. We have some options here, but let\u2019s have the IDE generate an implementation for us. @Override public String toString () { return \"Foo [id=\" + id + \", value=\" + value + \"]\" ; } Run our test again: 2017-02-15 17:13:06,032 [main] DEBUG com.stackifytest.logging.FooFactory: Creating a Foo 2017-02-15 17:13:06,041 [main] DEBUG com.stackifytest.logging.FooFactory: Foo [id=1, value=33.0] 2017-02-15 17:13:06,041 [main] DEBUG com.stackifytest.logging.FooFactory: Creating a Foo 2017-02-15 17:13:06,043 [main] ERROR com.stackifytest.logging.FooFactory: java.lang.NullPointerException at com.stackifytest.logging.FooFactory.createFoo(FooFactory.java:15) at com.stackifytest.logging.FooFactoryTest.test(FooFactoryTest.java:11) Much better! Now we can see the object that was logged as \u201c[id=, value=]\u201d. Another option you have for toString is to use Javas\u2019 reflection capabilities. The main benefit here is that you don\u2019t have to modify the toString method when you add or remove members. Here is an example using Google\u2019s Gson library. Now, let\u2019s look at the output: 2017-02-15 17:22:55,584 [main] DEBUG com.stackifytest.logging.FooFactory: Creating a Foo 2017-02-15 17:22:55,751 [main] DEBUG com.stackifytest.logging.FooFactory: {\"id\":1,\"value\":33.0} 2017-02-15 17:22:55,754 [main] DEBUG com.stackifytest.logging.FooFactory: Creating a Foo 2017-02-15 17:22:55,760 [main] ERROR com.stackifytest.logging.FooFactory: java.lang.NullPointerException at com.stackifytest.logging.FooFactory.createFoo(FooFactory.java:15) at com.stackifytest.logging.FooFactoryTest.test(FooFactoryTest.java:11) When you log objects as JSON and use Stackify\u2019s Retrace tool, you can get some nice details like this: Retrace Logging Dashboard JSON Viewer Logging More Details with Diagnostic Contexts And this brings us to one last point on logging more details: diagnostic context logging. When it comes to debugging a production issue, you might have the \u201cCreating a Foo\u201d message thousands of times in your logs, but with no clue who the logged in user was that created it. Know who the user was is the sort of context that is priceless in being able to quickly resolve an issue. Think about what other detail might be useful \u2013 for example, HttpWebRequest details. But who wants to have to remember to log it every time? Diagnostic context logging to the rescue, specifically the mapped diagnostic context. Read more about SLF4J\u2019s MDC here: https://logback.qos.ch/manual/mdc.html . The easiest way to add context items to your logging is usually a servlet filter. For this example, let\u2019s create a servlet filter that generates a transaction id and attaches it to the MDC. public class LogContextFilter implements Filter { public void init ( FilterConfig config ) { } public void destroy () { } public void doFilter ( ServletRequest request , ServletResponse response , FilterChain chain ) throws ServletException , IOException { String transactionId = UUID . randomUUID (). toString (); MDC . put ( \"TRANS_ID\" , transactionId ); try { chain . doFilter ( request , response ); } finally { MDC . clear (); } } } Now, we can see some log statements like this: More context. We can now trace all log statements from a single request. This brings us to the next topic, which is Work Harder, Not Smarter. But before that, I\u2019m going to address a question I\u2019m sure to hear a lot of in the comments: \u201cBut if I log everything won\u2019t that create overhead, unnecessary chatter, and huge log files?\u201d My answer comes in a couple of parts: first, use the logging verbosity levels. you can LOGGER.debug() everything you think you\u2019ll need , and then set your config for production appropriately, i.e. Warning and above only. When you do need the debug info, it\u2019s only changing a config file and not redeploying code. Second, if you\u2019re logging in an async, non-blocking way , then overhead should be low. Last, if you\u2019re worried about space and log file rotation, there are smarter ways to do it, and we\u2019ll talk about that in the next section. Work Smarter, Not Harder Now that we\u2019re logging everything , and it\u2019s providing more contextual data, we\u2019re going to look at the next part of the equation. As I\u2019ve mentioned, and demonstrated, just dumping all of this out to flat files still doesn\u2019t help you out a lot in a large, complex application and environment. Factor in thousands of requests, files spanning multiple days, weeks, or longer, and across multiple servers, you have to consider how you are going to quickly find the data that you need. What we all really need is a solution that provides: Aggregates all Log & Exception data to one place Makes it available, instantly, to everyone on your team Presents a timeline of logging throughout your entire stack/infrastructure Is highly indexed and searchable by being in a structured format This is the part where I tell you about Stackify Retrace . As we sought to improve our own abilities to quickly and efficiently work with our log data, we decided to make it a core part of our product (yes, we use Stackify to monitor Stackify) and share with our customers, since we believe it\u2019s an issue central to application troubleshooting. First, we realize that lots of developers already have logging in place, and aren\u2019t going to want to take a lot of time to rip that code out and put new code in. That\u2019s why we\u2019ve created logging appenders for the most common Java logging frameworks. Continuing with log4j as a sample, the setup is easy. Just add the Stackify appender to your project\u2019s maven pom file. <dependency> <groupId>com.stackify</groupId> <artifactId>stackify-log-log4j12</artifactId> <version>1.1.9</version> <scope>runtime</scope> </dependency> Also, add in some configuration for the Stackify appender to your logging.properties file. log4j.rootLogger=DEBUG, CONSOLE, STACKIFY log4j.appender.CONSOLE=org.apache.log4j.ConsoleAppender log4j.appender.CONSOLE.layout=org.apache.log4j.PatternLayout log4j.appender.CONSOLE.layout.ConversionPattern=%d [%t] %-5p %c: %m%n log4j.appender.STACKIFY=com.stackify.log.log4j12.StackifyLogAppender log4j.appender.STACKIFY.apiKey=[HIDDEN] log4j.appender.STACKIFY.application=test-logging log4j.appender.STACKIFY.environment=test As you can see, if you\u2019re already using a different appender, you can keep it in place and put them side-by-side. Now that you\u2019ve got your logs streaming to Stackify we can take a look at the logging dashboard. (By the way, if our monitoring agent is installed, you can also send Syslog entries to Stackify as well!) This dashboard shows a consolidated stream of log data, coming from all your servers and apps, presented in a timeline. From here, you can quickly View logs based on a range of time Filter for specific servers, apps, or environments Plus there are a couple of really great usability things built in. One of the first things you\u2019ll notice is that chart at the top. It\u2019s a great way to quickly \u201ctriage\u201d your application. The blue line indicates the rate of log messages, and the red bars indicate # of exceptions being logged . It\u2019s clear that a few minutes ago, my web app started having a lot more consistent activity but more importantly, we started getting more exceptions about the same time. Exceptions don\u2019t come without overhead for your CPU and memory, and they also can have a direct impact on user satisfaction, which can cost real money. By zooming in on the chart to this time period, I can quickly filter my log detail down to that time range and take a look at the logs for that period of time. Searching Your Logs Do you see that blue text below that looks like a JSON object? Well, it is a JSON object. That\u2019s the result of logging objects, and adding context properties earlier. It looks a lot nicer than plain text in a flat file, doesn\u2019t it? Well, it gets even more awesome. See the search box at the top of the page? I can put in any search string that I can think of, and it will query all my logs as if it were a flat file . As we discussed earlier, however, this isn\u2019t great because you could end up with a lot more matches than you want. Suppose that I want to search for all objects with an id of 5. Fortunately, our log aggregator is smart enough to help in this situation. That\u2019s because when we find serialized objects in logs, we index each and every field we find. That makes it easy to perform a search like this: json.idNumber:5.0 That search yields the following results: Want to know what else you can search by? Just click on the document icon when you hover over a log record, and you\u2019ll see all the fields that Stackify indexes. Being able to get more value out of your logs and search by all the fields is called structured logging . Exploring Java Exception Details You may have also noticed this little red bug icon ( ) next to exception messages. That\u2019s because we treat exceptions differently by automatically showing more context. Click on it and we present a deeper view of that exception. Our libraries not only grab the full stack trace, but all of the web request details, including headers, query strings, and server variables, when available. In this modal, there is a \u201cLogs\u201d tab which gives you a pre-filtered view of the logging from the app that threw the error, on the server where it occurred, for a narrow time window before and after the exception, to give more context around the exception. Curious about how common or frequent this error occurs, or want to see details on other occurrences? Click the \u201cView All Occurrences\u201d button and voila! I can quickly see this error has occurred 60 times over the last hour. Errors and logs are closely related, and in an app where a tremendous amount of logging can occur, exceptions could sometimes get a bit lost in the noise. That\u2019s why we\u2019ve built an Errors Dashboard as well, to give you this same consolidated view but limited to exceptions. Here I can see a couple of great pieces of data: I\u2019ve had an uptick in my rate of exceptions over the past few minutes. The majority of my errors are coming from my \u201ctest\u201d environment \u2013 to the tune of about 84 per hour. I have a couple of new errors that have just started occurring (as indicated by the red triangles). Have you ever put a new release of your app out to production and wondered what QA missed? (Not that I\u2019m saying QA would ever miss a bug\u2026\u2026) Error Dashboard to the rescue. You can watch real time and see a trend \u2013 lots of red triangles, lots of new bugs. Big spike in the graph? Perhaps you have an increase in usage, so a previously known error is being hit more; perhaps some buggy code (like a leaking SQL connection pool) went out and is causing a higher rate of SQL timeout errors than normal. It\u2019s not hard to imagine a lot of different scenarios for which this could provide early warning and detection. Hmm. Early warning and detection. That brings up another great topic. Monitor Wouldn\u2019t it be nice to be alerted when An error rate for a specific app or environment suddenly increases? An error that was specifically resolved starts happening again? A certain action that you log does not happen enough, too often, etc? Stackify can do all of that. Let\u2019s take a look at each. Error Rates When we looked at the error dashboard, I noted that my \u2018test\u2019 environment is getting a high number of errors per hour. From the Error dashboard, click on \u201cError Rates\u201d and then select which app/environment you wish to configure alerts for: I can configure monitors for \u201cErrors/Minute\u201d and \u201cTotal Errors Last 60 minutes\u201d and then choose the \u201cNotifications\u201d tab to specify who should be alerted, and how. Subsequently, if using Stackify Monitoring, I can configure all of my other alerting here as well: App running state, memory usage, performance counters, custom metrics, ping checks, and more. Resolved Errors & New Errors Earlier on, I introduced a new error by not checking for null values when creating Foo objects. I\u2019ve since fixed that and confirmed it by looking at the details for that particular error. As you can see, the last time it happened was 12 minutes ago: It was a silly mistake, but one that is easy to make. I\u2019m going to mark this one as \u201cresolved\u201d which lets me do something really cool: get an alert if it comes back. The Notifications menu will let me check my configuration, and by default, I\u2019m set to receive both new and regressed error notifications for all my apps and environments. Now, if the same error occurs again in the future, I\u2019m going to get an email about the regression and it shows up on the dashboard as such. This is a great little bit of automation to help out when you \u201cthink\u201d you\u2019ve solved the issue and want to make sure. Log Monitors Some things aren\u2019t very straightforward to monitor. Perhaps you have a critical process that runs asynchronously and the only record of its success (or failure) is logging statements. Earlier in this post, I showed the ability to run deep queries against your structured log data , and any of those queries can be saved and monitored. I\u2019ve got a very simple scenario here: my query is executed every minute, and we can monitor how many matching records we have. It\u2019s just a great simple way to check system health if a log file is your only indication. Java Logging Best Practices All of this error and log data can be invaluable, especially when you take a step back and look at a slightly larger picture. Below is the Application Dashboard for a Java web app that contains all of the monitoring: As you can see, you get some great contextual data at a glance that errors and logs contribute to: Satisfaction and HTTP Error Rate. You can see that user satisfaction is high and the HTTP error rate is low. You can quickly start drilling down to see which pages might not be performing well, and what errors are occurring: There was a lot to cover in this post, and I feel like I barely scratched the surface. If you dig a little deeper or even get your hands on it, you can! I hope that these Java logging best practices will help you write better logs and save time troubleshooting. All of our Java logging appenders are available on GitHub and you can sign up for a free trial to get started with Stackify today! Java Best Practices for Smarter Application Logging & Exception Handling","title":"Java Log Best Practices"},{"location":"tech/software_engineering/java_log_best_practices/#java-log-best-practices","text":"What do I mean? There are lots of Java logging frameworks and libraries out there, and most developers use one or more of them every day. Two of the most common examples for Java developers are log4j and logback. They are simple and easy to use and work great for developers. Basic java log files are just not enough, though, but we have some Java best practices and tips to help you make the most of them! Have you ever had to work with your log files once your application left development? If so, you quickly run into a few pain points. There\u2019s a lot more data. You have to get access to the data. It\u2019s spread across multiple servers. A specific operation may be spread across applications \u2013 so even more logs to dig through. It\u2019s flat and hard to query; even if you do put it in SQL, you are going to have to do full-text indexing to make it usable. It\u2019s hard to read; messages are scrambled like spaghetti. You generally don\u2019t have any context of the user, etc. You probably lack some details that would be helpful. (You mean \u201clog.Info(\u2018In the method\u2019)\u201d isn\u2019t helpful???) You will be managing log file rotation and retention. Additionally, you have all this rich data about your app that is being generated and you simply aren\u2019t proactively putting it to work .","title":"Java Log Best Practices"},{"location":"tech/software_engineering/java_log_best_practices/#its-time-to-get-serious-about-logging","text":"Once you\u2019re working on an application that is not running on your desktop, logging messages (including exceptions) are usually your only lifeline to quickly discovering why something in your app isn\u2019t working correctly. Sure, APM tools can alert you to memory leaks and performance bottlenecks, but generally lack enough detail to help you solve a specific problem, i.e. why can\u2019t this user log in, or why isn\u2019t this record processing? At Stackify, we\u2019ve built a \u201cculture of logging\u201d which set out to accomplish these goals: Log all the things. Log as much as we possibly can, to always have relevant, contextual logs that don\u2019t add overhead. Work smarter, not harder. Consolidate and aggregate all of our logging to a central location, available to all devs, and easy to distil . Also, to find new ways for our logging and exception data to help us proactively improve our product. In this post, we\u2019ll explore these best practices, and share what we\u2019ve done to address it, much of which has become a part of Stackify\u2019s log management product. Also, if you haven\u2019t used Prefix to view your logs , be sure to check it out!","title":"It\u2019s Time to Get Serious About Logging"},{"location":"tech/software_engineering/java_log_best_practices/#start-logging-all-the-things","text":"I\u2019ve worked in a lot of shops where log messages looked like this: I\u2019ll give the developer credit; at least they are using a try/catch and handling the exception. The exception will likely have a stack trace so I know roughly where it came from, but no other context is logged. Sometimes, they even do some more proactive logging, like this: But generally, statements like that don\u2019t go a long way towards letting you know what\u2019s really happening in your app. If you\u2019re tasked with troubleshooting an error in production, and/or it is happening for just one (or a subset) of the application users, this doesn\u2019t leave you with a lot to go on, especially when considering your log statement could be a needle in a haystack in an app with lots of use. As I mentioned earlier, logging is often one of the few lifelines you have in production environments where you can\u2019t physically attach and debug. You want to log as much relevant, contextual data as you can. Here are our guiding principles on doing that.","title":"Start   Logging All the Things!"},{"location":"tech/software_engineering/java_log_best_practices/#walk-the-code","text":"Let\u2019s pretend that you have a process that you want to add logging around so that you can look at what happened. You could just put a try / catch around the entire thing and handle the exceptions (which you should) but it doesn\u2019t tell you much about what was passed into the request . Take a look at the following, oversimplified example. public class Foo { private int id ; private double value ; public Foo ( int id , double value ) { this . id = id ; this . value = value ; } public int getId () { return id ; } public double getValue () { return value ; } } Take the following factory method , which creates a Foo. Note how I\u2019ve opened the door for error \u2013 the method takes a Double as an input parameter. I call doubleValue() but don\u2019t check for null. This could cause an exception. public class FooFactory { public static Foo createFoo ( int id , Double value ) { return new Foo ( id , value . doubleValue ()); } } This is a simple scenario, but it serves the purpose well. Assuming this is a really critical aspect of my Java app (can\u2019t have any failed Foos!) let\u2019s add some basic logging so we know what\u2019s going on. public class FooFactory { private static Logger LOGGER = LoggerFactory . getLogger ( FooFactory . class ); public static Foo createFoo ( int id , Double value ) { LOGGER . debug ( \"Creating a Foo\" ); try { Foo foo = new Foo ( id , value . doubleValue ()); LOGGER . debug ( \"{}\" , foo ); return foo ; } catch ( Exception e ) { LOGGER . error ( e . getMessage (), e ); } return null ; } } Now, let\u2019s create two foos; one that is valid and one that is not: FooFactory . createFoo ( 1 , Double . valueOf ( 33.0 )); FooFactory . createFoo ( 2 , null ); And now we can see some logging, and it looks like this: 2017-02-15 17:01:04,842 [main] DEBUG com.stackifytest.logging.FooFactory: Creating a Foo 2017-02-15 17:01:04,848 [main] DEBUG com.stackifytest.logging.FooFactory: com.stackifytest.logging.Foo@5d22bbb7 2017-02-15 17:01:04,849 [main] DEBUG com.stackifytest.logging.FooFactory: Creating a Foo 2017-02-15 17:01:04,851 [main] ERROR com.stackifytest.logging.FooFactory: java.lang.NullPointerException at com.stackifytest.logging.FooFactory.createFoo(FooFactory.java:15) at com.stackifytest.logging.FooFactoryTest.test(FooFactoryTest.java:11) Now we have some logging \u2013 we know when Foo objects are created, and when they fail to create in createFoo(). But we are missing some context that would help. The default toString() implementation doesn\u2019t build any data about the members of the object. We have some options here, but let\u2019s have the IDE generate an implementation for us. @Override public String toString () { return \"Foo [id=\" + id + \", value=\" + value + \"]\" ; } Run our test again: 2017-02-15 17:13:06,032 [main] DEBUG com.stackifytest.logging.FooFactory: Creating a Foo 2017-02-15 17:13:06,041 [main] DEBUG com.stackifytest.logging.FooFactory: Foo [id=1, value=33.0] 2017-02-15 17:13:06,041 [main] DEBUG com.stackifytest.logging.FooFactory: Creating a Foo 2017-02-15 17:13:06,043 [main] ERROR com.stackifytest.logging.FooFactory: java.lang.NullPointerException at com.stackifytest.logging.FooFactory.createFoo(FooFactory.java:15) at com.stackifytest.logging.FooFactoryTest.test(FooFactoryTest.java:11) Much better! Now we can see the object that was logged as \u201c[id=, value=]\u201d. Another option you have for toString is to use Javas\u2019 reflection capabilities. The main benefit here is that you don\u2019t have to modify the toString method when you add or remove members. Here is an example using Google\u2019s Gson library. Now, let\u2019s look at the output: 2017-02-15 17:22:55,584 [main] DEBUG com.stackifytest.logging.FooFactory: Creating a Foo 2017-02-15 17:22:55,751 [main] DEBUG com.stackifytest.logging.FooFactory: {\"id\":1,\"value\":33.0} 2017-02-15 17:22:55,754 [main] DEBUG com.stackifytest.logging.FooFactory: Creating a Foo 2017-02-15 17:22:55,760 [main] ERROR com.stackifytest.logging.FooFactory: java.lang.NullPointerException at com.stackifytest.logging.FooFactory.createFoo(FooFactory.java:15) at com.stackifytest.logging.FooFactoryTest.test(FooFactoryTest.java:11) When you log objects as JSON and use Stackify\u2019s Retrace tool, you can get some nice details like this: Retrace Logging Dashboard JSON Viewer","title":"Walk the Code"},{"location":"tech/software_engineering/java_log_best_practices/#logging-more-details-with-diagnostic-contexts","text":"And this brings us to one last point on logging more details: diagnostic context logging. When it comes to debugging a production issue, you might have the \u201cCreating a Foo\u201d message thousands of times in your logs, but with no clue who the logged in user was that created it. Know who the user was is the sort of context that is priceless in being able to quickly resolve an issue. Think about what other detail might be useful \u2013 for example, HttpWebRequest details. But who wants to have to remember to log it every time? Diagnostic context logging to the rescue, specifically the mapped diagnostic context. Read more about SLF4J\u2019s MDC here: https://logback.qos.ch/manual/mdc.html . The easiest way to add context items to your logging is usually a servlet filter. For this example, let\u2019s create a servlet filter that generates a transaction id and attaches it to the MDC. public class LogContextFilter implements Filter { public void init ( FilterConfig config ) { } public void destroy () { } public void doFilter ( ServletRequest request , ServletResponse response , FilterChain chain ) throws ServletException , IOException { String transactionId = UUID . randomUUID (). toString (); MDC . put ( \"TRANS_ID\" , transactionId ); try { chain . doFilter ( request , response ); } finally { MDC . clear (); } } } Now, we can see some log statements like this: More context. We can now trace all log statements from a single request. This brings us to the next topic, which is Work Harder, Not Smarter. But before that, I\u2019m going to address a question I\u2019m sure to hear a lot of in the comments: \u201cBut if I log everything won\u2019t that create overhead, unnecessary chatter, and huge log files?\u201d My answer comes in a couple of parts: first, use the logging verbosity levels. you can LOGGER.debug() everything you think you\u2019ll need , and then set your config for production appropriately, i.e. Warning and above only. When you do need the debug info, it\u2019s only changing a config file and not redeploying code. Second, if you\u2019re logging in an async, non-blocking way , then overhead should be low. Last, if you\u2019re worried about space and log file rotation, there are smarter ways to do it, and we\u2019ll talk about that in the next section.","title":"Logging More Details with Diagnostic Contexts"},{"location":"tech/software_engineering/java_log_best_practices/#work-smarter-not-harder","text":"Now that we\u2019re logging everything , and it\u2019s providing more contextual data, we\u2019re going to look at the next part of the equation. As I\u2019ve mentioned, and demonstrated, just dumping all of this out to flat files still doesn\u2019t help you out a lot in a large, complex application and environment. Factor in thousands of requests, files spanning multiple days, weeks, or longer, and across multiple servers, you have to consider how you are going to quickly find the data that you need. What we all really need is a solution that provides: Aggregates all Log & Exception data to one place Makes it available, instantly, to everyone on your team Presents a timeline of logging throughout your entire stack/infrastructure Is highly indexed and searchable by being in a structured format This is the part where I tell you about Stackify Retrace . As we sought to improve our own abilities to quickly and efficiently work with our log data, we decided to make it a core part of our product (yes, we use Stackify to monitor Stackify) and share with our customers, since we believe it\u2019s an issue central to application troubleshooting. First, we realize that lots of developers already have logging in place, and aren\u2019t going to want to take a lot of time to rip that code out and put new code in. That\u2019s why we\u2019ve created logging appenders for the most common Java logging frameworks. Continuing with log4j as a sample, the setup is easy. Just add the Stackify appender to your project\u2019s maven pom file. <dependency> <groupId>com.stackify</groupId> <artifactId>stackify-log-log4j12</artifactId> <version>1.1.9</version> <scope>runtime</scope> </dependency> Also, add in some configuration for the Stackify appender to your logging.properties file. log4j.rootLogger=DEBUG, CONSOLE, STACKIFY log4j.appender.CONSOLE=org.apache.log4j.ConsoleAppender log4j.appender.CONSOLE.layout=org.apache.log4j.PatternLayout log4j.appender.CONSOLE.layout.ConversionPattern=%d [%t] %-5p %c: %m%n log4j.appender.STACKIFY=com.stackify.log.log4j12.StackifyLogAppender log4j.appender.STACKIFY.apiKey=[HIDDEN] log4j.appender.STACKIFY.application=test-logging log4j.appender.STACKIFY.environment=test As you can see, if you\u2019re already using a different appender, you can keep it in place and put them side-by-side. Now that you\u2019ve got your logs streaming to Stackify we can take a look at the logging dashboard. (By the way, if our monitoring agent is installed, you can also send Syslog entries to Stackify as well!) This dashboard shows a consolidated stream of log data, coming from all your servers and apps, presented in a timeline. From here, you can quickly View logs based on a range of time Filter for specific servers, apps, or environments Plus there are a couple of really great usability things built in. One of the first things you\u2019ll notice is that chart at the top. It\u2019s a great way to quickly \u201ctriage\u201d your application. The blue line indicates the rate of log messages, and the red bars indicate # of exceptions being logged . It\u2019s clear that a few minutes ago, my web app started having a lot more consistent activity but more importantly, we started getting more exceptions about the same time. Exceptions don\u2019t come without overhead for your CPU and memory, and they also can have a direct impact on user satisfaction, which can cost real money. By zooming in on the chart to this time period, I can quickly filter my log detail down to that time range and take a look at the logs for that period of time.","title":"Work Smarter, Not Harder"},{"location":"tech/software_engineering/java_log_best_practices/#searching-your-logs","text":"Do you see that blue text below that looks like a JSON object? Well, it is a JSON object. That\u2019s the result of logging objects, and adding context properties earlier. It looks a lot nicer than plain text in a flat file, doesn\u2019t it? Well, it gets even more awesome. See the search box at the top of the page? I can put in any search string that I can think of, and it will query all my logs as if it were a flat file . As we discussed earlier, however, this isn\u2019t great because you could end up with a lot more matches than you want. Suppose that I want to search for all objects with an id of 5. Fortunately, our log aggregator is smart enough to help in this situation. That\u2019s because when we find serialized objects in logs, we index each and every field we find. That makes it easy to perform a search like this: json.idNumber:5.0 That search yields the following results: Want to know what else you can search by? Just click on the document icon when you hover over a log record, and you\u2019ll see all the fields that Stackify indexes. Being able to get more value out of your logs and search by all the fields is called structured logging .","title":"Searching Your Logs"},{"location":"tech/software_engineering/java_log_best_practices/#exploring-java-exception-details","text":"You may have also noticed this little red bug icon ( ) next to exception messages. That\u2019s because we treat exceptions differently by automatically showing more context. Click on it and we present a deeper view of that exception. Our libraries not only grab the full stack trace, but all of the web request details, including headers, query strings, and server variables, when available. In this modal, there is a \u201cLogs\u201d tab which gives you a pre-filtered view of the logging from the app that threw the error, on the server where it occurred, for a narrow time window before and after the exception, to give more context around the exception. Curious about how common or frequent this error occurs, or want to see details on other occurrences? Click the \u201cView All Occurrences\u201d button and voila! I can quickly see this error has occurred 60 times over the last hour. Errors and logs are closely related, and in an app where a tremendous amount of logging can occur, exceptions could sometimes get a bit lost in the noise. That\u2019s why we\u2019ve built an Errors Dashboard as well, to give you this same consolidated view but limited to exceptions. Here I can see a couple of great pieces of data: I\u2019ve had an uptick in my rate of exceptions over the past few minutes. The majority of my errors are coming from my \u201ctest\u201d environment \u2013 to the tune of about 84 per hour. I have a couple of new errors that have just started occurring (as indicated by the red triangles). Have you ever put a new release of your app out to production and wondered what QA missed? (Not that I\u2019m saying QA would ever miss a bug\u2026\u2026) Error Dashboard to the rescue. You can watch real time and see a trend \u2013 lots of red triangles, lots of new bugs. Big spike in the graph? Perhaps you have an increase in usage, so a previously known error is being hit more; perhaps some buggy code (like a leaking SQL connection pool) went out and is causing a higher rate of SQL timeout errors than normal. It\u2019s not hard to imagine a lot of different scenarios for which this could provide early warning and detection. Hmm. Early warning and detection. That brings up another great topic.","title":"Exploring Java  Exception Details"},{"location":"tech/software_engineering/java_log_best_practices/#monitor","text":"Wouldn\u2019t it be nice to be alerted when An error rate for a specific app or environment suddenly increases? An error that was specifically resolved starts happening again? A certain action that you log does not happen enough, too often, etc? Stackify can do all of that. Let\u2019s take a look at each.","title":"Monitor"},{"location":"tech/software_engineering/java_log_best_practices/#error-rates","text":"When we looked at the error dashboard, I noted that my \u2018test\u2019 environment is getting a high number of errors per hour. From the Error dashboard, click on \u201cError Rates\u201d and then select which app/environment you wish to configure alerts for: I can configure monitors for \u201cErrors/Minute\u201d and \u201cTotal Errors Last 60 minutes\u201d and then choose the \u201cNotifications\u201d tab to specify who should be alerted, and how. Subsequently, if using Stackify Monitoring, I can configure all of my other alerting here as well: App running state, memory usage, performance counters, custom metrics, ping checks, and more.","title":"Error Rates"},{"location":"tech/software_engineering/java_log_best_practices/#resolved-errors-new-errors","text":"Earlier on, I introduced a new error by not checking for null values when creating Foo objects. I\u2019ve since fixed that and confirmed it by looking at the details for that particular error. As you can see, the last time it happened was 12 minutes ago: It was a silly mistake, but one that is easy to make. I\u2019m going to mark this one as \u201cresolved\u201d which lets me do something really cool: get an alert if it comes back. The Notifications menu will let me check my configuration, and by default, I\u2019m set to receive both new and regressed error notifications for all my apps and environments. Now, if the same error occurs again in the future, I\u2019m going to get an email about the regression and it shows up on the dashboard as such. This is a great little bit of automation to help out when you \u201cthink\u201d you\u2019ve solved the issue and want to make sure.","title":"Resolved Errors &amp; New Errors"},{"location":"tech/software_engineering/java_log_best_practices/#log-monitors","text":"Some things aren\u2019t very straightforward to monitor. Perhaps you have a critical process that runs asynchronously and the only record of its success (or failure) is logging statements. Earlier in this post, I showed the ability to run deep queries against your structured log data , and any of those queries can be saved and monitored. I\u2019ve got a very simple scenario here: my query is executed every minute, and we can monitor how many matching records we have. It\u2019s just a great simple way to check system health if a log file is your only indication.","title":"Log Monitors"},{"location":"tech/software_engineering/java_log_best_practices/#java-logging-best-practices","text":"All of this error and log data can be invaluable, especially when you take a step back and look at a slightly larger picture. Below is the Application Dashboard for a Java web app that contains all of the monitoring: As you can see, you get some great contextual data at a glance that errors and logs contribute to: Satisfaction and HTTP Error Rate. You can see that user satisfaction is high and the HTTP error rate is low. You can quickly start drilling down to see which pages might not be performing well, and what errors are occurring: There was a lot to cover in this post, and I feel like I barely scratched the surface. If you dig a little deeper or even get your hands on it, you can! I hope that these Java logging best practices will help you write better logs and save time troubleshooting. All of our Java logging appenders are available on GitHub and you can sign up for a free trial to get started with Stackify today! Java Best Practices for Smarter Application Logging & Exception Handling","title":"Java Logging Best Practices"},{"location":"tech/software_engineering/management/","text":"Management Conway's Law Any organization that designs a system (defined broadly) will produce a design whose structure is a copy of the organization's communication structure. \u2014\u2009Melvin E. Conway Agile Agile software development is a set of principles for software development in which requirements and solutions evolve through collaboration between self-organizing, cross-functional teams. It promotes adaptive planning, evolutionary development, early delivery, and continuous improvement, and it encourages rapid and flexible response to change. Agile itself has never defined any specific methods to achieve this, but many have grown up as a result and have been recognized as being 'Agile'. The big task is divided into sub-tasks hierarchically. Each small task is called a \"ticket\", which has an \"assignee\" and a \"report to\". The task can have several stages from its open to close, which are \"in progress\", \"code review\", \"test\", \"demo\". If it is blocked by some issue during the development, you can put it onto \"blocked by\" status. But it needs another ticket to specify what issue blocked it. It can be an existing ticket or a new one. Each ticket has a certain number of story points proportion to its workload. One story point usually means the workload of one workday. We are assigning the tickets to people every two weeks on the first Monday's meeting called \"sprint planning\". We call every such two weeks a \"sprint\" too. Each person got 6 to 7 sprints every two weeks. We also check how every ticket going of the last two weeks during the \"sprint planning\". We have \"stand up meeting\" (SDU) for short every Tuesday and Thursday afternoon to see if anyone's task is blocked by anything. Every three month is a program increment (PI) which require all teams to release their new version of product. Each PI consist of 12 sprints and some buffer weeks. Before each PI begins, a big room planning is held, in which each department will create all the tickets for the next PI. They work together to assign tickets to each other. Each ticket should be specific about how we evaluate it and how can it be count as ended. This agile management method is called SAFe. tech/software engineering#","title":"Management"},{"location":"tech/software_engineering/management/#management","text":"","title":"Management"},{"location":"tech/software_engineering/management/#conways-law","text":"Any organization that designs a system (defined broadly) will produce a design whose structure is a copy of the organization's communication structure. \u2014\u2009Melvin E. Conway","title":"Conway's Law"},{"location":"tech/software_engineering/management/#agile","text":"Agile software development is a set of principles for software development in which requirements and solutions evolve through collaboration between self-organizing, cross-functional teams. It promotes adaptive planning, evolutionary development, early delivery, and continuous improvement, and it encourages rapid and flexible response to change. Agile itself has never defined any specific methods to achieve this, but many have grown up as a result and have been recognized as being 'Agile'. The big task is divided into sub-tasks hierarchically. Each small task is called a \"ticket\", which has an \"assignee\" and a \"report to\". The task can have several stages from its open to close, which are \"in progress\", \"code review\", \"test\", \"demo\". If it is blocked by some issue during the development, you can put it onto \"blocked by\" status. But it needs another ticket to specify what issue blocked it. It can be an existing ticket or a new one. Each ticket has a certain number of story points proportion to its workload. One story point usually means the workload of one workday. We are assigning the tickets to people every two weeks on the first Monday's meeting called \"sprint planning\". We call every such two weeks a \"sprint\" too. Each person got 6 to 7 sprints every two weeks. We also check how every ticket going of the last two weeks during the \"sprint planning\". We have \"stand up meeting\" (SDU) for short every Tuesday and Thursday afternoon to see if anyone's task is blocked by anything. Every three month is a program increment (PI) which require all teams to release their new version of product. Each PI consist of 12 sprints and some buffer weeks. Before each PI begins, a big room planning is held, in which each department will create all the tickets for the next PI. They work together to assign tickets to each other. Each ticket should be specific about how we evaluate it and how can it be count as ended. This agile management method is called SAFe.","title":"Agile"},{"location":"tech/software_engineering/management/#techsoftware-engineering","text":"","title":"tech/software engineering#"},{"location":"tech/software_engineering/python/","text":"Python Gramma dictionary.pop(key[, default]) a = { 'name' : 'alice' } print ( a . pop ( 'name' , 'bob' )) # alice a = {} print ( a . pop ( 'name' , 'bob' )) # alice my_dict.setdefault(key, []).append(new_value) \u2026is the same as running\u2026 if key not in my_dict : my_dict [ key ] = [] my_dict [ key ] . append ( new_value ) \u2026except that the latter code performs at least two searches for key\u2014three if it\u2019s not found\u2014while setdefault does it all with a single lookup. Testing pytest: Pytest Course - YouTube Mock classes You cannot directly mock a class, e.g. class ClassA , if it contains a line of super(ClassA, self).__init__() since super does not allow to be called with a mock object. So you have to mock the functions instead of the entire class. For example, mock.patch('ClassA.__init__') . Assert mocked function calls @mock . patch ( 'ClassA.foo' ) @mock . patch ( 'ClassA.bar' ) def test_add_early_stopping ( bar , foo ): # Remember they are in reversed order in args. ClassA . some_function_which_calls_foo_inside () assert foo . called foo . assert_called_with ( x = 1 , y = 2 ) s args , kwargs = foo . call_args_list [ 0 ] # 0 means the first time that foo is called. 1 means the second time. assert kwargs [ 'x' ] == 1 Python Best Practices Import modules instead of specific objects. If the name of the module conflicts with the variables in the current module, just use \"from .. import .. as ..\" to avoid it. Import one module per line. The constructors should always have docstring describing the Args. In long if statements, to line break, avoid using \"\\\", but use \"if (a and b and c)\" and directly line break after each \"and\". When override a method of the parent class, to avoid the duplication of the code, we can try to do the new things in the override functions and do the old things by calling the super function. When calling a function with many arguments, use the argument names to call to avoid errors. Although we can avoid duplicate code by using the kwargs in the subclass and pass it to super(). init (), but we sometimes can explicitly list the args in the subclass for readability. If the subclass don't support all the args in the super(). init (), we can remove the kwargs from the subclass and list all the supported ones explicitly. Two reasons to extract a function: code reuse, or readability. We don't really need requirements.txt when we have everything in setup.py. We can use pip install . to install the dependencies. In setup.py, we don't specify the version of a dependency package the feature we use from it exists in all versions. If the feature only exists later than a certain version, we just put \">=\" to specify the version. Using \"==\" is not a good practice since it may mess up the dependencies of other packages which depends on the same package. The comments to a if statement should be above it. The same for the else clause. To test if an exception is correctly thrown, assert 'This is broken' in str(context.exception).","title":"Python"},{"location":"tech/software_engineering/python/#python","text":"","title":"Python"},{"location":"tech/software_engineering/python/#gramma","text":"dictionary.pop(key[, default]) a = { 'name' : 'alice' } print ( a . pop ( 'name' , 'bob' )) # alice a = {} print ( a . pop ( 'name' , 'bob' )) # alice my_dict.setdefault(key, []).append(new_value) \u2026is the same as running\u2026 if key not in my_dict : my_dict [ key ] = [] my_dict [ key ] . append ( new_value ) \u2026except that the latter code performs at least two searches for key\u2014three if it\u2019s not found\u2014while setdefault does it all with a single lookup.","title":"Gramma"},{"location":"tech/software_engineering/python/#testing","text":"pytest: Pytest Course - YouTube Mock classes You cannot directly mock a class, e.g. class ClassA , if it contains a line of super(ClassA, self).__init__() since super does not allow to be called with a mock object. So you have to mock the functions instead of the entire class. For example, mock.patch('ClassA.__init__') . Assert mocked function calls @mock . patch ( 'ClassA.foo' ) @mock . patch ( 'ClassA.bar' ) def test_add_early_stopping ( bar , foo ): # Remember they are in reversed order in args. ClassA . some_function_which_calls_foo_inside () assert foo . called foo . assert_called_with ( x = 1 , y = 2 ) s args , kwargs = foo . call_args_list [ 0 ] # 0 means the first time that foo is called. 1 means the second time. assert kwargs [ 'x' ] == 1","title":"Testing"},{"location":"tech/software_engineering/python/#python-best-practices","text":"Import modules instead of specific objects. If the name of the module conflicts with the variables in the current module, just use \"from .. import .. as ..\" to avoid it. Import one module per line. The constructors should always have docstring describing the Args. In long if statements, to line break, avoid using \"\\\", but use \"if (a and b and c)\" and directly line break after each \"and\". When override a method of the parent class, to avoid the duplication of the code, we can try to do the new things in the override functions and do the old things by calling the super function. When calling a function with many arguments, use the argument names to call to avoid errors. Although we can avoid duplicate code by using the kwargs in the subclass and pass it to super(). init (), but we sometimes can explicitly list the args in the subclass for readability. If the subclass don't support all the args in the super(). init (), we can remove the kwargs from the subclass and list all the supported ones explicitly. Two reasons to extract a function: code reuse, or readability. We don't really need requirements.txt when we have everything in setup.py. We can use pip install . to install the dependencies. In setup.py, we don't specify the version of a dependency package the feature we use from it exists in all versions. If the feature only exists later than a certain version, we just put \">=\" to specify the version. Using \"==\" is not a good practice since it may mess up the dependencies of other packages which depends on the same package. The comments to a if statement should be above it. The same for the else clause. To test if an exception is correctly thrown, assert 'This is broken' in str(context.exception).","title":"Python Best Practices"},{"location":"tech/software_engineering/refactor/","text":"Refactor tech/software engineering Day 1: Creating Instance: If the instance requires a lot of code to be created, do not create it using the constructor. The constructors should be short. Create it with a Creation method, which is a static method that returns an instance of the class. When there are multiple constructors that overlap each other, we should write a general purpose constructor. The general constructor should be called in other constructors by writing \"this(...)\" in the first line. Extracting methods: Local variables sometimes have the same use as a extracted function. The key factor deciding whether to use a local variable or extract a function is whether it would make the code more readable. Local variables should be final. Since it is not wise to change the value of a local variable. If you need to calculate a value in several steps, create temporary variables for each step, so that every variable name is meaningful as the assigned value to it. Day 2: Use exceptions for switch to make sure the arguments are legal. switch (a) { case ... case ... default: throw IllegalArgumentException(\"Invalid ...\"); } Use java reflection to do Factory design pattern. return (Customer) Class.forName(name).newInstance(); Use java reflection to do Singleton design pattern when you have multiple classes are singleton. Class[] params = Class[]{String.class, Integer.class} Method method = Class.forName(singleton).getMethod(methodName, params}. method.invoke(null, new Object[]{\"\", 0}); http://www.newthinktank.com/2013/01/code-refactoring-5/ Day 3: We can use the strategy pattern to extract a part of the class. If we have different salary strategies for different employees. Several types of employees may share the same salary strategy. The subclasses of Employee should not just override a function of calculateSalary(), but have a member of PayType which is an interface. Then we have different classes implementing the interface for different calculation for salaries. http://www.newthinktank.com/2013/01/code-refactoring-7/ Template pattern is used to simplify the code for several classes has common operations, but some of them may omit some steps of the operations. http://www.newthinktank.com/2013/01/code-refactoring-8/ If we have an instance of the subclass, call a function of the superclass g(). The superclass function g() call a override function f(). The f() would be the one in the subclass instead of in the super class. But if f() is not a function but a member int f, the superclass function g() can never access the int f in the subclass. Day 4: Composite pattern There should be an abstract class as the superclass for the leaf and normal nodes in the tree. http://www.newthinktank.com/2013/01/code-refactoring-9/ Builder Pattern There is a Sandwich which has a lot of attributes. The Builder has a bunch of methods, each of which set one of the attributes. Builder is an abstract class. There should be different kinds of builder extending the Builder class. Each kind of builder is used to make a specific kind of sandwich. The subBuilder would implement the methods to set a specific value to the sandwich attributes. There should be an Artist class which calls the Builder's methods in order to make the sandwich. http://www.newthinktank.com/2013/01/code-refactoring-10/ The difference between Builder and Template is as follows. Builders are subclasses extending the sandwich builder class to set different values to variables in Sandwich. Templates need a bunch of subclasses of Sandwich each of which override the functions of Sandwich to set the values. In one word, Builder is for more complicated objects. There is also a way to use Builder pattern to build Composite pattern. Using builder pattern is also a way to decouple the unit tests from he constructor of the classes. The most typical case is like this. One class is representing one row of data in the database table, whose constructor takes all the parameters to fill in each column of the row. The database is subject to change. So the constructor is subject to change. If we use the constructor in unit tests, when we wanna change the database schema, it is not easy to do, because we need to change all the unit tests which used that class. In stead of using the constructor we should use builder pattern. The builder pattern can also return \"this\" for every set operation. http://www.javaworld.com/article/2074938/core-java/too-many-parameters-in-java-methods-part-3-builder-pattern.html http://rdafbn.blogspot.com/2012/07/step-builder-pattern_28.html This is also know as the step-builder.","title":"Refactor"},{"location":"tech/software_engineering/refactor/#refactor","text":"","title":"Refactor"},{"location":"tech/software_engineering/refactor/#techsoftware-engineering","text":"Day 1: Creating Instance: If the instance requires a lot of code to be created, do not create it using the constructor. The constructors should be short. Create it with a Creation method, which is a static method that returns an instance of the class. When there are multiple constructors that overlap each other, we should write a general purpose constructor. The general constructor should be called in other constructors by writing \"this(...)\" in the first line. Extracting methods: Local variables sometimes have the same use as a extracted function. The key factor deciding whether to use a local variable or extract a function is whether it would make the code more readable. Local variables should be final. Since it is not wise to change the value of a local variable. If you need to calculate a value in several steps, create temporary variables for each step, so that every variable name is meaningful as the assigned value to it. Day 2: Use exceptions for switch to make sure the arguments are legal. switch (a) { case ... case ... default: throw IllegalArgumentException(\"Invalid ...\"); } Use java reflection to do Factory design pattern. return (Customer) Class.forName(name).newInstance(); Use java reflection to do Singleton design pattern when you have multiple classes are singleton. Class[] params = Class[]{String.class, Integer.class} Method method = Class.forName(singleton).getMethod(methodName, params}. method.invoke(null, new Object[]{\"\", 0}); http://www.newthinktank.com/2013/01/code-refactoring-5/ Day 3: We can use the strategy pattern to extract a part of the class. If we have different salary strategies for different employees. Several types of employees may share the same salary strategy. The subclasses of Employee should not just override a function of calculateSalary(), but have a member of PayType which is an interface. Then we have different classes implementing the interface for different calculation for salaries. http://www.newthinktank.com/2013/01/code-refactoring-7/ Template pattern is used to simplify the code for several classes has common operations, but some of them may omit some steps of the operations. http://www.newthinktank.com/2013/01/code-refactoring-8/ If we have an instance of the subclass, call a function of the superclass g(). The superclass function g() call a override function f(). The f() would be the one in the subclass instead of in the super class. But if f() is not a function but a member int f, the superclass function g() can never access the int f in the subclass. Day 4: Composite pattern There should be an abstract class as the superclass for the leaf and normal nodes in the tree. http://www.newthinktank.com/2013/01/code-refactoring-9/ Builder Pattern There is a Sandwich which has a lot of attributes. The Builder has a bunch of methods, each of which set one of the attributes. Builder is an abstract class. There should be different kinds of builder extending the Builder class. Each kind of builder is used to make a specific kind of sandwich. The subBuilder would implement the methods to set a specific value to the sandwich attributes. There should be an Artist class which calls the Builder's methods in order to make the sandwich. http://www.newthinktank.com/2013/01/code-refactoring-10/ The difference between Builder and Template is as follows. Builders are subclasses extending the sandwich builder class to set different values to variables in Sandwich. Templates need a bunch of subclasses of Sandwich each of which override the functions of Sandwich to set the values. In one word, Builder is for more complicated objects. There is also a way to use Builder pattern to build Composite pattern. Using builder pattern is also a way to decouple the unit tests from he constructor of the classes. The most typical case is like this. One class is representing one row of data in the database table, whose constructor takes all the parameters to fill in each column of the row. The database is subject to change. So the constructor is subject to change. If we use the constructor in unit tests, when we wanna change the database schema, it is not easy to do, because we need to change all the unit tests which used that class. In stead of using the constructor we should use builder pattern. The builder pattern can also return \"this\" for every set operation. http://www.javaworld.com/article/2074938/core-java/too-many-parameters-in-java-methods-part-3-builder-pattern.html http://rdafbn.blogspot.com/2012/07/step-builder-pattern_28.html This is also know as the step-builder.","title":"tech/software engineering"},{"location":"tech/software_engineering/unit_testing/","text":"Unit Testing Unit tests should be simple, readable, and behavior-driven. We want to achieve the following effect. Whenever a unit tests fails, the developer can directly tell what expected bahavior is not working from the test name. The developer can tell the test itself is correctly implemented at a glance. Mockito Car car = new Car(); car.manager = mock(Manager.class); when(manager.getServerPermission()).thenReturn(true); in startEngine() will call getServerPermission() car.startEngine(); veryfy(car.manager).getServerPermission(); car.setMiles(4); assert(4, car.getMiles()); JUnit @Test(expected = IndexOutOfBoundsException.class) public void empty() { new ArrayList<Object>().get(0); } For DAO layer classes, we may want to create a super class or interface for it. When testing any other classes that calls DAO, we just mock the DAO by implementing its interface. How to test DAO layer: http://howtodoinjava.com/best-practices/how-you-should-unit-test-dao-layer/ A very good example involves mock and anonymous class: http://stackoverflow.com/questions/5577274/testing-java-sockets","title":"Unit Testing"},{"location":"tech/software_engineering/unit_testing/#unit-testing","text":"Unit tests should be simple, readable, and behavior-driven. We want to achieve the following effect. Whenever a unit tests fails, the developer can directly tell what expected bahavior is not working from the test name. The developer can tell the test itself is correctly implemented at a glance.","title":"Unit Testing"},{"location":"tech/software_engineering/unit_testing/#mockito","text":"Car car = new Car(); car.manager = mock(Manager.class); when(manager.getServerPermission()).thenReturn(true); in startEngine() will call getServerPermission() car.startEngine(); veryfy(car.manager).getServerPermission(); car.setMiles(4); assert(4, car.getMiles());","title":"Mockito"},{"location":"tech/software_engineering/unit_testing/#junit","text":"@Test(expected = IndexOutOfBoundsException.class) public void empty() { new ArrayList<Object>().get(0); } For DAO layer classes, we may want to create a super class or interface for it. When testing any other classes that calls DAO, we just mock the DAO by implementing its interface. How to test DAO layer: http://howtodoinjava.com/best-practices/how-you-should-unit-test-dao-layer/ A very good example involves mock and anonymous class: http://stackoverflow.com/questions/5577274/testing-java-sockets","title":"JUnit"},{"location":"tech/system/compiler/","text":"Compiler AST is short for abstract syntax tree. IR is short for intermediate representation. C Compiling Process Java Compiling Process Python Compiling Process","title":"Compiler"},{"location":"tech/system/compiler/#compiler","text":"AST is short for abstract syntax tree. IR is short for intermediate representation.","title":"Compiler"},{"location":"tech/system/compiler/#c-compiling-process","text":"","title":"C Compiling Process"},{"location":"tech/system/compiler/#java-compiling-process","text":"","title":"Java Compiling Process"},{"location":"tech/system/compiler/#python-compiling-process","text":"","title":"Python Compiling Process"},{"location":"tech/system/operating_system/","text":"Operating System Operating system is based on CPU, RAM, and driver APIs to provide good programming experience for the application programs. For example, executing instructions on CPU, memory management, thread and process switches, caching. Interaction with CPU Interruption can be triggered by CPU. For example, a key is pressed on keyboard. CPU and RAM do not need drivers.","title":"Operating System"},{"location":"tech/system/operating_system/#operating-system","text":"Operating system is based on CPU, RAM, and driver APIs to provide good programming experience for the application programs. For example, executing instructions on CPU, memory management, thread and process switches, caching.","title":"Operating System"},{"location":"tech/system/operating_system/#interaction-with-cpu","text":"Interruption can be triggered by CPU. For example, a key is pressed on keyboard. CPU and RAM do not need drivers.","title":"Interaction with CPU"},{"location":"tech/tools/docker/","text":"Docker docker run -p 5005:5005 -i -t jhfjhfj1/tamuta2:latest _bin_bash python -m grpc_tools.protoc -I . --python_out=. --grpc_python_out=. core.proto docker build -t tamuta2:latest . docker build -f Dockerfile_dry_run -t ta2image . docker run -i --entrypoint _bin_bash tamuta2 -c 'ta2_search $CONFIG_JSON_PATH' docker build -f Dockerfile_base -t mybase . docker run -i --entrypoint _bin_bash ta2image d-c '_resources_executable/1.sh $CONFIG_JSON' docker run -p 5005:5005 -it --entrypoint _bin_bash jhfjhfj1/tamuta2:latest -c 'ta2_serve $CONFIG_JSON' Create a docker image: docker build -t autokeras:latest . run docker as a shell: docker run -it --entrypoint /bin/bash image_name You save the image as a tar archive, using docker save -o : docker save -o archive.tar sheffien/rim Then you load it (on a different computer) with docker load -i archive.tar and now it will show up in your docker images list: docker images The Docker. Use ENV to set environment variable. docker build -t registry.datadrivendiscovery.org/ta2/texas-anm-university_tamu_1.0.0:latest . docker login registry.datadrivendiscovery.org docker push registry.datadrivendiscovery.org/ta2/texas-anm-university_tamu_1.0.0 docker tag tamuta2 jhfjhfj1/tamuta2 docker push jhfjhfj1/tamuta2 docker exec tamuta2 _bin_bash Remove docker images. docker rmi IMAGE_ID Remove all docker images. docker rmi $(docker images -a -q) Remove all docker images with pattern docker images -a | grep \"pattern\" | awk '{print $3}' | xargs docker rmi","title":"Docker"},{"location":"tech/tools/docker/#docker","text":"docker run -p 5005:5005 -i -t jhfjhfj1/tamuta2:latest _bin_bash python -m grpc_tools.protoc -I . --python_out=. --grpc_python_out=. core.proto docker build -t tamuta2:latest . docker build -f Dockerfile_dry_run -t ta2image . docker run -i --entrypoint _bin_bash tamuta2 -c 'ta2_search $CONFIG_JSON_PATH' docker build -f Dockerfile_base -t mybase . docker run -i --entrypoint _bin_bash ta2image d-c '_resources_executable/1.sh $CONFIG_JSON' docker run -p 5005:5005 -it --entrypoint _bin_bash jhfjhfj1/tamuta2:latest -c 'ta2_serve $CONFIG_JSON' Create a docker image: docker build -t autokeras:latest . run docker as a shell: docker run -it --entrypoint /bin/bash image_name You save the image as a tar archive, using docker save -o : docker save -o archive.tar sheffien/rim Then you load it (on a different computer) with docker load -i archive.tar and now it will show up in your docker images list: docker images The Docker. Use ENV to set environment variable. docker build -t registry.datadrivendiscovery.org/ta2/texas-anm-university_tamu_1.0.0:latest . docker login registry.datadrivendiscovery.org docker push registry.datadrivendiscovery.org/ta2/texas-anm-university_tamu_1.0.0 docker tag tamuta2 jhfjhfj1/tamuta2 docker push jhfjhfj1/tamuta2 docker exec tamuta2 _bin_bash Remove docker images. docker rmi IMAGE_ID Remove all docker images. docker rmi $(docker images -a -q) Remove all docker images with pattern docker images -a | grep \"pattern\" | awk '{print $3}' | xargs docker rmi","title":"Docker"},{"location":"tech/tools/gcp/","text":"Google Cloud Platform tech/tool Registry a place to store containers. https://cloud.google.com/container-registry/docs/quickstart#pushing_your_image API Endpoints The Open APIs on google platform needs special configuration. I just followed the tutorial in deploying GRPC server. Container Engine It is a platform that you can upload docker containers. It will use the \"ENTRYPOINT\" to run the container. The container can be on the Registry. If it is not google's registry, special permission is needed. GRPC-server setup I just followed the tutorial here: https://cloud.google.com/endpoints/docs/get-started-grpc-container-engine # Explicitly tell gcloud ml-engine local train to use Python 3 ! gcloud config set ml_engine/local_python $(which python3)","title":"Google Cloud Platform"},{"location":"tech/tools/gcp/#google-cloud-platform","text":"","title":"Google Cloud Platform"},{"location":"tech/tools/gcp/#techtool","text":"Registry a place to store containers. https://cloud.google.com/container-registry/docs/quickstart#pushing_your_image API Endpoints The Open APIs on google platform needs special configuration. I just followed the tutorial in deploying GRPC server. Container Engine It is a platform that you can upload docker containers. It will use the \"ENTRYPOINT\" to run the container. The container can be on the Registry. If it is not google's registry, special permission is needed. GRPC-server setup I just followed the tutorial here: https://cloud.google.com/endpoints/docs/get-started-grpc-container-engine # Explicitly tell gcloud ml-engine local train to use Python 3 ! gcloud config set ml_engine/local_python $(which python3)","title":"tech/tool"},{"location":"tech/tools/gdb/","text":"Debugging with GDB | BetterExplained tech/tool gdb primary tutorial A debugger lets you pause a program, examine and change variables, and step through code. Spend a few hours to learn one so you can avoid dozens of hours of frustration in the future. This is a quick guide, more information here: Official Page \u2013 Documentation Sample session \u2013 Short Tutorial \u2013 Long Tutorial Getting Started: Starting and Stopping gcc -g myprogram.c Compiles myprogram.c with the debugging option (-g). You still get an a.out, but it contains debugging information that lets you use variables and function names inside GDB, rather than raw memory locations (not fun). gdb a.out Opens GDB with file a.out, but does not run the program. You\u2019ll see a prompt (gdb) \u2013 all examples are from this prompt. r r arg1 arg2 r < file1 Three ways to run \u201ca.out\u201d, loaded previously. You can run it directly (r), pass arguments (r arg1 arg2), or feed in a file. You will usually set breakpoints before running. help h breakpoints List help topics (help) or get help on a specific topic (h breakpoints). GDB is well-documented. q \u2013 Quit GDB Stepping Through Code Stepping lets you trace the path of your program, and zero in on the code that is crashing or returning invalid input. l l 50 l myfunction List 10 lines of source code for current line (l), a specific line (l 50), or for a function (l myfunction). next Run program until next line, then pause. If the current line is a function, execute the entire function, then pause. Next is good for walking through your code quickly. step Run the next instruction, not line. If the current instructions is setting a variable, it is the same as next . If it\u2019s a function, it will jump into the function, execute the first statement, then pause. Step is good for diving into the details of your code. finish Finish executing the current function, then pause (also called step out). Useful if you accidentally stepped into a function. Breakpoints and Watchpoints Breakpoints are one of the keys to debugging. They pause (break) a program when it reaches a certain location. You can examine and change variables, then resume execution. This is helpful when seeing why certain inputs fail, or testing inputs. break 45 break myfunction Set a breakpoint at line 45, or at myfunction. The program will pause when it reaches the breakpoint. watch x == 3 Set a watchpoint, which pauses the program when a condition changes (when x == 3 changes). Watchpoints are great for certain inputs (myPtr != NULL) without having to break on every function call. continue Resume execution after being paused by a breakpoint_watchpoint. The program will continue until it hits the next breakpoint_watchpoint. delete N Delete breakpoint N (breakpoints are numbered when created). Setting Variables and Calling Functions Viewing and changing variables at run-time is a huge part of debugging. Try giving functions invalid inputs or running other test cases to find the root of problems. Typically, you will view/set variables when the program is paused. print x Print current value of variable x. Being able to use the original variable names is why the (-g) flag is needed; programs compiled regularly have this information removed. set x = 3 set x = y Set x to a set value (3) or to another variable (y) call myfunction() call myotherfunction(x) call strlen(mystring) Call user-defined or system functions. This is extremely useful, but beware calling buggy functions. display x undisplay x Constantly display value of variable x, which is shown after every step or pause. Useful if you are constantly checking for a certain value. Use undisplay to remove the constant display. Backtrace and Changing Frames The stack is a list of the current function calls \u2013 it shows you where you are in the program. A frame stores the details of a single function call, such as the arguments. bt Backtrace, aka print the current function stack to show where you are in the current program. If main calls function a() , which calls b() , which calls c() , the backtrace is c <= current location b a main up down Move to the next frame up or down in the function stack. If you are in c , you can move to b or a to examine local variables. return Return from current function. Crashes and Core Dumps A \u201ccore dump\u201d is a snapshot of memory at the instant the program crashed, typically saved in a file called \u201ccore\u201d. GDB can read the core dump and give you the line number of the crash, the arguments that were passed, and more. This is very helpful, but remember to compile with (-g) or the core dump will be difficult to debug. gdb myprogram core Debug myprogram with \u201ccore\u201d as the core dump file. bt Print the backtrace (function stack) at the point of the crash. Examine variables using the techniques above. Handling Signals Signals are messages thrown after certain events, such as a timer or error. GDB may pause when it encounters a signal; you may wish to ignore them instead. handle [signalname] [action] handle SIGUSR1 nostop handle SIGUSR1 noprint handle SIGUSR1 ignore Tell GDB to ignore a certain signal ( SIGUSR1 ) when it occurs. There are varying levels of ignoring. Integration with Emacs The Emacs text editor integrates well with GDB. Debugging directly inside the editor is great because you can see an entire screen of code at a time. Use M-x gdb to start a new window with GDB and learn more here . Tips I often prefer watchpoints to breakpoints. Rather than breaking on every loop and checking a variable, set a watchpoint for when the variable gets to the value you need (i == 25, ptr != null, etc.). printf works well for tracing. But wrap printf in a log function for flexibility. Try passing a log level with your message (1 is most important, 3 is least). You can tweak your log function to send email on critical errors, log to a file, etc. Code speaks, so here it is. Use #define LOG_LEVEL LOG_WARN to display warnings and above. Use #define LOG_LEVEL LOG_NONE to turn off debugging. #include <stdio.h> #define LOG_NONE 0 #define LOG_ERROR 1 #define LOG_WARN 2 #define LOG_INFO 3 #define LOG_LEVEL LOG_WARN // shows msg if allowed by LOG_LEVEL int log(char *msg, int level){ if (LOG_LEVEL >= level){ printf(\"LOG %d: %s\\n\", level, msg); // could also log to file } return 0; } int main(int argc, char** argv){ printf(\"Hi there!\\n\"); log(\"Really bad error!\", LOG_ERROR); log(\"Warning, not so serious.\", LOG_WARN); log(\"Just some info, not that important.\", LOG_INFO); return 0; } Spend the time to learn GDB (or another debugging tool)! I know, it\u2019s like telling people to eat their vegetables, but it really is good for you \u2013 you\u2019ll thank me later. Tweet 2 5 8 gdb tricks you should know (Ksplice Blog) Source URL: https://blogs.oracle.com/ksplice/entry/8_gdb_tricks_you_should \u00ab Coffee shop Internet... | Main | Happy Birthday Kspli... \u00bb 8 gdb tricks you should know By Ksplice Post Importer on Jan 24, 2011 Despite its age, gdb remains an amazingly versatile and flexible tool, and mastering it can save you huge amounts of time when trying to debug problems in your code. In this post, I'll share 10 tips and tricks for using GDB to debug most efficiently. I'll be using the Linux kernel for examples throughout this post, not because these examples are necessarily realistic, but because it's a large C codebase that I know and that anyone can download and take a look at. Don't worry if you aren't familiar with Linux's source in particular -- the details of the examples won't matter too much. break WHERE if COND If you've ever used gdb, you almost certainly know about the \"breakpoint\" command, which lets you break at some specified point in the debugged program. But did you know that you can set conditional breakpoints? If you add if CONDITION to a breakpoint command, you can include an expression to be evaluated whenever the program reaches that point, and the program will only be stopped if the condition is fulfilled. Suppose I was debugging the Linux kernel and wanted to stop whenever init got scheduled. I could do: (gdb) break context_switch if next == init_task Note that the condition is evaluated by gdb, not by the debugged program, so you still pay the cost of the target stopping and switching to gdb every time the breakpoint is hit. As such, they still slow the target down in relation to to how often the target location is hit, not how often the condition is met. command In addition to conditional breakpoints, the command command lets you specify commands to be run every time you hit a breakpoint. This can be used for a number of things, but one of the most basic is to augment points in a program to include debug output, without having to recompile and restart the program. I could get a minimal log of every mmap() operation performed on a system using: (gdb) b do_mmap_pgoff Breakpoint 1 at 0xffffffff8111a441: file mm/mmap.c, line 940. (gdb) command 1 Type commands for when breakpoint 1 is hit, one per line. End with a line saying just \"end\". >print addr >print len >print prot >end (gdb) gdb --args This one is simple, but a huge timesaver if you didn't know it. If you just want to start a program under gdb, passing some arguments on the command line, you can just build your command-line like usual, and then put \"gdb --args\" in front to launch gdb with the target program and the argument list both set: [~]$ gdb --args pizzamaker --deep-dish --toppings=pepperoni ... (gdb) show args Argument list to give program being debugged when it is started is \" --deep-dish --toppings=pepperoni\". (gdb) b main Breakpoint 1 at 0x45467c: file oven.c, line 123. (gdb) run ... I find this especially useful if I want to debug a project that has some arcane wrapper script that assembles lots of environment variables and possibly arguments before launching the actual binary (I'm looking at you, libtool). Instead of trying to replicate all that state and then launch gdb, simply make a copy of the wrapper, find the final \"exec\" call or similar, and add \"gdb --args\" in front. Finding source files I run Ubuntu, so I can download debug symbols for most of the packages on my system from ddebs.ubuntu.com , and I can get source using apt-get source . But how do I tell gdb to put the two together? If the debug symbols include relative paths, I can use gdb's directory command to add the source directory to my source path: [~/src]$ apt-get source coreutils [~/src]$ sudo apt-get install coreutils-dbgsym [~/src]$ gdb /bin/ls GNU gdb (GDB) 7.1-ubuntu (gdb) list main 1192 ls.c: No such file or directory. in ls.c (gdb) directory ~/src/coreutils-7.4/src/ Source directories searched: /home/nelhage/src/coreutils-7.4:$cdir:$cwd (gdb) list main 1192 } 1193 } 1194 1195 int 1196 main (int argc, char **argv) 1197 { 1198 int i; 1199 struct pending *thispend; 1200 int n_files; 1201 Sometimes, however, debug symbols end up with absolute paths, such as the kernel's. In that case, I can use set substitute-path to tell gdb how to translate paths: [~/src]$ apt-get source linux-image-2.6.32-25-generic [~/src]$ sudo apt-get install linux-image-2.6.32-25-generic-dbgsym [~/src]$ gdb /usr/lib/debug/boot/vmlinux-2.6.32-25-generic (gdb) list schedule 5519 /build/buildd/linux-2.6.32/kernel/sched.c: No such file or directory. in /build/buildd/linux-2.6.32/kernel/sched.c (gdb) set substitute-path /build/buildd/linux-2.6.32 /home/nelhage/src/linux-2.6.32/ (gdb) list schedule 5519 5520 static void put_prev_task(struct rq *rq, struct task_struct *p) 5521 { 5522 u64 runtime = p->se.sum_exec_runtime - p->se.prev_sum_exec_runtime; 5523 5524 update_avg(&p->se.avg_running, runtime); 5525 5526 if (p->state == TASK_RUNNING) { 5527 /* 5528 * In order to avoid avg_overlap growing stale when we are Debugging macros One of the standard reasons almost everyone will tell you to prefer inline functions over macros is that debuggers tend to be better at dealing with inline functions. And in fact, by default, gdb doesn't know anything at all about macros, even when your project was built with debug symbols: (gdb) p GFP_ATOMIC No symbol \"GFP_ATOMIC\" in current context. (gdb) p task_is_stopped(&init_task) No symbol \"task_is_stopped\" in current context. However, if you're willing to tell GCC to generate debug symbols specifically optimized for gdb, using -ggdb3 , it can preserve this information: $ make KCFLAGS=-ggdb3 ... (gdb) break schedule (gdb) continue (gdb) p/x GFP_ATOMIC $1 = 0x20 (gdb) p task_is_stopped_or_traced(init_task) $2 = 0 You can also use the macro and info macro commands to work with macros from inside your gdb session: (gdb) macro expand task_is_stopped_or_traced(init_task) expands to: ((init_task->state & (4 | 8)) != 0) (gdb) info macro task_is_stopped_or_traced Defined at include/linux/sched.h:218 included at include/linux/nmi.h:7 included at kernel/sched.c:31 #define task_is_stopped_or_traced(task) ((task->state & (__TASK_STOPPED | __TASK_TRACED)) != 0) Note that gdb actually knows which contexts macros are and aren't visible, so when you have the program stopped inside some function, you can only access macros visible at that point. (You can see that the \"included at\" lines above show you through exactly what path the macro is visible). gdb variables Whenever you print a variable in gdb, it prints this weird $NN = before it in the output: (gdb) p 5+5 $1 = 10 This is actually a gdb variable, that you can use to reference that same variable any time later in your session: (gdb) p $1 $2 = 10 You can also assign your own variables for convenience, using set : (gdb) set $foo = 4 (gdb) p $foo $3 = 4 This can be useful to grab a reference to some complex expression or similar that you'll be referencing many times, or, for example, for simplicity in writing a conditional breakpoint (see tip 1). Register variables In addition to the numeric variables, and any variables you define, gdb exposes your machine's registers as pseudo-variables, including some cross-architecture aliases for common ones, like $sp for the the stack pointer, or $pc for the program counter or instruction pointer. These are most useful when debugging assembly code or code without debugging symbols. Combined with a knowledge of your machine's calling convention, for example, you can use these to inspect function parameters: (gdb) break write if $rsi == 2 will break on all writes to stderr on amd64, where the $rsi register is used to pass the first parameter. The x command Most people who've used gdb know about the print or p command, because of its obvious name, but I've been surprised how many don't know about the power of the x command. x (for \"e x amine\") is used to output regions of memory in various formats. It takes two arguments in a slightly unusual syntax: x/FMT ADDRESS ADDRESS , unsurprisingly, is the address to examine; It can be an arbitrary expression, like the argument to print . FMT controls how the memory should be dumped, and consists of (up to) three components: A numeric COUNT of how many elements to dump A single-character FORMAT, indicating how to interpret and display each element A single-character SIZE, indicating the size of each element to display. x displays COUNT elements of length SIZE each, starting from ADDRESS, formatting them according to the FORMAT. There are many valid \"format\" arguments; help x in gdb will give you the full list, so here's my favorites: x/x displays elements in hex, x/d displays them as signed decimals, x/c displays characters, x/i disassembles memory as instructions, and x/s interprets memory as C strings. The SIZE argument can be one of: b , h , w , and g , for one-, two-, four-, and eight-byte blocks, respectively. If you have debug symbols so that GDB knows the types of everything you might want to inspect, p is usually a better choice, but if not, x is invaluable for taking a look at memory. [~]$ grep saved_command /proc/kallsyms ffffffff81946000 B saved_command_line (gdb) x/s 0xffffffff81946000 ffffffff81946000 <>: \"root=/dev/sda1 quiet\" x/i is invaluable as a quick way to disassemble memory: (gdb) x/5i schedule 0xffffffff8154804a <schedule>: push %rbp 0xffffffff8154804b <schedule+1>: mov $0x11ac0,%rdx 0xffffffff81548052 <schedule+8>: mov %gs:0xb588,%rax 0xffffffff8154805b <schedule+17>: mov %rsp,%rbp 0xffffffff8154805e <schedule+20>: push %r15 If I'm stopped at a segfault in unknown code, one of the first things I try is something like x/20i $ip-40 , to get a look at what the code I'm stopped at looks like. A quick-and-dirty but surprisingly effective way to debug memory leaks is to let the leak grow until it consumes most of a program's memory, and then attach gdb and just x random pieces of memory. Since the leaked data is using up most of memory, you'll usually hit it pretty quickly, and can try to interpret what it must have come from. ~ nelhage Ksplice is hiring! Do you love tinkering with, exploring, and debugging Linux systems? Does writing Python clones of your favorite childhood computer games sound like a fun weekend project? Have you ever told a joke whose punch line was a git command? Join Ksplice and work on technology that most people will tell you is impossible: updating the Linux kernel while it is running. Help us develop the software and infrastructure to bring rebootless kernel updates to Linux, as well as new operating system kernels and other parts of the software stack. We're hiring backend, frontend, and kernel engineers. Say hello at jobs@ksplice.com ! Category: programming ::: Tags: c debugging gdb linux tricks ::: Permanent link to this entry ::: \u00ab Coffee shop Internet... | Main | Happy Birthday Kspli... \u00bb Comments: One of my favourite GDB tricks: The @ symbol, used to view many elements of an array/STL vector in one go. With C, it is easy to view the full array: If the code is: int a[ 10 ] = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 }; Then: (gdb) p a $1 = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10} However this is not useful if the array has 1000 entries, and you want to view a handful of entries located somewhere in the middle. Also, this will not work with a C++ vector, because it will dump the vector object's data members. Using the '@' symbol allows us to do both: (gdb) p *&a[0]@10 $1 = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10} This prints the first 10 elements in the vector. Looks ugly, but is not so complicated really: '&a[0]' gets the address of the first element. '*' dereferences the address back to the vector's data type. Finally '@10' pulls out 10 elements. Of course, to view elements 550-553 in a long vector, all you do is 'p *&a[550]@4'. Posted by Niraj on August 28, 2012 at 07:37 AM EDT # Post a Comment: Name: E-Mail: URL: Notify me by email of new comments Remember Information? Your Comment: HTML Syntax: NOT allowed Please answer this simple math question 4 + 93 = http://betterexplained.com/articles/debugging-with-gdb/","title":"Debugging with GDB | BetterExplained"},{"location":"tech/tools/gdb/#debugging-with-gdb-betterexplained","text":"","title":"Debugging with GDB | BetterExplained"},{"location":"tech/tools/gdb/#techtool","text":"gdb primary tutorial A debugger lets you pause a program, examine and change variables, and step through code. Spend a few hours to learn one so you can avoid dozens of hours of frustration in the future. This is a quick guide, more information here: Official Page \u2013 Documentation Sample session \u2013 Short Tutorial \u2013 Long Tutorial","title":"tech/tool"},{"location":"tech/tools/gdb/#getting-started-starting-and-stopping","text":"gcc -g myprogram.c Compiles myprogram.c with the debugging option (-g). You still get an a.out, but it contains debugging information that lets you use variables and function names inside GDB, rather than raw memory locations (not fun). gdb a.out Opens GDB with file a.out, but does not run the program. You\u2019ll see a prompt (gdb) \u2013 all examples are from this prompt. r r arg1 arg2 r < file1 Three ways to run \u201ca.out\u201d, loaded previously. You can run it directly (r), pass arguments (r arg1 arg2), or feed in a file. You will usually set breakpoints before running. help h breakpoints List help topics (help) or get help on a specific topic (h breakpoints). GDB is well-documented. q \u2013 Quit GDB","title":"Getting Started: Starting and Stopping"},{"location":"tech/tools/gdb/#stepping-through-code","text":"Stepping lets you trace the path of your program, and zero in on the code that is crashing or returning invalid input. l l 50 l myfunction List 10 lines of source code for current line (l), a specific line (l 50), or for a function (l myfunction). next Run program until next line, then pause. If the current line is a function, execute the entire function, then pause. Next is good for walking through your code quickly. step Run the next instruction, not line. If the current instructions is setting a variable, it is the same as next . If it\u2019s a function, it will jump into the function, execute the first statement, then pause. Step is good for diving into the details of your code. finish Finish executing the current function, then pause (also called step out). Useful if you accidentally stepped into a function.","title":"Stepping Through Code"},{"location":"tech/tools/gdb/#breakpoints-and-watchpoints","text":"Breakpoints are one of the keys to debugging. They pause (break) a program when it reaches a certain location. You can examine and change variables, then resume execution. This is helpful when seeing why certain inputs fail, or testing inputs. break 45 break myfunction Set a breakpoint at line 45, or at myfunction. The program will pause when it reaches the breakpoint. watch x == 3 Set a watchpoint, which pauses the program when a condition changes (when x == 3 changes). Watchpoints are great for certain inputs (myPtr != NULL) without having to break on every function call. continue Resume execution after being paused by a breakpoint_watchpoint. The program will continue until it hits the next breakpoint_watchpoint. delete N Delete breakpoint N (breakpoints are numbered when created).","title":"Breakpoints and Watchpoints"},{"location":"tech/tools/gdb/#setting-variables-and-calling-functions","text":"Viewing and changing variables at run-time is a huge part of debugging. Try giving functions invalid inputs or running other test cases to find the root of problems. Typically, you will view/set variables when the program is paused. print x Print current value of variable x. Being able to use the original variable names is why the (-g) flag is needed; programs compiled regularly have this information removed. set x = 3 set x = y Set x to a set value (3) or to another variable (y) call myfunction() call myotherfunction(x) call strlen(mystring) Call user-defined or system functions. This is extremely useful, but beware calling buggy functions. display x undisplay x Constantly display value of variable x, which is shown after every step or pause. Useful if you are constantly checking for a certain value. Use undisplay to remove the constant display.","title":"Setting Variables and Calling Functions"},{"location":"tech/tools/gdb/#backtrace-and-changing-frames","text":"The stack is a list of the current function calls \u2013 it shows you where you are in the program. A frame stores the details of a single function call, such as the arguments. bt Backtrace, aka print the current function stack to show where you are in the current program. If main calls function a() , which calls b() , which calls c() , the backtrace is c <= current location b a main up down Move to the next frame up or down in the function stack. If you are in c , you can move to b or a to examine local variables. return Return from current function.","title":"Backtrace and Changing Frames"},{"location":"tech/tools/gdb/#crashes-and-core-dumps","text":"A \u201ccore dump\u201d is a snapshot of memory at the instant the program crashed, typically saved in a file called \u201ccore\u201d. GDB can read the core dump and give you the line number of the crash, the arguments that were passed, and more. This is very helpful, but remember to compile with (-g) or the core dump will be difficult to debug. gdb myprogram core Debug myprogram with \u201ccore\u201d as the core dump file. bt Print the backtrace (function stack) at the point of the crash. Examine variables using the techniques above.","title":"Crashes and Core Dumps"},{"location":"tech/tools/gdb/#handling-signals","text":"Signals are messages thrown after certain events, such as a timer or error. GDB may pause when it encounters a signal; you may wish to ignore them instead. handle [signalname] [action] handle SIGUSR1 nostop handle SIGUSR1 noprint handle SIGUSR1 ignore Tell GDB to ignore a certain signal ( SIGUSR1 ) when it occurs. There are varying levels of ignoring.","title":"Handling Signals"},{"location":"tech/tools/gdb/#integration-with-emacs","text":"The Emacs text editor integrates well with GDB. Debugging directly inside the editor is great because you can see an entire screen of code at a time. Use M-x gdb to start a new window with GDB and learn more here .","title":"Integration with Emacs"},{"location":"tech/tools/gdb/#tips","text":"I often prefer watchpoints to breakpoints. Rather than breaking on every loop and checking a variable, set a watchpoint for when the variable gets to the value you need (i == 25, ptr != null, etc.). printf works well for tracing. But wrap printf in a log function for flexibility. Try passing a log level with your message (1 is most important, 3 is least). You can tweak your log function to send email on critical errors, log to a file, etc. Code speaks, so here it is. Use #define LOG_LEVEL LOG_WARN to display warnings and above. Use #define LOG_LEVEL LOG_NONE to turn off debugging. #include <stdio.h> #define LOG_NONE 0 #define LOG_ERROR 1 #define LOG_WARN 2 #define LOG_INFO 3 #define LOG_LEVEL LOG_WARN // shows msg if allowed by LOG_LEVEL int log(char *msg, int level){ if (LOG_LEVEL >= level){ printf(\"LOG %d: %s\\n\", level, msg); // could also log to file } return 0; } int main(int argc, char** argv){ printf(\"Hi there!\\n\"); log(\"Really bad error!\", LOG_ERROR); log(\"Warning, not so serious.\", LOG_WARN); log(\"Just some info, not that important.\", LOG_INFO); return 0; } Spend the time to learn GDB (or another debugging tool)! I know, it\u2019s like telling people to eat their vegetables, but it really is good for you \u2013 you\u2019ll thank me later. Tweet 2 5","title":"Tips"},{"location":"tech/tools/gdb/#8-gdb-tricks-you-should-know-ksplice-blog","text":"Source URL: https://blogs.oracle.com/ksplice/entry/8_gdb_tricks_you_should \u00ab Coffee shop Internet... | Main | Happy Birthday Kspli... \u00bb","title":"8 gdb tricks you should know (Ksplice Blog)"},{"location":"tech/tools/gdb/#8-gdb-tricks-you-should-know","text":"","title":"8 gdb tricks you should know"},{"location":"tech/tools/gdb/#by-ksplice-post-importer-on-jan-24-2011","text":"Despite its age, gdb remains an amazingly versatile and flexible tool, and mastering it can save you huge amounts of time when trying to debug problems in your code. In this post, I'll share 10 tips and tricks for using GDB to debug most efficiently. I'll be using the Linux kernel for examples throughout this post, not because these examples are necessarily realistic, but because it's a large C codebase that I know and that anyone can download and take a look at. Don't worry if you aren't familiar with Linux's source in particular -- the details of the examples won't matter too much. break WHERE if COND If you've ever used gdb, you almost certainly know about the \"breakpoint\" command, which lets you break at some specified point in the debugged program. But did you know that you can set conditional breakpoints? If you add if CONDITION to a breakpoint command, you can include an expression to be evaluated whenever the program reaches that point, and the program will only be stopped if the condition is fulfilled. Suppose I was debugging the Linux kernel and wanted to stop whenever init got scheduled. I could do: (gdb) break context_switch if next == init_task Note that the condition is evaluated by gdb, not by the debugged program, so you still pay the cost of the target stopping and switching to gdb every time the breakpoint is hit. As such, they still slow the target down in relation to to how often the target location is hit, not how often the condition is met. command In addition to conditional breakpoints, the command command lets you specify commands to be run every time you hit a breakpoint. This can be used for a number of things, but one of the most basic is to augment points in a program to include debug output, without having to recompile and restart the program. I could get a minimal log of every mmap() operation performed on a system using: (gdb) b do_mmap_pgoff Breakpoint 1 at 0xffffffff8111a441: file mm/mmap.c, line 940. (gdb) command 1 Type commands for when breakpoint 1 is hit, one per line. End with a line saying just \"end\". >print addr >print len >print prot >end (gdb) gdb --args This one is simple, but a huge timesaver if you didn't know it. If you just want to start a program under gdb, passing some arguments on the command line, you can just build your command-line like usual, and then put \"gdb --args\" in front to launch gdb with the target program and the argument list both set: [~]$ gdb --args pizzamaker --deep-dish --toppings=pepperoni ... (gdb) show args Argument list to give program being debugged when it is started is \" --deep-dish --toppings=pepperoni\". (gdb) b main Breakpoint 1 at 0x45467c: file oven.c, line 123. (gdb) run ... I find this especially useful if I want to debug a project that has some arcane wrapper script that assembles lots of environment variables and possibly arguments before launching the actual binary (I'm looking at you, libtool). Instead of trying to replicate all that state and then launch gdb, simply make a copy of the wrapper, find the final \"exec\" call or similar, and add \"gdb --args\" in front. Finding source files I run Ubuntu, so I can download debug symbols for most of the packages on my system from ddebs.ubuntu.com , and I can get source using apt-get source . But how do I tell gdb to put the two together? If the debug symbols include relative paths, I can use gdb's directory command to add the source directory to my source path: [~/src]$ apt-get source coreutils [~/src]$ sudo apt-get install coreutils-dbgsym [~/src]$ gdb /bin/ls GNU gdb (GDB) 7.1-ubuntu (gdb) list main 1192 ls.c: No such file or directory. in ls.c (gdb) directory ~/src/coreutils-7.4/src/ Source directories searched: /home/nelhage/src/coreutils-7.4:$cdir:$cwd (gdb) list main 1192 } 1193 } 1194 1195 int 1196 main (int argc, char **argv) 1197 { 1198 int i; 1199 struct pending *thispend; 1200 int n_files; 1201 Sometimes, however, debug symbols end up with absolute paths, such as the kernel's. In that case, I can use set substitute-path to tell gdb how to translate paths: [~/src]$ apt-get source linux-image-2.6.32-25-generic [~/src]$ sudo apt-get install linux-image-2.6.32-25-generic-dbgsym [~/src]$ gdb /usr/lib/debug/boot/vmlinux-2.6.32-25-generic (gdb) list schedule 5519 /build/buildd/linux-2.6.32/kernel/sched.c: No such file or directory. in /build/buildd/linux-2.6.32/kernel/sched.c (gdb) set substitute-path /build/buildd/linux-2.6.32 /home/nelhage/src/linux-2.6.32/ (gdb) list schedule 5519 5520 static void put_prev_task(struct rq *rq, struct task_struct *p) 5521 { 5522 u64 runtime = p->se.sum_exec_runtime - p->se.prev_sum_exec_runtime; 5523 5524 update_avg(&p->se.avg_running, runtime); 5525 5526 if (p->state == TASK_RUNNING) { 5527 /* 5528 * In order to avoid avg_overlap growing stale when we are Debugging macros One of the standard reasons almost everyone will tell you to prefer inline functions over macros is that debuggers tend to be better at dealing with inline functions. And in fact, by default, gdb doesn't know anything at all about macros, even when your project was built with debug symbols: (gdb) p GFP_ATOMIC No symbol \"GFP_ATOMIC\" in current context. (gdb) p task_is_stopped(&init_task) No symbol \"task_is_stopped\" in current context. However, if you're willing to tell GCC to generate debug symbols specifically optimized for gdb, using -ggdb3 , it can preserve this information: $ make KCFLAGS=-ggdb3 ... (gdb) break schedule (gdb) continue (gdb) p/x GFP_ATOMIC $1 = 0x20 (gdb) p task_is_stopped_or_traced(init_task) $2 = 0 You can also use the macro and info macro commands to work with macros from inside your gdb session: (gdb) macro expand task_is_stopped_or_traced(init_task) expands to: ((init_task->state & (4 | 8)) != 0) (gdb) info macro task_is_stopped_or_traced Defined at include/linux/sched.h:218 included at include/linux/nmi.h:7 included at kernel/sched.c:31 #define task_is_stopped_or_traced(task) ((task->state & (__TASK_STOPPED | __TASK_TRACED)) != 0) Note that gdb actually knows which contexts macros are and aren't visible, so when you have the program stopped inside some function, you can only access macros visible at that point. (You can see that the \"included at\" lines above show you through exactly what path the macro is visible). gdb variables Whenever you print a variable in gdb, it prints this weird $NN = before it in the output: (gdb) p 5+5 $1 = 10 This is actually a gdb variable, that you can use to reference that same variable any time later in your session: (gdb) p $1 $2 = 10 You can also assign your own variables for convenience, using set : (gdb) set $foo = 4 (gdb) p $foo $3 = 4 This can be useful to grab a reference to some complex expression or similar that you'll be referencing many times, or, for example, for simplicity in writing a conditional breakpoint (see tip 1). Register variables In addition to the numeric variables, and any variables you define, gdb exposes your machine's registers as pseudo-variables, including some cross-architecture aliases for common ones, like $sp for the the stack pointer, or $pc for the program counter or instruction pointer. These are most useful when debugging assembly code or code without debugging symbols. Combined with a knowledge of your machine's calling convention, for example, you can use these to inspect function parameters: (gdb) break write if $rsi == 2 will break on all writes to stderr on amd64, where the $rsi register is used to pass the first parameter. The x command Most people who've used gdb know about the print or p command, because of its obvious name, but I've been surprised how many don't know about the power of the x command. x (for \"e x amine\") is used to output regions of memory in various formats. It takes two arguments in a slightly unusual syntax: x/FMT ADDRESS ADDRESS , unsurprisingly, is the address to examine; It can be an arbitrary expression, like the argument to print . FMT controls how the memory should be dumped, and consists of (up to) three components: A numeric COUNT of how many elements to dump A single-character FORMAT, indicating how to interpret and display each element A single-character SIZE, indicating the size of each element to display. x displays COUNT elements of length SIZE each, starting from ADDRESS, formatting them according to the FORMAT. There are many valid \"format\" arguments; help x in gdb will give you the full list, so here's my favorites: x/x displays elements in hex, x/d displays them as signed decimals, x/c displays characters, x/i disassembles memory as instructions, and x/s interprets memory as C strings. The SIZE argument can be one of: b , h , w , and g , for one-, two-, four-, and eight-byte blocks, respectively. If you have debug symbols so that GDB knows the types of everything you might want to inspect, p is usually a better choice, but if not, x is invaluable for taking a look at memory. [~]$ grep saved_command /proc/kallsyms ffffffff81946000 B saved_command_line (gdb) x/s 0xffffffff81946000 ffffffff81946000 <>: \"root=/dev/sda1 quiet\" x/i is invaluable as a quick way to disassemble memory: (gdb) x/5i schedule 0xffffffff8154804a <schedule>: push %rbp 0xffffffff8154804b <schedule+1>: mov $0x11ac0,%rdx 0xffffffff81548052 <schedule+8>: mov %gs:0xb588,%rax 0xffffffff8154805b <schedule+17>: mov %rsp,%rbp 0xffffffff8154805e <schedule+20>: push %r15 If I'm stopped at a segfault in unknown code, one of the first things I try is something like x/20i $ip-40 , to get a look at what the code I'm stopped at looks like. A quick-and-dirty but surprisingly effective way to debug memory leaks is to let the leak grow until it consumes most of a program's memory, and then attach gdb and just x random pieces of memory. Since the leaked data is using up most of memory, you'll usually hit it pretty quickly, and can try to interpret what it must have come from. ~ nelhage Ksplice is hiring! Do you love tinkering with, exploring, and debugging Linux systems? Does writing Python clones of your favorite childhood computer games sound like a fun weekend project? Have you ever told a joke whose punch line was a git command? Join Ksplice and work on technology that most people will tell you is impossible: updating the Linux kernel while it is running. Help us develop the software and infrastructure to bring rebootless kernel updates to Linux, as well as new operating system kernels and other parts of the software stack. We're hiring backend, frontend, and kernel engineers. Say hello at jobs@ksplice.com ! Category: programming ::: Tags: c debugging gdb linux tricks ::: Permanent link to this entry ::: \u00ab Coffee shop Internet... | Main | Happy Birthday Kspli... \u00bb Comments: One of my favourite GDB tricks: The @ symbol, used to view many elements of an array/STL vector in one go. With C, it is easy to view the full array: If the code is: int a[ 10 ] = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 }; Then: (gdb) p a $1 = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10} However this is not useful if the array has 1000 entries, and you want to view a handful of entries located somewhere in the middle. Also, this will not work with a C++ vector, because it will dump the vector object's data members. Using the '@' symbol allows us to do both: (gdb) p *&a[0]@10 $1 = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10} This prints the first 10 elements in the vector. Looks ugly, but is not so complicated really: '&a[0]' gets the address of the first element. '*' dereferences the address back to the vector's data type. Finally '@10' pulls out 10 elements. Of course, to view elements 550-553 in a long vector, all you do is 'p *&a[550]@4'. Posted by Niraj on August 28, 2012 at 07:37 AM EDT # Post a Comment: Name: E-Mail: URL: Notify me by email of new comments Remember Information? Your Comment: HTML Syntax: NOT allowed Please answer this simple math question 4 + 93 = http://betterexplained.com/articles/debugging-with-gdb/","title":"By Ksplice Post Importer on Jan 24, 2011"},{"location":"tech/tools/jekyll/","text":"Jekyll tech/tool How to escape liquid template tags? There is a way to escape without plugins, use the code below: {{ \"{% this \" }}%} and for tags, to escape {{ this }} use: {{ \"{{ this \" }}}}","title":"Jekyll"},{"location":"tech/tools/jekyll/#jekyll","text":"","title":"Jekyll"},{"location":"tech/tools/jekyll/#techtool","text":"","title":"tech/tool"},{"location":"tech/tools/jekyll/#how-to-escape-liquid-template-tags","text":"There is a way to escape without plugins, use the code below: {{ \"{% this \" }}%} and for tags, to escape {{ this }} use: {{ \"{{ this \" }}}}","title":"How to escape liquid template tags?"},{"location":"tech/tools/pycharm/","text":"Pycharm tech/tool Navigate: open class: cmd+o open file: shift+cmd+o show function code: cmd+y show current file content structure: cmd+F12, cmd+8 next in menu: ctrl+n previous in menu: ctrl+p go to definition: cmd+b go back: cmd+[ split vertically: cmd+\\ Edit: redo: shift+cmd+z indent: ctrl+alt+tab, tab show basic completion hint: alt+h Find: find: cmd+f replace: cmd+r find in path: cmd+shift+f Run: run: ctrl+r run current curser: ctrl+shift+r Refactor: rename: shift+F6, cmd+0 find usages: alt+7, alt+F7","title":"Pycharm"},{"location":"tech/tools/pycharm/#pycharm","text":"","title":"Pycharm"},{"location":"tech/tools/pycharm/#techtool","text":"Navigate: open class: cmd+o open file: shift+cmd+o show function code: cmd+y show current file content structure: cmd+F12, cmd+8 next in menu: ctrl+n previous in menu: ctrl+p go to definition: cmd+b go back: cmd+[ split vertically: cmd+\\ Edit: redo: shift+cmd+z indent: ctrl+alt+tab, tab show basic completion hint: alt+h Find: find: cmd+f replace: cmd+r find in path: cmd+shift+f Run: run: ctrl+r run current curser: ctrl+shift+r Refactor: rename: shift+F6, cmd+0 find usages: alt+7, alt+F7","title":"tech/tool"},{"location":"tech/tools/screen/","text":"Screen tech/tool This is used for keep the process running on the machine you ssh to, even you disconnected from the ssh and shutdown your local computer. First ssh to the machine normally. Type \"screen\". It would open a empty shell for you. Run the process in this shell. Press \"Ctrl + A, Ctrl + D\" to switch back to the normal shell. You can log off, shutdown or anything. When you want to see that process again, ssh to the machine and type \"screen -r\".","title":"Screen"},{"location":"tech/tools/screen/#screen","text":"","title":"Screen"},{"location":"tech/tools/screen/#techtool","text":"This is used for keep the process running on the machine you ssh to, even you disconnected from the ssh and shutdown your local computer. First ssh to the machine normally. Type \"screen\". It would open a empty shell for you. Run the process in this shell. Press \"Ctrl + A, Ctrl + D\" to switch back to the normal shell. You can log off, shutdown or anything. When you want to see that process again, ssh to the machine and type \"screen -r\".","title":"tech/tool"},{"location":"tech/tools/svn/","text":"Subversion svn list: show contents svn mkdir [address] -m \"discription of the repository\": create a new repository svn co [address]: check out a directory to local svn add [file/directory]: add to the server svn commit -m \"discription of the transaction\": push changes to the server svn up: update to the newest version svn log: show all the changes how to create a local repository $ mkdir /home/user/svnrep $ cd ~/svnrep $ svnadmin create project1 tech/tool","title":"Subversion"},{"location":"tech/tools/svn/#subversion","text":"svn list: show contents svn mkdir [address] -m \"discription of the repository\": create a new repository svn co [address]: check out a directory to local svn add [file/directory]: add to the server svn commit -m \"discription of the transaction\": push changes to the server svn up: update to the newest version svn log: show all the changes how to create a local repository $ mkdir /home/user/svnrep $ cd ~/svnrep $ svnadmin create project1","title":"Subversion"},{"location":"tech/tools/svn/#techtool","text":"","title":"tech/tool"},{"location":"tech/tools/tmux/","text":"TMUX Inside c-b is the main key to trigger tmux commands. after c-b you can use the following keys to do things. session d \" detach windows c \" create a new windown w \" list all the windows p \" previous window n \" next window 3 \" jump to window 3 & \" close window , \" rename window panes % \" vertical split :sp \" horizontally split x \" close x Outside When starting tmux, you can do tmux -s name_of_session tmux list-sessions \" to show the existing session tmux attach \" to recover the session tmux attach -b name_of_session Rename Session tmux list-sessions It shows in the format of name: number of windows . tmux rename-session [-t current-name] [new-name] if -t is not provided, the most recent one will be used.","title":"TMUX"},{"location":"tech/tools/tmux/#tmux","text":"","title":"TMUX"},{"location":"tech/tools/tmux/#inside","text":"c-b is the main key to trigger tmux commands. after c-b you can use the following keys to do things.","title":"Inside"},{"location":"tech/tools/tmux/#session","text":"d \" detach","title":"session"},{"location":"tech/tools/tmux/#windows","text":"c \" create a new windown w \" list all the windows p \" previous window n \" next window 3 \" jump to window 3 & \" close window , \" rename window","title":"windows"},{"location":"tech/tools/tmux/#panes","text":"% \" vertical split :sp \" horizontally split x \" close x","title":"panes"},{"location":"tech/tools/tmux/#outside","text":"When starting tmux, you can do tmux -s name_of_session tmux list-sessions \" to show the existing session tmux attach \" to recover the session tmux attach -b name_of_session","title":"Outside"},{"location":"tech/tools/tmux/#rename-session","text":"tmux list-sessions It shows in the format of name: number of windows . tmux rename-session [-t current-name] [new-name] if -t is not provided, the most recent one will be used.","title":"Rename Session"},{"location":"tech/tools/vim/","text":"VIM Installation git clone https://github.com/vim/vim && cd vim ./configure --enable-python3interp sudo make sudo make install Navigation j down k up h left l right $ to the end of line ^ to the beginning of the first word 0 move the the beginning of the line { to previous empty line } to next empty line gg to the beginning of the file G or :$ to the end of the file <c-f> forward page <c-b> back page w or W next word b or B beginning of word e or E end of word z<enter> scroll to let the current line at the top of the screen 18gg or 18G or :18 go to line 18 <c-w> then hjkl switch windows <leader>d go to definition of a python object with jedi-vim. <leader> is mapped to \\ by default. <c-o> go back to where the cursor was just now. <c-i> go forward if you used go back. <c-]> go to the tag. Usually used in :help. <c-[> go back from the tag. Modify c change y copy d delete gq format to a paragraph with textwidth. Registers \" + [register_name] . The register name can be 0-9 or a-z, or some other special ones. \"_ the black hole register. \"1yy copy the current line to register 1. \"1p paste the content in register 1. Search :vimgrep * / .py 'import numpy as np' Select v select mode V select lines <c-v> select blocks Replace :%s/origin/destiny/g replace all. % means the entire file. Without it, it would only do the current line. :%s/origin/destiny/gc replace interactively. You can also use register to copy paste things for the word you want to search and replace. Just select and use y to copy, and paste with <c-r>\" . Comment <c-v> to select a block. I to insert a // or # at the beginning of the line. Command :e open :w save :x save & quit :q quit :make makefile :cwindow or :cw quickfix window :r insert a file content to curser :set nu turn on line number. :set nonu turn of line number. :set nu! toggle line number. Replace nu with any other option. Windows <C-w>n new horizontal split (editing a new empty buffer) <C-w>s split window horizontally (editing current buffer) <C-w>v vsplit window vertically (editing current buffer) <C-w>c close window <C-w>o close all windows, leaving :only the current window open za //fold and unfold code blocks //open and close nerd tree +g //go to definition //go back //go forward gt //next tab gT //previous tab NerdTree for directory: p //parent x // close o // open for file: o // open s //split gs //silent split vim-test <leader> + ta run all tests. This is remaped by me. <leader> + tn nearest. <leader> + tf file. Search with CtrlP To search for files and open: <c-p> to change pane. Buffers switch between buffers: :ls \" show buffers \" switch between the current one and the last one 4 \" switch to buffer number 4 :bd close buffer jedi n find all references. d go to definition.","title":"VIM"},{"location":"tech/tools/vim/#vim","text":"","title":"VIM"},{"location":"tech/tools/vim/#installation","text":"git clone https://github.com/vim/vim && cd vim ./configure --enable-python3interp sudo make sudo make install","title":"Installation"},{"location":"tech/tools/vim/#navigation","text":"j down k up h left l right $ to the end of line ^ to the beginning of the first word 0 move the the beginning of the line { to previous empty line } to next empty line gg to the beginning of the file G or :$ to the end of the file <c-f> forward page <c-b> back page w or W next word b or B beginning of word e or E end of word z<enter> scroll to let the current line at the top of the screen 18gg or 18G or :18 go to line 18 <c-w> then hjkl switch windows <leader>d go to definition of a python object with jedi-vim. <leader> is mapped to \\ by default. <c-o> go back to where the cursor was just now. <c-i> go forward if you used go back. <c-]> go to the tag. Usually used in :help. <c-[> go back from the tag.","title":"Navigation"},{"location":"tech/tools/vim/#modify","text":"c change y copy d delete gq format to a paragraph with textwidth.","title":"Modify"},{"location":"tech/tools/vim/#registers","text":"\" + [register_name] . The register name can be 0-9 or a-z, or some other special ones. \"_ the black hole register. \"1yy copy the current line to register 1. \"1p paste the content in register 1.","title":"Registers"},{"location":"tech/tools/vim/#search","text":":vimgrep * / .py 'import numpy as np'","title":"Search"},{"location":"tech/tools/vim/#select","text":"v select mode V select lines <c-v> select blocks","title":"Select"},{"location":"tech/tools/vim/#replace","text":":%s/origin/destiny/g replace all. % means the entire file. Without it, it would only do the current line. :%s/origin/destiny/gc replace interactively. You can also use register to copy paste things for the word you want to search and replace. Just select and use y to copy, and paste with <c-r>\" .","title":"Replace"},{"location":"tech/tools/vim/#comment","text":"<c-v> to select a block. I to insert a // or # at the beginning of the line.","title":"Comment"},{"location":"tech/tools/vim/#command","text":":e open :w save :x save & quit :q quit :make makefile :cwindow or :cw quickfix window :r insert a file content to curser :set nu turn on line number. :set nonu turn of line number. :set nu! toggle line number. Replace nu with any other option.","title":"Command"},{"location":"tech/tools/vim/#windows","text":"<C-w>n new horizontal split (editing a new empty buffer) <C-w>s split window horizontally (editing current buffer) <C-w>v vsplit window vertically (editing current buffer) <C-w>c close window <C-w>o close all windows, leaving :only the current window open za //fold and unfold code blocks //open and close nerd tree +g //go to definition //go back //go forward gt //next tab gT //previous tab","title":"Windows"},{"location":"tech/tools/vim/#nerdtree","text":"for directory: p //parent x // close o // open for file: o // open s //split gs //silent split","title":"NerdTree"},{"location":"tech/tools/vim/#vim-test","text":"<leader> + ta run all tests. This is remaped by me. <leader> + tn nearest. <leader> + tf file.","title":"vim-test"},{"location":"tech/tools/vim/#search-with-ctrlp","text":"To search for files and open: <c-p> to change pane.","title":"Search with CtrlP"},{"location":"tech/tools/vim/#buffers","text":"switch between buffers: :ls \" show buffers \" switch between the current one and the last one 4 \" switch to buffer number 4 :bd close buffer","title":"Buffers"},{"location":"tech/tools/vim/#jedi","text":"n find all references. d go to definition.","title":"jedi"}]}